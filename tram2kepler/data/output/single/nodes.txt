T1003.001
T1210
T1570
T1140
T1218.011
T1059.003
T1057
T1518.001
T1106
T1082
T1016
T1078
T1047
T1027
T1056.001
T1083
T1053.005
T1070.004
T1105
T1090
T1005
T1574.002
T1071.001
T1484.001
T1204.002
T1055
T1562.001
T1033
T1566.001
T1219
T1547.001
T1021.001
T1543.003
T1569.002
T1036.005
T1112
T1041
T1110
T1190
T1564.001
T1113
T1573.001
T1095
T1552.001
T1012
T1074.001
T1548.002
T1068
T1072
T1557.001
NotPetya Technical Analysis  A Triple Threat File Encryption MFT Encryption Credential Theft
Earth Zhulong Familiar Patterns Target Southeast Asian Firms
Malware Spotlight Camaro Dragons TinyNote Backdoor
Rorschach  A New Sophisticated and Fast Ransomware  Check Point Research
Bypassing Intel CET with Counterfeit Objects  OffSec
Emotet Strikes Again  LNK File Leads to Domain Wide Ransomware  The DFIR Report
Malware Analysis LummaC2 Stealer
FedEx Phishing Campaign Abusing TrustedForm and PAAY
Take a NetWalk on the Wild Side
Malicious OAuth applications used to compromise email servers and spread spam  Microsoft Security Blog
Nefilim Ransomware
Deja Vu All Over Again Tax Scammers at Large
Threat Assessment Black Basta Ransomware
Hafniuminspired cyberattacks neutralized by AI
eSentire Threat Intelligence Malware Analysis BatLoader
Early Bird Catches the Wormhole Observations from the StellarParticle Campaign
3CXDesktopApp Backdoored in a Suspected Lazarus Campaign  
Not just an infostealer Gopuram backdoor deployed through 3CX supply chain attack
AA21200A Tactics Techniques and Procedures of Indicted APT40 Actors Associated with Chinas MSS Hainan State Security Department
Operation Spalax Targeted malware attacks in Colombia
LAPSUS Recent techniques tactics and procedures
Detecting Credential Stealing Attacks Through Active InNetwork Defense
Understanding DNS attacks Identifying and patching vulnerabilities  Snyk
EvilExtractor  AllinOne Stealer
LockBit 20 How This RaaS Operates and How to Protect Against It
SOC Team Essentials  How to Investigate and Track the 8220 Gang Cloud Threat
Fantasy  a new Agrius wiper deployed through a supplychain attack
AA22320A Iranian GovernmentSponsored APT Actors Compromise Federal Network Deploy Crypto Miner Credential Harvester
New Horabot campaign targets the Americas
Vice Society leverages PrintNightmare in ransomware attacks
UNC215 Spotlight on a Chinese Espionage Campaign in Israel
Dark Web Profile MuddyWater APT Group
Cobalt Strike a Defenders Guide  Part 2
Tailoring Sandbox Techniques to Hidden Threats
Babadeda Crypter targeting crypto NFT and DeFi communities
Threat Assessment BlackCat Ransomware
AA21200B Chinese StateSponsored Cyber Operations Observed TTPs
Vulnerability in Essential Addons for Elementor Leads to Mass Infection
StopRansomware Royal Ransomware
GuLoader VBScript Variant Returns with PowerShell Updates
Xollam the Latest Face of TargetCompany
Operation Tainted Love  Chinese APTs Target Telcos in New Attacks
Defending Users NAS Devices From Evolving Threats
Enigma Stealer Targets Cryptocurrency Industry with Fake Jobs
ExConti and FIN7 Actors Collaborate with New Domino Backdoor
Fat Cats
Analysis on recent wiper attacks examples and how wiper malware works
Higaisa or Winnti APT41 backdoors old and new
Operation Harvest A Deep Dive into a Longterm Campaign
Prilex Brazilian PoS malware evolution
The Rising Trend of OneNote Documents for Malware delivery
ZeroDay Vulnerability in MOVEit Transfer Exploited for Data Theft
Iranian GovernmentSponsored APT Actors Compromise Federal Network Deploy Crypto Miner Credential Harvester
FinSpy unseen findings
Vice Society Profiling a Persistent Threat to the Education Sector
Spike in LokiBot Activity During Final Week of 2022
Nationstate threat actor Mint Sandstorm refines tradecraft to attack highvalue targets
GuLoader Demystified Unraveling its Vectored Exception Handler Approach
Pack it Secretly Earth Pretas Updated Stealthy Strategies
Malware Reverse Engineering for Beginners  Part 2
Supply Chain Risk from Gigabyte App Center Backdoor  Eclypsium  Supply Chain Security for the Modern Enterprise
Gotta Catch Em All  Understanding the NetSupport RAT Campaigns Hiding Behind Pokemon Lures
Uncommon infection methodspart 2
German users targeted with Gootkit banker or REvil ransomware
New IcedID variants shift from bank fraud to malware delivery
BumbleBee Roasts Its Way to Domain Admin
Operation CMDStealer Financially Motivated Campaign Leverages CMDBased Scripts and LOLBaS for Online Banking Theft in Portugal Peru and Mexico
AA20336A Advanced Persistent Threat Actors Targeting US Think Tanks
Do Not Cross The RedLine Stealer Detections and Analysis
Conti Team One Splinter Group Resurfaces as Royal Ransomware with Callback Phishing Attacks
Threat Advisory 3CX Softphone Supply Chain Compromise
Malware Disguised as Document from Ukraines Energoatom Delivers Havoc Demon Backdoor
In the footsteps of the Fancy Bear PowerPoint mouseover event abused to deliver Graphite implants
Can You See It Now An Emerging LockBit Campaign
WTB Remote Mac Exploitation Via Custom URL Schemes
Dead or Alive An Emotet Story
Conti Ransomware
Microsoft research uncovers new Zerobot capabilities  Microsoft Security Blog
Just Because Its Old Doesnt Mean You Throw It Away Including Malware
Carbon Blacks TrueBot Detection
ITG10 Likely Targeting South Korean Entities of Interest to the Democratic Peoples Republic of Korea DPRK
Abusing cloud services to fly under the radar
Transparent Tribe APT36  PakistanAligned Threat Actor Expands Interest in Indian Education Sector
SYS01 Stealer Will Steal Your Facebook Info
Banking Trojan Techniques How Financially Motivated Malware Became Infrastructure
Tracking Traces of Malware Disguised as Hancom Office Document File and Being Distributed RedEyes
Attackers use domain fronting technique to target Myanmar with Cobalt Strike
Akira Ransomware is bringin 1988 back
WTB Adwind Trojan Circumvents Antivirus Software To Infect Your PC
Hungry for data ModPipe backdoor hits POS software used in hospitality sector
Update 2 3CX users under DLLsideloading attack What you need to know
GoBruteforcer GolangBased Botnet Actively Harvests Web Servers
The LockBit ransomware kinda comes for macOS
IronNetInjector Turlas New Malware Loading Tool
Dissecting One of APT29s Fileless WMI and PowerShell Backdoors POSHSPY
Hancitor Infection Chain Analysis An Examination of its Unpacking Routine and Execution Techniques
Smoking Out a DARKSIDE Affiliates Supply Chain Software Compromise
AA20258A Chinese Ministry of State SecurityAffiliated Cyber Threat Actor Activity
Phishing Campaign Targets Chinese Nuclear Energy Industry
Latin American Governments Targeted By Ransomware
Chinese Threat Actor Used Modified Cobalt Strike Variant to Attack Taiwanese Critical Infrastructure
OpenSource Gh0st RAT Still Haunting Inboxes 15 Years After Release
CrowdStrike Uncovers I2Pminer MacOS Mineware Variant
Evasive NoEscape Ransomware Uses Reflective DLL Injection
Stolen certificates in two waves of ransomware and wiper attacks
BlueNoroff introduces new methods bypassing MoTW
Fork in the Ice The New Era of IcedID
Kimsuky Strikes Again  New Social Engineering Campaign Aims to Steal Credentials and Gather Strategic Intelligence
Warning New attack campaign utilized a new 0day RCE vulnerability on Microsoft Exchange Server
Recent TZW Campaigns Revealed As Part of GlobeImposter Malware Family
MERCURY and DEV1084 Destructive attack on hybrid environment
ZipJar a little bit unexpected attack chain
Whos swimming in South Korean waters Meet ScarCrufts Dolphin
Iron Tigers SysUpdate Reappears Adds Linux Targeting
Unwrapping Ursnifs Gifts  The DFIR Report
Qakbot Returns to ISO Delivery For Now
BeeWare of Trigona An Emerging Ransomware Strain
SharpPanda APT Campaign Expands its Arsenal Targeting G20 Nations
Increasing The Sting of HIVE Ransomware
ViperSoftX Updates Encryption Steals Data
CISA Red Team Shares Key Findings to Improve Monitoring and Hardening of Networks
McAfee Defenders Blog NetWalker
Technical Analysis Black Basta Malware Overview
Earth Pretas Cyberespionage Campaign Hits Over 200
Updated New Evidence Emerges to Suggest WatchDog Was Behind Crypto Campaign
These arent the apps youre looking for fake installers targeting Southeast and East Asia
Tax firms targeted by precision malware attacks
BazarLoader Mocks Researchers in December 2020 Malspam Campaign
Investigation with a twist an accidental APT attack and averted data destruction
Threat actors strive to cause Tax Day headaches
Revisiting the NSISbased crypter
 LockBit Ransomware 20 Resurfaces
Too Log Didnt Read  Unknown Actor Using CLFS Log Files for Stealth
Ransom Cartel Ransomware A Possible Connection With REvil
Malicious ISO File Leads to Domain Wide Ransomware  The DFIR Report
SeroXen RAT for sale
A lookback under the TA410 umbrella Its cyberespionage TTPs and activity
When byte code bites Who checks the contents of compiled Python files
MoonBounce the dark side of UEFI firmware
Threat Actors Use MSBuild to Deliver RATs Filelessly
How to Detect Cobalt Strike
New RapperBot Campaign  We Know What You Bruting for this Time
Inside the Mind of a Cyber Attacker from Malware creation to Data Exfiltration Part 1
CatB Ransomware  File Locker Sharpens Its Claws to Steal Data with MSDTC Service DLL Hijacking
Analyzing Solorigate the compromised DLL file that started a sophisticated cyberattack and how Microsoft Defender helps protect customers
Horabot campaign targeted businesses for more than two years before finally being discovered
StopRansomware Hive Ransomware
Linux malware strengthens links between Lazarus and the 3CX supplychain attack
AA21076A TrickBot Malware
This file extracts credentials from LSASS similar to Mimikatz.
It calls OpenProcess on lsass.exe with access flag set to VM_READ, and looks for the modules wdigest.dll and lsasrv.dll loaded in the lsass.exe process.
It spreads to Microsoft Windows machines using several propagation methods, including the EternalBlue exploit for the CVE-2017-0144 vulnerability in the SMB service.
SMB exploitation via EternalBlue
SMBv1 Exploitation via EternalBlue
has the capability to exploit SMBv1 via the well known EternalBlue exploit.
SMB copy and remote execution
This thread is then used to execute the SMB copy and remote execution
SMB copy and remote execution
SMB Copy and Remote Execution
The malware decompresses its resource named
The malware decompresses a resource
This is used as an integrity check for the decryption process.
decrypt the MFT,
the code attempts to decrypt the contents
Once the sector is decrypted,
and the same key is used to decrypt the MFT.
is also decoded, and placed back
its resource section are decompressed and written to disk
The malware is a DLL that is launched using rundll32.exe:
being invoked by rundll32.exe.
Command Line Execution
Once the command line arguments are generated
The malware also spawns cmd.exe to execute the following command
that hashes each running process on the system
Process Hashes and Process Privilege Checks
to track which of the 3 processes are running on the system.
compares each hash with 3 hardcoded hashes:\n\n0x6403527E → avp.exe associated with Kaspersky AV\n0x23214B44  → ns.exe associated with Norton Security\n0x651B3005 → ccSvcHst.exe associated with Symantec
using the API NtRaiseHardError
invokes the following API’s:
GetExtendedTcpTable to retrieve a list of TCP endpoints\nGetIpNetTable to retrieve
NetServerEnum to get a list
NetServerGetInfoto retrieve the current configuration
CreateFile and WriteFile are used
CreateProcessAsUser or CreateProcess is executed,
is created using the same API call;
Calls CryptEncrypt
it also invokes the API NTRaiseHardError.
undocumented Windows API that causes
If the API fails to execute, the malware calls InitiateSystemShutdownExW
NetServerGetInfoto retrieve the current configuration for the local server
Obtains the IP address from the ClientIpAddress field
There are two approaches to using valid credentials to copy and execute the malware to a remote host:
is used to connect to a server using the default credentials
WMIC
C:\Windows\system32\wbem\wmic.exe /node
encodes it using XOR encoding with key
contains the original MBR that was encoded by XORing
which were previously encrypted
the original encoded MBR
obtain keystrokes, and status of keyboard buffer
The malware only targets fixed drives on the system.
The malware will first start enumerating files in the directory it is being executed from.
the scheduled task is set to trigger 60 minutes after the malware execution by default.
the scheduled task will trigger 30 minutes after the malware execution.
Explanation of schtask parameters
taskrun. Path and filename of the task to be run
For instance, immediately after execution, it loads itself in memory, and deletes itself from the disk.
delete important files
the configuration file will be deleted
threat actors use Themida packer to obfuscate the signature used for detection.
packed by noted tools
Themida-packed
upload/download file
remote shell functions.
It supports proxy (Socks5),
with SOCKS v5 server
used to dump information from the victim’s Oracle database.
an information stealer used to harvest internal information.
Obfuscated PowerShell script
multi-layer obfuscation
to obfuscate their tools
have adopted more obfuscation techniques
Heavily obfuscated PowerShell script
the encrypted payload
the encrypted payload
to obfuscate control flow of program.
Heavy obfuscation in a simple but useful anti-analysis approach makes it difficult for security products to detect their scripts.
threat actors use multi-layered AES encryption and base64 encoding to obfuscate
obfuscate the execution flow of the program
the decryption algorithm
decrypted with RC4 algorithm
usage of a highly similar decryption algorithm
to decrypt the payload
decrypt it
the decryption function into RC4
they always have used DLL sideloading as their major technique to launch their malware.
adopted DLL sideloading techniques to run their malware.
used DLL sideloading to launch their malware
The malicious DLL “gtn.dll”, which we named as “ShellFang”, loads when a legitimate executable is launched.
including API hashing and execution flow obfuscation through exception mechanism
Windows APIs are obfuscated via a hashing function and dynamically resolved in the run-time.
Necessary APIs will be dynamically resolved during execution.
API obfuscation, and execution flow obfuscation
abusing exception mechanisms to obfuscate the execution flow of programs and Windows API hashing.
the final payload is an HTTPs Cobalt Strike beacon.
by creating immediate tasks through GPO.
abused group policy objects (GPO) to install loaders
Propagation through GPO
they will submit immediate tasks to the hosts in the domain through GPO
As the hosts receive the task through GPO
usually compile all necessary libraries in a single binary, making malware classification more difficult for analysts and resulting in a large binary
Once the victim opens the document,
injecting the shellcode into rundll32.exe
Shellcode which is used for code injection
proxy
create scheduled tasks for persistence.
to create a ImmediateTask
Windows API
Windows APIs
backdoor is a basic remote shell
C:\Windows\System32\cmd.exe /c
forcing its component SmadAVprotect32.exe to side-load their malicious DLL.
the malware starts a function called bypassSMADAV
with the API function IsWindowVisible.
by IsWindowVisible function
calling the RegisterClass function prior to calling CreateWindow.
Before a call to CreateWindowEx, you would usually first need to create a class by calling RegisterClass and then class CreateWindowEx.
the malware creates 2 scheduled tasks
schtasks /Create /TN test /SC MINUTE /MO 15 /TR
the malware creates a scheduled task to execute its copy from this randomized path:\n\nschtasks /Create /TN 8NaZrCq3pGeDRXKF /SC MINUTE /MO 15 /TR "explorer.exe c:\users\public\8NaZrCq3pGeDRXKF.zip\8NaZr.exe" /f
The final payload returned is a lightweight PowerShell backdoor,
It then picks one random C&C URL out of the three available and constructs a GET request
sends them back to the server in POST request:
After the validation of the JSON and Base64 decoding
used by various actors to disable endpoint protection tools.
techniques like process hollowing where the process is created in suspend mode and then replaced with malicious code.
The current system username
The current username home folder
The system’s network interfaces (name, MacAddress, description)
was deployed using DLL side-loading
due to DLL side-loading, the loader/injector winutils.dll is loaded into memory and runs in the context
abused to side-load
Packed Rorschach loader and injector
the initial loader/injector winutils.dll is protected with UPX-style packing
After unpacking, the sample loads
decrypted and injected
and decrypts config
injected into notepad.exe, where the ransomware logic begins.
is injected into notepad.exe
Disable the Windows firewall, using netsh.exe
When executed on a Windows Domain Controller (DC), the ransomware automatically creates a Group Policy, spreading itself to other machines within the domain.
creates a group policy
creates another group policy
creates another group policy
deletes them from the original location.
creating a schedule task
that registers a scheduled task which runs immediately and upon user logon,
finds the relevant syscall numbers for NT APIs,
with the syscall instruction
the malware first creates a syscall table for NT APIs
Creation of syscall table for certain NT APIs.
It makes direct system calls using the “syscall” instruction.
Example use of direct syscall.
It uses GetSystemDefaultUILanguage and GetUserDefaultUILanguage to
The WinAPI CryptGenRandom is utilized
is implemented via NtSetInformationFile using FileInformationClass FileRenameInformation,
Command Line Arguments
the list of processes
code is protected and obfuscated
This obfuscated process
reusing multiple code chunks from DEP-allowed memory pages, called ROP gadgets.
ROP-based attacks execute “RET” instructions without a prior “CALL” instruction, the running thread’s stack and the shadow stack values mismatch
call other vfgadgets that are responsible for executing specific operations, like Argument LoadersInvokers and Collectors.
Collectors are gadgets that retrieve a value already present in a register, and save it back into the attacker’s counterfeit object
leaked the stack pointer and retrieved the this pointer as a static offset from the stack.
vfgadget address,
prepare the address of the Windows API we want to invoke along with its arguments.
the Windows API address and its arguments.
invoke any API we like,
began sending spam emails, mailing new malicious attachments to continue spreading.
discover commands using the Windows utilities systeminfo
systeminfo
systeminfo
ipconfig
ipconfig /all
ipconfig /all
Remote access tools were used for command and control, such as Tactical RMM and Anydesk.
the threat actors deployed Tactical RMM, a remote management agent, for additional access and persistence in the environment.
the threat actor accessed the environment using Tactical RMM to deploy Anydesk on the compromised host.
the threat actors proceeded to deploy several remote management tools across the environment.
Tactical RMM is a remote management software platform that uses a combination of agents to allow for remote management and access to systems.
the threat actors added AnyDesk to the same server running Tactical RMM, providing an additional means of access prior to the deployment of ransomware.
used by the threat actor for the remote management of Tactical RMM Agent.
Using this RMM agent they proceeded to install AnyDesk on the host.
Tactical RMM Agent was installed by the threat actor on a server to ensure remote access
The intrusion began when a user double clicked a LNK file, which then executed encoded Powershell commands
The Powershell script, when double clicked (executed),
they also used tasklist
Next, they proceeded to transfer a beacon executable over SMB to the remote host’s ProgramData directory.
The threat actors, however, proceeded along a more traditional path, using SMB file transfers and remote services to move laterally across domain controllers and several other servers
rasomware deployment to all hosts over SMB.
files transferred via SMB as SYSTEM on remote hosts.
an executable Cobalt Strike beacon was copied via SMB to a target machine
This beacon was then successfully executed via WMI
then executed via WMI.
wmic
setup a Registry Run Key to maintain persistence on the beachhead host.
established persistence via a run key.
commands to download an Emotet DLL onto the computer.
the threat actors dropped Powertool64.exe and dontsleep.exe in preparation for their final actions.
the threat actors then dropped SoftPerfect’s Network Scanner
dropped and executed on the server
Windows net commands were run,
threat actors proceeded to run the net commands
the threat actors conducted further discovery tasks running find.bat and p.bat,
and a batch file 1.bat were dropped on the host and the batch file was executed
two batch files were run.
The first find.bat was used to run
C:\Windows\System32\cmd.exe /c
cmd.exe /c start
the threat actor executed a batch script
They then proceeded to dump credentials from the LSASS process on the host.
the ‘mimikatz’ string in the Netlogon event that is used by the Mimikatz Zerologon implementation.
Process access to LSASS was observed, likely to dump credentials
The Granted Access level matches know indicators for Mimikatz
request access level of 0x0040 (64) to LSASS, as well indicating other credential access tools may have been in use by the threat actor.
With some further process injection
The threat actor was observed process injecting into legitimate process
from a process that was injected with Cobalt Strike.
Injected Process Name
the processes used for injection
The specific mechanism used to inject into a foreign process, was injecting arbitrary code into its memory space, and executing it as a remotely created thread
from an injected process
A flight of netlogon authentications were observed from the beachhead host to the domain controller as a possible attempt at exploiting the domain controller.
After choosing a new server and connecting via RDP,
From there, the threat actors began connecting to other hosts via RDP, including the a backup server.
did RDP to a few other servers
traces of RDP (Remote Desktop Protocol) connections were discovered on multiple compromised hosts utilized for lateral movement
They started by connecting to a new server via RDP
Once establishing the RDP connection, they deployed Powertool64.exe,
The threat actor kept the remote desktop session alive
to execute encoded scripts.
The script will decode itself
The decoded base 64 content
is a Base64 encoded script with various components split into different variables for obfuscation purposes.
A service was also created for the agent.
service was installed in the system
svcService Type: user mode serviceService Start Type: auto startService Account: LocalSystem
a separate service was created for that agent.
service was installed in the system
service was installed in the system
--serviceService Type: user mode serviceService Start Type: auto startService Account: LocalSystem
Service Type: user mode serviceService Start Type: auto startService Account: LocalSystem
The threat actor was observed creating remote services
This occurred from rundll32.exe, which was previously used to execute and run Cobalt Strike.
C:\Windows\System32\cmd.exe /c rundll32.exe C:\ProgramData\x86.dll, StartA
delete its process file
delete the driver files.
removing files from the system.
The threat actor was observed deleting files that had been dropped to disk
whoami /groups
The threat actor was observed creating remote services in order to execute beacon DLL files
the threat actors began to review sensitive documents
Both HTTP and HTTPS were observed to be used.
Infected email attachments
obtaining relevant device data, such as OS version and architecture, hardware ID, CPU, RAM, screen resolution, system language, etc.
collects information, primarily system information
can take away system
exfiltrate files and extract data from specific applications.
acquire browsing histories, Internet cookies, usernames/passwords, personally identifiable details, credit card numbers, and other highly sensitive information from browsers.
target stored browser data
collects sensitive information from the victim’s machine
collects cookie information, search histories, and key inputs from browsers
collect inside of the “Web Data” SQLite file
sensitive data from the victim’s machine.
usernames/passwords,
include saved credentials
run under the name “tmp.exe” by unpacking itself to the “C:\Users\admin\AppData\Local\Temp\” file path.
Registry Key Sets
transmits information as a zip file
sends this information to its C2 server
C2 is transmitted as a zip file during the POST request.
transferred to the C2 server as a zip file.
transfers them to the C2 address
many obfuscated strings that are being covered by a random string, “edx765“, to evade detection.
obfuscated information,
passes the obfuscated string to a function that strips the arbitrary string and delivers the original string
passes the obfuscated string to a function that strips the arbitrary string and delivers the original string.
Making a ‘POST’ request,
multiple POST requests to the “c2/sock” address
accessed C2 while visiting port 80
they are instructed to click “Confirm” to view a message from “Express.”
The user is also asked to permit push notifications in the browser,
Once decrypted, the configuration file reveals several parameters,
Decryption exclusion list
decrypted using the RC4 algorithm with a hard-coded key in the resource.
send the decryption program
and decrypted
decrypted using the RC4 algorithm with a hardcoded key in the resource.
the hardcoded key to decrypt the configuration file.
to decrypt the configuration file.
Get configuration file and decrypt it
Decryptor download
The decryptor is delivered in a zip archive containing the decryptor executable
the decryptor to clean up their environment.
At the end of the decryption process, the program indicates the number of decrypted files
Decryptor has finished the decryption process
Decryptor execution
The decryptor program appears unique and is linked to one victim specifically. In our example, it only decrypts the files
one to get information about the machine, such as the operating system version,
one to get processes
reflective DLL loading, to inject a DLL from memory.
Use Windows API functions to inject DLL
a regular Bitmap (open matrix image format used by Windows) that can be used by malware to execute code or as a payload dropper
The image’s pixels are an actual binary representation of the payload.
This process can be summarized as Exe -> Resources -> BMP with embedded data in pixels fetched
The unpacked malware
the configuration file encrypted.
PowerShell Script uses Base64 and hexadecimal encoding and XOR-encryption
. The malware will try first to write in the registry-hive “HKEY_LOCAL_MACHINE” but if it cannot create it, it will use the registry-hive “HKEY_CURRENT_USER”:
Write in the registry
After the writing in the registry has been completed
write in the registry information
Create its own registry key in \SOFTWARE\<uniquename>
using the functions “SHGetFolderPathlW” and “CreateFileW”
with the function “WriteFile”.
Use Windows API functions
The batch script will delete the malware sample with its path using the command “del” and finally delete the bat file with the command “del %0%”.
the malware uses the “del” command
the malware tries to remove itself from the machine to avoid being detected and analyzed by security researchers
deletes the ransom note
The batch script
The download is done directly from the NetWalker Tor site
they will be able to download the decryptor
Place a value on RunOnce key
performing password spray,
Activity from a password-spray associated IP address.
an IP address that had been identified as participating in password spray
credential stuffing attacks
is distributed through exposed Remote Desktop Protocol (RDP) setups
a heavy emphasis on Remote Desktop Protocols.
by brute-forcing them
using other known vulnerabilities for initial access, i.e. vulnerabilities in Citrix gateway devices
uses other tools to gather credentials that include Mimikatz, LaZagne, and NirSoft’s NetPass.
It uses bat files
A batch file to stop services
the stolen credentials are used to reach high-value machines like servers
WMIC /node
reg add HKLM\software\Microsoft\Windows\CurrentVersion\Policies\System
makes use of API GetTickCount / QueryPerformanceCounter
the help of ShellExecute API
delete itself from the target systems after infection
It also drops and installs
sets the following registry entry to open the downloaded PDF file every time the computer boots
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\iXqrVo
adding the HIDDEN file attribute
adds the HIDDEN file attribute to the file:
taking command line arguments
command line argument
to download and execute a remote “note.hta”:
to download another remote file
the download and execution
uses PowerShell to pull and run
downloading and executing
downloads and runs
downloads and executes
downloads and executes
downloads and executes
downloads and executes
downloads and executes
the download of wed.hta
disables AMSI by hijacking the COM server, changing it from "%windir%\system32\amsi.dll" to "C:\IDontExist.dll".
performs the following actions to alter Windows Defender settings
Adds the following exclusions to Windows DefenderExtensions
Allows known Windows Defender Threat IDs to execute
Disables Windows Defender Attack Surface Reduction (ASR) rules
Disables the following Windows Defender features:Intrusion Prevention System\nIO AV Protection (does not scan downloaded files and attachments)\nRealtime monitoring\nScript scanning\nControlled folder access protection\nPUA protection\nScheduled scan
Sets Network Protection to audit mode in Windows Defender
Disables MAPS (Microsoft Active Protection Service) reporting
Allows severe/high/moderate/low-level threats to execute
Disables the "administrator in Admin Approval Mode" user type (disables UAC prompts)
Stops the WinDefend service (Windows Defender)
Disables the startup of the WinDefend service
Deletes the WinDefend service
Stops the Microsoft Defender Antivirus Network Inspection Service (WdNisSvc)
designed to hamper Windows Defender
to fool potential victims into opening them.
users still need to manually mount them and run the fake PDFs to trigger the infection chain
Manually executing the lnk file triggers
Manual interactions are required
a lot of junk code
keylogging
taking screenshots
to load a binary into memory that injects
can modify group policy for privilege escalation and defense evasion
can modify group policy for privilege escalation and defense evasion.
Attempts to delete malicious batch files.
makes modifications to the Registry.
adds a custom icon to the registry,
modifies the registry
creating a registry key HKCU\Control Panel\Desktop
Disables Windows Defender with batch scripts
with batch scripts
Uses batch scripts
the command line argument
uses Mimikatz to dump passwords.
Uses GetComputerName to query the computer name.
has used RDP for lateral movement.
has installed and used legitimate tools such as TeamViewer and AnyConnect on targeted systems.
iterate through the entire file system,
Victims receive spear phishing emails with attached malicious zip files
encoded PowerShell scripts
scripts to download additional scripts.
Creates benign-looking services for the ransomware binary.
Creates benign-looking services for the ransomware binary.
Lists internal IP addresses
has installed and used PsExec to execute payloads on remote hosts.
 Malicious actors typically gain entry to organizations’ Microsoft 365 environments by abusing either stolen account credentials
malicious actors behaving in predictable ways once they gain access to customer Microsoft 365 environment.
Actor signs in to a Microsoft 365 account from an endpoint
malicious actor signing in to a Microsoft 365 account
which the actor took after logging in to a user’s Microsoft 365 account
a malicious actor was observed signing in to a Microsoft 365 account
began with an actor signing into an internal user’s Microsoft 365 account from a VPN
a spoof of the legitimate ‘PerfectData’ software designed to masquerade a malicious application as legitimate
brute-force activity
The emails included an attachment named ‘Credit Transfer Copy.html’
capable of modifying Windows UAC prompt, disabling Windows Defender notifications, disabling Task Manager, disabling command prompt, preventing users from accessing Windows registry tools, disabling the Run command, and modifying the display timeout
performing antivirus tampering
the script retrieves NSudo and modifies Windows UAC prompt behavior by allowing administrators to perform operations without authentication or consent prompts
Disabling Windows Defender notifications, Disabling Task Manager, Disabling command prompt, Preventing users from accessing Windows registry tools, Disabling Run command, Modifying the display timeout
threat actor(s) made sure to add more paths and folders to Windows Defender exclusion including %TEMP% and C:\Windows\* as well as adding .ps1 (PowerShell) extension to the exclusion list.
Disabling Windows Defender notifications, Task Manager and Command Prompt
recursively removes the implementation of Windows Defender IOfficeAntiVirus
It then adds the extensions such as exe and DLL as exclusions to Windows Defender.
performs the antivirus checks
The script checks the host against the list of antiviruses
antivirus check script
to download the malicious update.bat file from the C2 domain
has the capability of sending additional payloads to the hosts
pulling additional BatLoader payloads and scripts from C2
retrieves the same files from the C2
executing scripts and commands retrieved from C2 such as ps1, bat, vbs, and exe
the script retrieves the Cobalt Strike payload
retrieves and executes the runanddelete.bat and scripttodo.ps1 scripts from the C2
then the full set of malware is retrieved from C2
retrieving malware from C2
The batch file was executed
the batch file to run
the batch file
The batch file
The batch script
cmd /C
cmd /c
cmd /c
the username
using the username
username
obtains all entries within the IPs starting with 192., 10., and .172 in the ARP cache table
it then checks the amount of IPs found in the ARP table
ARP table
the GPG-encrypted files:
the encrypted data
the encrypted strings reside within the function
The data stored in the BSS section is encoded
the encoded data in the BSS section
on the API calls QueryPerformanceFrequency and QueryPerformanceCounter
from API call GetSystemTimeAsFileTime
using the API
The traffic beaconing contains the following pattern that will be encrypted with the AES key extracted from the compressed blob
the encrypted with AES-128 beacon
OS version and system type
computer name
computer name
screenshot
then collects the credentials, host information, files,
Syncro RMM is a Remote Monitoring and Management tool used to control and manage devices remotely.
tool can be used as a persistence mechanism and remote accessing
Syncro RMM can also be used as a persistence mechanism
leverages SOCKS5
leverages SOCKS5 proxies to hide malicious traffic
task scheduling
it proceeds with scheduled task creation
run the scheduled task every 2 minutes is  start.
the scheduled task
creates the registry key
creating the registry key
These words are used to build the registry value names.
recursively removes the implementation of Windows Defender IOfficeAntiVirus under HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}.
enables the data transfer with URL syntax for protocols such as HTTP/HTTPS
runs it via rundll32.exe
injects itself into explorer.exe
injecting itself into a running explorer.exe process.
injecting itself into a running explorer.exe process
The script performs process injection using the API such as OpenThread (to create a handle to an existing process), VirtualAlloc (memory allocation in the chosen process), and QueueUserAPC, the thread that the APC (Asynchronous Procedure Calls) is queued to has to enter an alertable state
accessing browser credentials and cookies, Thunderbird and Outlook profiles
malware creates the persistence via Registry Run Keys.
creates a persistence via Registry Run Keys under HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
it stores three embedded binaries within the unpacked payload.
the embedded compressed binaries
compressed binary
unpacked payload
The binaries are compressed using APLib compression algorithm.
The unpacked sample is approximately 540 KB
The unpacked sample is approximately 540 KB
decompress data blobs
decompress them
The decompression function
Decrypted strings
Decompiled decryption function
Decryption function in Python
The decryption function
The decryption function
Decryption function
the decryption function
APLib decompression function
decrypts them
The decryption function is shown below, the decryption function can be represented as the following pseudocode:
The GPG decryption routine
GPG decryption
wmic
reg.exe query
that pulls the written data from the registry under HKEY_CURRENT_USER\Software\AppDataLow\Software\Microsoft\<registry_value>>
the Tor communication capability
Configured for WMI persistence
WMI Persistence
As tasklist uses WMI “under the hood,
the malicious authentications into victim O365 tenants had originated from within the victim’s own network.
the threat actor was making authentications to O365
Log in to O365 as a user with privileged access to cloud resources.
the threat actor succeeded in authenticating into victim O365 tenants
This threat actor abused access to accounts in the Cloud Solution Partner’s environment with legitimate delegated administrative privileges to then gain access to several customers’ O365 environments
the threat actor connected to the victim’s O365 tenant
the user account used to connect to the victim’s O365 tenant
the threat actor managed to continue to access the victim’s cloud environment
the accounts that were used to authenticate to the cloud.
the threat actor used a compromised O365 administrator account
The threat actor created new O365 Service Principals to maintain access to victim’s environments
The threat actor used accounts with Delegated Administrator rights to access other O365 tenants
the threat actor leveraged different credentials for each step while moving laterally through the victim’s network
using privileged accounts and then accessed the wiki using a different set of credentials.
the threat actor began attempting to connect into the environment via VPN
The threat actor attempted to log in to the VPN using several user accounts
threat actor had knowledge of these accounts and used them on the correct systems
the threat actor connected into the victim’s environment via a VPN
The Threat actor also used valid accounts to create persistence within the environment
to establish a Remote Desktop Protocol (RDP) session to an internal server
establish another RDP session to a different internal server
the threat actor connected via RDP to a user’s workstation
the threat actor’s RDP session.
The threat actor established RDP sessions to internal servers
The threat actor connected via Remote Desktop
the user the threat actor used to RDP
the threat actor connected via Remote Desktop to a Domain Controller
The threat actor used both privileged and non-privileged accounts for RDP throughout the environment, depending on the target system
using a domain service account.
using a domain administrator’s account.
the threat actor could have easily used a second domain administrator account
The threat actor accomplished this by using administrative accounts
a given user account was also authenticating to Active Directory from a given source IP address two years prior
the user account was known to have recently been abused by the threat actor
the threat actor accessing the wiki as users who would be considered “non-privileged”
A local account was used by the Threat Actor
to connect via SMB to targeted users, and then copy their Chrome profile directories as well as data protection API (DPAPI) data.
the threat actor connected via Remote Desktop to a Domain Controller and copied the DSInternals10 PowerShell module to the system.
the threat actor must first decrypt them
they decrypted the cookies file using the user’s DPAPI key.
The decryption of the cookies
deleted the specific history items related to threat actor activity
Attempted to blend in with a file name that matched the system name it resided on
Attempted to blend in with a file name that matched the system name it resided on
With the binary named to masquerade as a legitimate file on the system
AdFind was renamed to masquerade as a legitimate Windows binary
The threat actor renamed their utilities to masquerade as legitimate system binaries (AdFind as svchost.exe), match the system’s role (GoldMax), or appear legitimate (TrailBlazer as an apparent Adobe utility).
the threat actor renamed their systems prior to connecting to victim’s VPNs to match the victim’s system naming convention
Masquerades its command-and-control (C2) traffic as legitimate Google Notifications HTTP requests
placed in a hidden directory
directories with random names of a consistent length were navigated to by the same user that ran the tool.
ListUsers
The threat actor attempted to remotely list running processes on systems using tasklist.exe
process listing
This remote process listing
the threat actor was running tasklist remotely on these systems specifically to see which of the target systems was running Google Chrome.
The threat actor regularly interrogated other systems using tasklist.exe
the use of a PowerShell script to execute Mimikatz in-memory
to execute the Mimikatz commands ‘privilege::debug sekurlsa::logonpasswords “lsadump::lsa /patch”‘ in-memory
the script executed by the threat actor was heavily obfuscated and encrypted the output using AES256.
used a heavily obfuscated PowerShell script
enumerating current directory 
tries to enumerate the current directory
crawl the filesystem
The decrypted payload
Decrypted payload 
The decrypted payload
try to decrypt it using the RC4 encryption scheme with the key
then decrypts and communicates to
decodes the embedded shellcode
the encrypted payload
contain encrypted C2 strings
encrypted payload 
Embedded encrypted payload 
DLL has an encrypted payload embedded in it.
The embedded DLL
side loading “ffmpeg.dll”.
that have Base64 and AES encrypted C2’s appended to them
using NetWkstaGetInfo() API.
domain name, Hostname and OS Version
The info stealer also collects information on infected hosts
Manipulates registry
decrypting and executing the shellcode
decrypt the payload
The decrypted payload
decrypts a shellcode
performed through the CryptUnprotectData API function
an encrypted shellcode payload.
Encrypts a provided payload
DLLs with the names ualapi.dll and ncobjapi.dll being sideloaded
collects system information and browser history, then sends it to the C2 server.
downloads an infostealer and starts it.
Performs payload injections through syscalls via mapping a shellcode to a remote process and creating a remote thread.
The driver collects information about installed AV filters
Connects to a given host via a socket and waits for the server to send data.
Manipulates (creates, lists, starts, stops and deletes) services.
attackers placed
attackers placed
administrator credentials
compromised administrative [T1078.001] accounts
user
Access to valid
locate high value assets in order to exfiltrate data
Spearphishing emails with malicious attachments
attached to spearphishing emails
exploitation of public-facing applications
User execution [T1204] of malicious files
steganography [T1027.003] to hide stolen data inside other files stored on GitHub
multi-hop proxies
stage collected data  locally
Exfiltration over C2 channel
encryption
24 different IP addresses in use
compromised devices that act as proxies for their C&C servers
use some victims as proxies, or some vulnerable devices to forward communication to their real C&C servers.
phishing emails have similar topics and pretend to come from some of the same entities
attachments used for phishing emails,
emails have a PDF document attached
PDF file attached
used emails with PDF or RTF files attached that contain a link to download malware
user must click to download the malware
manually extract the file and execute it
have attempted to get users to execute malicious files masquerading as documents
regular RAR archives that have an executable file inside.
contains several benign files that are written to disk (they are not part of NSIS binaries and they are not used at all by the installer) and two files that are malicious
reads a string (or binary data) from its resource section
reads data from its own resource section and decrypts a payload.
is read from an encrypted resource
two shellcodes contained in the compiled AutoIt script
Read a binary from its resource section, write it to disk and execute it
variety of packers used for these executables
different variants of a packer
is packed with CyaX
is gzip-decompressed and executed
.NET packer known as CyaX
used an AutoIt packer that comes heavily obfuscated.
have used various layers of packers for obfuscating their droppers.
decrypting the payload
decrypting
decrypt
decrypts it
decrypts another executable
a string that will be decrypted
decrypts the array by doing a single-byte XOR operation, cycling through the key
decryption of the payload is based on XOR operations
decrypt the payload
a single-byte XOR algorithm.
decrypt the payload
have used various encryption algorithms in their droppers to hide strings and payloads
injecting it into legitimate processes.
be injected into a new process or loaded in the same process space
injected into a different process,
injection of the payload
performs the injection and execution of the payload
inject it into some process
shellcode with RunPE code is used to perform the injection
RAR archive is downloaded
compressed archives
layers of encryption, obfuscation or anti-analysis
was hiding in non-malicious code,
encrypted resource and XORed with a hardcoded password
encrypted with this same XOR-based algorithm
DLL is run with rundll32
uses steganography
reads pixels from an image contained in the first binary
stores every pixel as three numbers according to its red, green and blue components
have used packers that read pixel data from images contained in PE files’ resource sections and build the next layer of execution from the data
DLL that will be loaded and called in the same address space
performs the injection is contained in an array and is dynamically loaded.
disabling Windows Defender
have used CyaX packer, which can disable Windows Defender.
checking for security products
used droppers that check for security software present in a victim’s computer
loaded with VirtualAlloc and executed
used API calls in their droppers, such as  CreateProcessA, WriteProcessMemory and ResumeThread, to load and execute shellcode in memory
created in the Startup folder to execute the script.
used RATs that persist by creating a Run registry key or by creating a copy of the malware in the Startup folder
Delete the dropper executable
have used malware that deletes itself from the system
Download and execute files
ability to download and execute other malware
uploading and downloading files
keylogging
keylogging
keylogging,
used various RATs that have keylogging capabilities
screen capture
taking screenshots
used various RATs that can capture screenshots of victim machines
exfiltration of files
used various RATs that exfiltrate data over the same channel used for C&C
used RATs that can launch a command shell for executing commands.
have used scheduled tasks in their droppers and payloads to achieve persistence
used RATs that implement UAC bypassing.
have used RATs that allow full access to the Registry,
have used droppers that inject the payload into legitimate processes
used various RATs that can browse file systems
used various RATs with modules that show running processes
used various RATs that can read the Registry.
used various RATs that gather system information such as computer name and operating system during the initial infection
used various RATs that can collect the IP address of the victim machine
used various RATs that retrieve the current username during initial infection
used various RATs that can perform remote desktop access.
used various RATs that can access the local file system and upload, download or delete files
used Remcos RAT, which uses RC4 for encrypting C&C communications
used various RATs that use TCP for C&C communications
data exfiltration of sensitive information
move through the victim environment via RDP
mass deletion of virtual machines, storage, and configurations
to identify any credentials which may be stored in technical documentation
extraction of sensitive API Keys
Access to local password managers and databases to obtain further credentials
Using compromised credentials to access corporate VPNs.
victim controlled hostnames were revealed
runs a scheduled task
decryption of credentials
decrypted using DPAPI
These credentials are generated and stored in the memory of the LSASS process
Attackers may attempt to access LSASS process memory to extract credentials as it stores a variety of credentials.
LSASS process memory is one of the prime targets for attackers, as well as malware armed with lateral movement capabilities since it caches a variety of credentials
Credential extraction from the LSASS process
credential-based deception is to stage the deceptive credentials in LSASS process memory.
credentials are extracted with Mimikatz.
credential extraction tool Mimikatz
uses the CreateProcessWithLogonW Windows API
calling the API
recon for interesting hostnames
public facing systems is compromised
be injected with deceptive credentials at multiple places like LSASS process memory
Injecting NETONLY credentials into LSASS process memory
Injecting credentials into LSASS memory
credentials being picked up and used to pivot to decoy systems in the network
keyloggers
flood a remote DNS server with false traffic.
send traffic simultaneously to one server,
using the default factory credentials.
exfiltrating data from the target device
covert channel that can be used to exfiltrate data from the victim device
deliver more malware,
extract data and files from endpoint devices.
a version of the malware that was injected into a victim’s system
It usually pretends to be a legitimate file, such as an Adobe PDF or Dropbox file,
The phishing email with the malicious attachment
file is a Python program packaged by PyInstaller.
is an obfuscating tool for Python script that makes the malware harder to be analyzed and detected.
It contains Base64-encoded data
Python programs that are obfuscated using PyArmor
After decrypting the pyc file,
it uses the following command to delete the data in PSReadline
It also checks the victim’s hostname
collects browser history and passwords from the following browsers
It also uses the command “CopyFromScreen” to capture a screenshot.
Downloading files and getting a screenshot
Download components for the Keylogger
It is a key logger that saves data in the “KeyLogs” folder.
downloads three components from
can be executed via scheduled tasks.
It was quite common to see scheduled tasks used to create persistence for the ransomware executable,
The threat actors also expressed interest in other access methods such as RDP
Credentials that have either been reused across multiple platforms or have previously been exposed
this includes VPN accounts
Compromised accounts may be used to maintain access to the network.
local accounts.
domain and local accounts
Affiliates have been seen brute forcing
Affiliates have been seen brute forcing exposed RDP services and compromising accounts with weak passwords.
Exploit Public-Facing Applications
is typically executed via command line arguments
some defense evasion batch scripts.
a batch script or a specially crafted command line script.
The ProxyShell elevation of privilege on the Exchange PowerShell Backend (CVE-2021-34523), Windows Background Intelligent Transfer Service (BITS) improperly handling symbolic links (CVE-2020-0787), and abusing the CMSTPLUA COM interface have all been seen as methods of privilege escalation.
has utilized a UAC bypass tool.
Indicators, such as logs in Windows Event Logs or malicious files, are typically removed using wevtutil, a batch script, or CCleaner.
Windows Defender, other anti-malware solutions and monitoring tools are disabled utilizing a process explorer tool,
Firewall rules have occasionally been seen being disabled as well.
During the defense evasion phase, anti-malware and monitoring software is often disabled.
Mimikatz is a key player in dumping credentials but LockBit 2.0 has been occasionally seen utilizing MiniDump as well.
has been seen using the PowerShell module InvokeGPUpdate to update the group policy.
Most PowerShell scripts involved in LockBit 2.0 cases are Base64 encoded.
enumerates system information such as hostname, shares, and domain information.
has been known to self-propagate via SMB.
a method of lateral movement and a tool for downloading/executing files.
AnyDesk has been the most common legitimate desktop software used to establish an interactive command and control channel, with ConnectWise seen slightly less frequently.
Operates as a file grabber
the UPX packed sample
which unpacks
brute forcing post-infection to automate local and global spreading attempts.
brute forcing
multiple levels of encoded commands,
The multiple levels of Base64 encoding
use of three base64 encoded echo commands
encoded payload
downloading itself from malicious servers
attacker began adding the lwp-download command as a failover for wget and curl to enable downloading commands
download, and configure
process of downloading and setting persistence of some other file.
downloading a specific payload
decoded into a new script
The payload contains two additional base64 encoded scripts
operators attempted to use cached credentials from local accounts to gain initial access to additional systems within an internal network.
exploits known vulnerabilities in internet-facing applications
MiniDump, “a C# implementation of mimikatz/pypykatz minidump functionality to get credentials from LSASS dumps”
Usernames
and hostnames collected
It is used to connect to systems in the same network via SMB, to write a batch file to disk
to push batch files over SMB to other systems within an internal network.
write a batch file to disk that executes the Fantasy wiper, and then run that batch file via PsExec with this command line string
writing the batch file to disk and executing.
The batch file
The batch file
a batch file
creates another batch file, system.bat,
writes another batch file
the batch file in Figure 7, which Sandals creates on remote systems to launch
both use batch files that run via the Windows command shell.
ease of batch file execution.
write the batch file on the remote system.
it writes a batch file
lists the command line arguments accepted
deletes all files written to disk in the current working directory
then deletes the file.
deletes the directory with the files causing the errors
recursively deletes all files
the file deletion functions
File deletion functions
File deletion functions
then deletes the files.
the decoded command line parameter
The base64 string
base64-encoded argument
a base64 encoded argument
It collects a list of fixed drives but excludes the drive where the %WINDOWS% directory exists.
Then it enters a for loop iterating over the drive list to build a recursive directory listing
shows that the directory listing function
Directory listing functions
, the GetSubDirectoryFileListRecursive function
Recursive directory listing functions
and then self-deletes.
bat deletes itself
attempts to clear file system cache memory, and self-deletes
that deletes the Fantasy wiper from disk and then deletes itself.
creates a batch file in %WINDOWS%\Temp called registry.bat.
deletes the following registry keys:\nHKCR\.EXE\nHKCR\.dll\nHKCR\*
Then it runs the following to attempt to clear file system cache memory:\n%windir%\system32\rundll32.exe
GetSubDirectoryFileListRecursive function
uses the LookupPrivilegeValue and AdjustTokenPrivilege APIs
operators attempted to capture cached credentials and then use them for lateral movement.
The actors used built-in Windows user account DefaultAccount.
and the built-in Windows user account  [T1078.001] to move laterally
HTTPS activity from IP address  to the organization’s VMware server.
Following HTTPS activity,
outgoing HTTPS port 443 connections to  and  (the prior domain in reverse).
encoded payload
to download next stage and execute it"
The actors downloaded malware and multiple tools to the network, including PsExec, Mimikatz, and Ngrok.
The exclusion rule allowlisted the entire , enabling threat actors to download tools to the  without virus scans.
that added an exclusion rule to Windows Defender
the actors manually disabled Windows Defender via the Graphical User Interface (GUI)
The actors added an exclusion rule to Windows Defender.
The tool allowlisted the entire c:\drive, enabling the actors to bypass virus scans for tools they downloaded to the c:\drive.
The actors manually disabled Windows Defender via the GUI.
The threat actors also moved laterally to the domain controller, compromised credentials,
the actors gained access to a VMware service account with administrator and system level access
In February 2022, the threat actors exploited Log4Shell [T1190] for initial access
The actors exploited Log4Shell for initial access to the organization’s VMware Horizon server.
The exploit payload created a Scheduled Task
The Scheduled Task was named  to masquerade as a legitimate Windows task.
The actors’ exploit payload created Scheduled Task RuntimeBrokerService.exe, which executed RuntimeBroker.exe daily as SYSTEM.
the actors used RDP
the actors leveraged RDP to propagate to several hosts within the network.
The actors were able to proxy [T1090] RDP sessions,
The actors used RDP to move laterally to multiple hosts on the network.
used Ngrok to proxy RDP connections and to perform command and control.
a reverse proxy tool for proxying an internal service
Mimikatz – a credential theft tool.
The threat actors then executed Mimikatz on VDI-KMS to harvest credentials
Additionally, the threat actor was observed attempting to dump the Local Security Authority Subsystem Service (LSASS) process
The actors used Mimikatz
The actors were observed trying to dump LSASS process.
The actors used Mimikatz to harvest credentials.
The actors were able to proxy
The actors used Ngrok to proxy
The actors removed malicious file mde.ps1 from the dis.
When executed, mde.ps1 downloaded  from  and removed  from the disk
send phishing emails with malicious HTML attachments to all addresses in the victim’s mailbox.
sending additional phishing emails to the victim’s contacts
phishing email
starts with an income tax-themed phishing email written in Spanish, disguising itself as a tax receipt notification
disseminate additional phishing emails to the victim’s contacts.
send phishing emails with malicious HTML attachments to all addresses in the victim’s mailbox.
constructs an email with a hardcoded subject and body and attaches the HTML file from the “fb” folder.
collect the victim’s login credentials for various online accounts
login credentials
targets victim’s login credentials
credentials
attempt to compromise the victim’s login credentials for webmail services
keystrokes
keylogging,
logs keystrokes
logging keystrokes via polling and application hooks
logging keystrokes
operating system information
system information,
performs surveillance on the victim’s machine by collecting system information such as hostnames, IPv4 address, operating system version, disk volume information, disk size and anti-virus software information, and gets the system’s default language.
using multiple hosts, including an Amazon Web Services (AWS) Elastic Compute Cloud (EC2) instance, accessed through its public URL, to host the malicious files.
requests a data stream from the C2 server through the URL
hosted the PowerShell downloader script
hosted the ZIP file containing the payloads
downloads a RAR file.
downloads the PowerShell downloader script from an attacker-controlled server
download a ZIP file
downloading
download the payloads
downloads a malicious ZIP file
drops the DLL
download the PowerShell downloader script from the attacker-controlled server
download and run the Horabot “au” using the URL
downloading files from a URL
downloads the contents of an HTML file stored in an attacker-controlled server
a virtual private server (VPS) behind which the attacker has parked the actual command and control (C2) server
domain name also resembled the legitimate Mexican Tax Agency domain, a tactic the attacker likely adopted to disguise malicious traffic.
is a legitimate AutoIt interpreter.
uses PowerShell downloader
leads to payload delivery through the execution of a PowerShell downloader script
RAR file contains a batch file with a CMD extension
executes it through the PowerShell commands.
downloading and executing two other PowerShell scripts from a different attacker-controlled server.
PowerShell downloader script, which the attacker attempts to execute to re-infect the victim’s machine,
batch file downloads the PowerShell downloaderThe
a malicious batch file with a .cmd extension is downloaded to the user’s machine.
executes an embedded PowerShell command to download the next-stage PowerShell script from the server and execute it on the victim’s machine.
creates two other malicious batch scripts with the extension .cmd in the folder “/Users/Public.”
executes one of the dropped batch files
executes an embedded PowerShell command
executes another dropped batch file,
executes a PowerShell command
contains the payload DLLs and a few legitimate executables and DLLs
DLL sideloadingThis
sideloading to legitimate executables
run the payloads by sideloading them to the legitimate executables
sideload a malicious DLL
sideload the DLL
sideloads the DLL to the AutoIt interpreter process
enticing users to open the attached malicious HTML file
lures them to click an embedded malicious hyperlink which
executed when the victim opens the contents of the file
user opens the CMD file,
an embedded URL is launched in the victim’s browser,
has an embedded malicious URL
redirecting to another malicious HTML file from an attacker-controlled AWS EC2 instance.
configured to run the payloads in the startup folder of the victim’s machine
creates two Windows shortcut files in the Windows startup folder using the Internet Explorer application icon and the target paths pointing to the two dropped batch scripts.
creates three more Windows shortcut files in the victim’s machine startup folder,
files dropped in the Windows startup folder are run
launches several processes
heavily obfuscated with random symbols that substitute the instructions during the run-time and base64-encoded strings.
uses alphanumeric characters and the special character “_” to generate a random name and creates a folder with the random name in the root directory of the victim’s machine.
executes the compiled AutoIt script
evade detection
encodes the email addresses in the “.Outlook” file to a data stream
decodes the base64-encoded strings and initializes them
decrypts the encrypted
decrypt
decryption function decrypts the URL pointing to the attacker-controlled server
the malicious ZIP file is deleted.
deleting the “fb” folder to cover its paths and avoid detection
writes the path of the executable file, “_upyqta2_Ji7.exe”, to the class’s registry key “HKEY_CURRENT_USER\software\Classes\ms-settings\shell\open\command”
screenshot capturing
capturing screenshots,
capturing screenshots
anti-virus software information
Checks for the existence of the anti-virus products such as AVG and Avast by checking for the DLLs avghookx.dll, avghooka.dll and snxhk.dll
exfiltrated to the attacker-controlled server through an HTTP POST request to the URL
exfiltrates the email address to the C2 server using an HTTP POST request
exfiltrate contacts’ email addresses
encoded email addresses are exfiltrated
checking if a file on the victim’s filesystem exists and gets the file’s attributes, collecting size and version information,
looks for the Outlook data files from the victim profile’s Outlook application data folder.
enumerates all folders and emails in the victim’s Outlook data file
collect login data from the Google Chrome user profile folders
extracts email addresses from the emails’ sender, recipients, CC and BCC fields.
creating SQL queries to produce the database tables to store the stolen data
added to the email address collection array.
writes the extracted email addresses from the array to a file called “.Outlook” created by the script in the roaming user profile’s Microsoft application data folder.
Checks the registry keys to detect virtual environments such as VMWare, Virtual Box, Wine, Microsoft Hyper-V or Windows Virtual PC.
the adversary used impacket to execute Windows Management Instrumentation (WMI) to achieve command execution on other systems present in the environment.
examples of the command line syntax used for the performance of this activity
adversary using Windows Batch files
cmd /c
cmd /c
performed via the following command-line syntax
the command-line syntax used
command-line syntax was observed being used
the Windows Command Processor was used
attacker also used the "proxychains" utility, which is often employed to redirect network traffic
use of utilities such as proxychains
adversary leveraging a Windows Service to execute PowerShell to stay persistent in the environment.
The Windows service was configured with the following options:Service Type: user mode service Service Start Type
the PowerShell being executed was Base64 encoded
The decoded PowerShell instructions
decrypting,
Disabling PowerShell logging
Disabling this security control
to disable remote administration restrictions to facilitate lateral movement and privilege escalation activities
attacker disabling Windows Defender
Downloading, decrypting, and executing a backdoor payload from an attacker-controlled server
the attacker leveraging Windows Remote Desktop Connections to pivot to additional systems in the environment.
attacker also attempted to execute PowerShell scripts on remote systems in the environment while moving system-to-system
adversaries copied and executed the aforementioned PowerShell script on multiple systems across the environment
Comsvcs.dll is a well-known way to extract LSASS (Local Security Authority Subsystem Service) data
invoking comsvcs.dll with rundll32.exe, an adversary can create a dump of any process
utilizing comsvcs.dll
invoking comsvcs.dll with rundll32.exe,
adversary was also observed remotely modifying the Windows Registry on remote systems
by modifying the Windows Registry on compromised systems.
the adversary attempting to exfiltrate sensitive information over SMB (TCP/445) directly from a compromised domain controller.
threat actor is actively exploiting the so-called PrintNightmare vulnerability (CVE-2021-1675 / CVE-2021-34527) in Windows' print spooler service to spread laterally across a victim's network
screen capture
keylogging
Microsoft SharePoint vulnerability CVE-2019-0604 was used to deliver\nweb shells
exploited the Microsoft SharePoint vulnerability\nCVE-2019-0604 to install web shells
running native Windows commands on compromised servers,
The operators made a consistent effort to\ndelete these tools and remove any residual forensic artifacts from\ncompromised systems.
consistently cleaned up evidence of their intrusion after\ngaining access to a system
moved laterally and\ndeployed their signature malware
used this\naccess to deploy and remotely execute FOCUSFJORD on their primary target.
The operators deleted tools used for credential harvesting and\ninternal reconnaissance
to delete any remaining FOCUSFJORD\nforensic evidence, including files on disk, configuration data\nencrypted in the registry, and related services and registry keys\nused for persistence.
writes its encrypted C2\nconfiguration into the system’s registry
writes its configuration to registry,\nthis value is set to “default” and is later manually changed by the\nactor
the\noperators were able to access their primary target via RDP connections
operators were able to access their primary target via RDP connections\nfrom a trusted third party using stolen credentials
configured to proxy C2 traffic
configured to proxy C2 traffic
used other victim networks to proxy their C2\ninstructions, likely to minimize the risk of detection and blend in\nwith normal network traffic.
acting as proxies to relay\ncommunications to their C2 servers.
usually to the victim’s domain name
to read\nand decrypt those registry key values for proper execution.
the malware needs to read\nand decrypt those registry key values
to obfuscate the source of the\nactivity.
a tool called “anti.exe”\nto stop Windows Update service and terminate EDR and Antivirus\nrelated services.
leverages spear-phishing and tries to trick the victims into opening malicious documents
They used multiple malicious PDFs and MS Office documents during the campaign.
they use tools such as Mimikatz to dump credentials.
and remote monitoring software such as ScreenConnect, Remote Utilities, and eHorus.
they added a new tool for remote access, Syncro, to their arsenal.
It disguises itself as a legitimate Google Update executable.
It collects the victim’s username
computer name
and IP address
Domain fronting is another method for concealing communication between the endpoint and the command and control servers.
purpose of domain fronting is to connect to a restricted host while pretending to communicate with an allowed host
masks your traffic to a certain website by masquerading it as a different domain.
Domain fronting was mostly used by web services to bypass censorship in several countries that restricted traffic
attackers have started using this technique to hide their malicious infrastructure behind legitimate domains
domain fronting possible by allowing the operators to configure related settings via the malleable C2 profiles
Setup the CDN service to create a new CDN endpoint and redirect traffic to your domain.
Identify a domain that uses the same CDN to ensure that the traffic will be forwarded to the correct resource.
Setup a profile to facilitate domain fronting
the legitimate website will forward the traffic through the CDN to the original destination according to the host header.
domain fronting
domain fronting
domain fronting
domain fronting
malleable C2 profiles are configured to allow domain fronting using the Fastly and AzureEdge CDNs
domain fronting
domain fronting
domain fronting
domain fronting appears to be used by threat actors.
Attackers can use legitimate domains that are registered under the same CDN provider.
HTTP/HTTPS C2 traffic
HTTP communication between the Beacon and the Cobalt Strike server
other compromised host running the parent HTTP Beacon
HTTP Parent Beacon
customized for the HTTP-POST Block
Encrypting and encoding the data with XOR mask and random key
threat actors use their beacon sessions to establish RDP access
attackers was to establish a Remote Desktop session
to establishing a RDP session, including the ability to navigate using a graphical environment and easily move laterally once the necessary access has been granted
attacker’s Kali Linux host to RDP into our target’s environment
RDP into the target host
Cobalt Strike beacon acts as the intermediary to facilitate the Remote Desktop session
SMB beacons open a local port on the target host and listen for incoming communication from a parent beacon
SMB beacons are mostly used to make network detection harder and to get access to isolated systems where communication to the internet is prohibited
the SMB Beacon is communicating over the network with a parent Beacon using named pipes.
can see the named pipe created that we specified on the Cobalt Strike interface when we created the SMB listener.
RDP into the target host using reverse proxy
threat actors using reverse proxy
a reverse proxy
Reverse Proxy using Cobalt Strike Beacon
the ability to run a SOCKS proxy server on the team server.
This enables the operators to setup a listening port and leverage it to relay traffic to and from the open beacon session
attackers take advantage of this technique using proxychains
employ proxychains from the attacker’s Kali Linux host
via reverse proxy.
can be configured as a proxy
threat actors use their beacon sessions to establish RDP access through a reverse proxy
the victim’s hostname is captured in this logon event
execute the command systeminfo on the compromised host.
it took 148 packets containing DNS requests and responses to finish the task and send back the data to the Cobalt Strike Server.
which will then send the results to the C2 server
SSL can be used to complicate command-and-control (C2) traffic analysis
replacing an early call instruction to their malicious code, or by overwriting the entry point in the PE header
unpack any additional payloads,
HTTPS and other protocols built on SSL have
service using HTTPS
SSL encrypted traffic
TLS encrypted data
detect when TLS connections are being initiated and log the symmetric keys generated for the SSL/TLS connection
decrypt TLS traffic,
decrypt network traffic
decrypted
the decrypted HTTPS traffic.
encrypt
SSL encrypted traffic
TLS encrypted data
downloads the next stage from a public file storage service
embeds the next stages of the execution inside an additional file, usually an XML or a PDF file.
that embeds the Crypter with the payload.
the actor embeds the malicious code inside different legitimate codes.
which enables an HTTPS connection.
Once downloaded and executed, the malicious installer copies its compressed files into a newly created folder with a legitimate-looking name  (i.e., IIS Application Health Monitor) in one of the following directory paths:
At first glance, the files within the directory may seem legitimate
Write a registry Run key
Write a.lnk file in the startup folder
registry run key persistence implementation
The Decryption Shellcode
The Decryption shellcode has three main tasks: first, it extracts the Loader shellcode and the payload, then it decrypts them, and finally, it transfers the execution to the decrypted Loader shellcode.
Decryption shellcode execution flow
The Decryption shellcode
decrypts it using the denoted decryption key
the decrypted payload
the decrypted payload
the decrypted payload address
An encrypted additional shellcode
An encrypted payload
these are encrypted and split inside the XML.
the user will be encouraged to download a malicious installer
deceive the user into thinking that the application has failed to execute, even as it silently continues the malicious execution in the background.
shellcode is to inject the decrypted payload within the currently running process (itself).
the Loader overwrites the current PE with the final payload’s PE
It does so by copying the PE headers and each section according to the current executable’s base address.
the Loader copies the new PE headers to the base address and each section to the relevant location according to the IMAGE_SECTION_HEADER
the import address table and relocation table of the newly injected PE.
the newly injected PE
Loader removes evidence of injection by using the following methods:\nUpdate the LDR data table entry to match the injected PE.\nRemove the injected PE headers from memory.
disable system defenses
The process list checked is as follows
The services running on the compromised system are checked against the following list
The credentials also allow BlackCat to move laterally within the victim’s system and/or network, often with administrative privileges.
the ransomware to deploy additional tools
such as Mimikatz
utilizes a unique onion domain
Encrypted Multi-Hop Proxies
cyber actors use the VPS as well as small office and home office (SOHO) devices as operational nodes to evade detection.
have been routinely observed using a VPS as an encrypted proxy.
Some of these nodes operate as part of an encrypted proxy service to prevent attribution by concealing their country of origin and TTPs
cyber actors have been observed using a network of VPSs and small office and home office (SOHO) routers as part of their operational infrastructure to evade detection and host C2 activity
to locate certain files, paths,
cyber actors have been observed using multiple implants with file system enumeration and traversal capabilities.
IP address space
cyber actors have exploited known vulnerabilities in Internet-facing systems
exploit targeting a public-facing appliance vulnerability.
Exploiting Internet accessible webservers using webshell small code injections against multiple code languages, including net, asp, apsx, php, japx, and cfm.
These emails may contain a malicious link or files that will provide the cyber actor access to the victim’s device
These emails may contain a malicious link or file that provide the cyber actor access to the victim’s device
after the user clicks on the malicious link or opens the attachment.
the user clicks on the malicious link or opens the attachment.
gaining credential access into victim networks by using legitimate, but compromised credentials to access OWA servers, corporate login portals, and victim networks.
cyber actors used valid accounts to log into a service specifically designed to accept remote connections,
The actor may then perform actions as the logged-on user.
cyber actors used valid accounts to log into a service specifically designed to accept remote connections,
The actor may then perform actions as the logged-on user.
Using cmd.exe,
Windows Command Shell
or command line interface tools
executing malware shellcode and batch files
Employing Python scripts to exploit vulnerable servers.
cyber actors used valid accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, RDP, and Virtual Network Computing (VNC).
cyber actors used valid accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, RDP, and Virtual Network Computing (VNC).
such as schtask or crontab to create and schedule tasks that enumerate victim devices and networks.
to establish new services to enable persistence.
cyber actors have also been observed modifying group policies for password exploitation.
usage of Mimikatz
observed targeting the LSASS process or Active directory (NDST.DIT) for credential dumping.
Injecting into the rundll32.exe process to hide usage of Mimikatz, as well as injecting into a running legitimate explorer.exe process for lateral movement.
Using shellcode that injects implants into newly created instances of the Service Host process (svchost)
were observed using the 7-Zip utility to unzip imported tools and malware files onto the victim device.
cyber actors have been observed deleting files using rm or del commands.
cyber actors were observed Base64 encoding files and command strings to evade security measures.
have been observed using Base-64 encoded commands
were observed using Microsoft signed binaries, such as Rundll32, as a proxy to execute malicious payloads.
have been observed using commands, including tasklist, jobs, ps, or taskmgr, to reveal the running processes on victim devices.
cyber actors also used on-premises Identity and Access Management (IdAM) and federation services in hybrid cloud environments in order to pivot to cloud resources.
cyber actors also used on-premises Identity and Access Management (IdAM) and federation services in hybrid cloud environments in order to pivot to cloud resources.
cyber actors used RDP
cyber actors have been observed using the mv command to export files into a location
a downloader that downloads and executes a payload
cyber actors have been observed importing tools from GitHub or infected domains to victim networks
cyber actors used the Server Message Block (SMB) protocol to import tools into victim networks.
it also tries to delete the wp-sale.js file
obfuscated PHP code (again using character code obfuscation):
a heavily obfuscated script
obfuscated JavaScript code
When decoded
When decoded, a backdoor is revealed
sent as a POST request
This backdoor executes arbitrary PHP code sent in POST request parameters.
actors disable antivirus software
the threat actor deactivated antivirus protocols
after receiving phishing emails containing malicious PDF documents [T
for initial access is RDP compromise.
actors often use RDP to move laterally across the network
download multiple tools 
actors gain initial access through exploiting public-facing applications 
PsExec has also been used to aid lateral movement
actors used a legitimate admin account to remotely log on to the domain controller
by modifying Group Policy Objects
force a group policy update
delete files upon completion—including
numerous batch (.bat) files on impacted systems
Batch files create a new admin user 
which are typically transferred as an encrypted 7zip file.
These strings are passed to a decoding function where they are converted from hex to byte and XOR’d with decimal 18.
the decoded strings
Once decoded
Base64 decodes the payload content
to decode the second buffer using key 58 3E 88 D0
decoded by Shellcode
These strings are passed to a\nde-obfuscation function
PowerShell de-obfuscation routine
this shellcode is responsible for fetching Remcos RAT
used to retrieve a payload package containing the second stage PowerShell and two shellcode buffers
retrieves a decoy tax document and VBS script.
copying the current process command line as a new argument
full command line argument
a single payload\npackage is retrieved that contains both the two-stage shellcode
highly obfuscated commands and encrypted shellcode.
The PowerShell command contains various obfuscated strings
inject Remcos RAT into a legitimate Windows process such as ieinstal.exe.
injecting it into ieinstall.exe
execution begins with the user clicking on a shortcut file
executed by the user clicking a shortcut file
enticing users to click on malicious shortcut files
checks if the system is 64-bit
remote access and surveillance features
keylogging
screenshots
highly obfuscated and contains junk code to impede analysis.
The script concatenates hundreds of smaller strings into a single variable which ultimately builds and executes
The payload would then be decrypted through XOR
use a set of tools via remote desktop
the ransomware drops a batch file
to steal system information like machine details
the payload most likely arrives by exploiting public-facing websites and domains.
targeted vulnerabilities in Microsoft SQL (MS SQL) Server for initial access
the payload downloaded by the PowerShell script was a .NET downloader, which would subsequently retrieve an encrypted payload from the command-and-control (C&C) server
used different sets of defense evasion and reconnaissance tools such as GMER and Advance Process Termination to manually uninstall antivirus products on the target system.
to terminate security-related processes and services by dropping KILLAV
the threat actors who perform brute-force attacks on MS SQL Servers.
executed a spam campaign with malicious OneNote file attachments,
The initial attack phase involves infiltrating Internet-facing Microsoft Exchange servers
The malware implemented a series of Mimikatz modifications on closed-source tooling
staging a credential theft capability in the LSASS process itself by abusing native Windows capabilities
In order to steal credentials, the attackers employ custom modified versions of Mimikatz
stealing credentials from the Local Security Authority Subsystem Service (LSASS) process.
Mimikatz publicly available code (top); strings from a Mimikatz modification
This call instructs LSASS to load and execute pc.dll, which then stages the getHashFlsa64.dll credential theft component.
accesses the memory of its host LSASS process and stores stolen credentials in a Mimikatz log file
of a Security Package into LSASS using RPC calls.
steals credentials from LSASS
The threat actors used C:\MS_DATA as their main working directory for storing malware and staging data for exfiltration
and Remote Desktop user sessions.
"cmd"  /c
cmd"  /c
cmd"  /c
cmd"  /c
"cmd"  /c
"cmd"  /c
"cmd"  /c
"cmd"  /c
"cmd"  /c
"cmd"  /c
"cmd"  /c
"cmd"  /c
"cmd"  /c
They also retrieve networking information, like network adapters, specific machines, and network services like  Remote Desktop Protocol (RDP).
For lateral movement, the attackers made use of the PsExec tool and the net use command for accessing shared resources on remote machines.
and the PsExec Windows Sysinternals tool and net for lateral movement and exploration
loads and executes the decrypted
pc.exe decrypts AddSecurityPackage64.dll and pc.dll using the AES encryption algorithm
pc.dll decrypts,
Disabling Windows event logging in an attempt to evade detection
In an attempt to remain undetected, AddSecurityPackage64.dll disables Windows event logging by killing threads of the Windows Event Log service without stopping the execution of the service itself
Injecting pc.dll into LSASS as a Security Package
to execute malicious code in the context of LSASS.
enumerating the processes’ threads,
tasklist
informationAddSecurityPackage64.dll injects pc.dll into LSASS by deploying pc.dll as a Security Package
embedded JavaScript Observed Notation (JSON)-based configuration to set parameters
text-encoded in base64
brute-force attacks
brute-forcing and compromising servers
Valid credentials
uploaded to the command-and-control (C&C) server,
usually at port 5028/TCP
use several highly obfuscated and underdevelopment custom loaders
malicious RAR archive
exploits CVE-2015-2291, an Intel driver vulnerability, to load a malicious driver designed to reduce the token integrity of Microsoft Defender.
deploying a malicious kernel mode driver (“bring your own vulnerable driver” or BYOVD method) via exploiting a vulnerable Intel driver
install an information stealer.
stealer,
keylogger with logging capabilities using the Telegram API
distributed to victims via phishing attempts
embedded binary files
archive contains the files,
deobfuscate, decompress,
decrypts strings
deobfuscation, and decompression
decompressing
decompresses it using the GZipStream API,
masquerades as a legitimate word document
legitimize the package in the eyes of the victim
designed to lure unsuspecting victims into executing the loader.
is executed by the victim
utilizes Telegram for delivering payloads
download
used to send program execution DEBUG and Telegram to deliver payloads and send commands.
downloads the next part
utilizes Telegram for delivering payloads, sending commands, and receiving the payload heartbeat.
send commands.
sends a request to the attacker-controlled Telegram channel
sends the message "bot getted" to the debug server.
accepts commands from a Telegram channel,
message to both the Debug server and the Telegram channel,
sends a GET request to  https://api[.]telegram[.]org/bot{token}/getUpdates to retrieve the command
API hashing
resolves hashed Windows APIs
conceal the utilization of potentially suspicious APIs (functions) from static detection
replacing the human-readable names of functions (such as "CreateMutexW") with a hash value,
used in the code to call the corresponding API function
employs dynamic API resolving to conceal its API imports
storing the names or hashes of the APIs needed, then importing them dynamically at runtime.
passes two arguments to the "mw_resolveAPI" function.
resolves the given API hash and retrieves the address of an exported function
creating a hash for each export function name
string encryption,
irrelevant code
LoadLibrary and GetProcAddress functions
Compressapi
GetTokenInformation API.
retrieves the MachineGuid of the infected system from the SOFTWARE\Microsoft\Cryptography\MachineGuid registry key
retrieves the MachineGuid of the infected system from the "SOFTWARE\Microsoft\Cryptography\MachineGuid" registry key.
deletes the HKCU\SOFTWARE\Intel registry key and recreates it
collects information about the .NET Framework Setup
elevate its privileges by executing the mw_UAC_bypass function
Calling Local Windows RPC Servers from .NET
bypass user account control (UAC) using only two remote procedure call (RPC) requests
executes an export function called "Entry" from UpdateTask.dll via rundll32.exe
payload through rundll32.exe
disable Microsoft Defender
patch the integrity level of the Microsoft defender (MsMpEng.exe) and forcibly reduce it from system to untrusted integrity.
determine if it is running as an account with administrator privileges or simply as a regular user
creating scheduled tasks
sets up its working directory
collect system information and steals user information
tokens, and passwords from various web browsers and applications
captures screenshots
compressed and exfiltrated to the attacker via Telegram
some strings, such as web browser paths and Geolocation API services URLs, are encrypted with the AES algorithm in cipher-block chaining (CBC) mode
gathers basic system information,
for the infected system by gathering the username and hostname
the malware then proceeds to gather basic system information, including username, computer name, and OS version,
System info, including both hardware and OS info.
Collection of information about the system in HTML format
and hostname
gathers basic system information, which it then sends to the C2,
send a list of process names and IDs back to the C2
the system information gathered by Domino Backdoor and sent to the C2
in return receives an AES encrypted payload.
uses a custom algorithm which XOR’s multiple values together.
which is stored immediately before the encrypted config block.
The malware generates a random 32-byte key, which it encrypts using the RSA key.
loading an encrypted payload from its resources
The Microsoft WinCrypt library is used for AES encryption and
the encrypted config.
be based on an encryption algorithm used previously in
by gathering the username and
to gather basic system information, including username,
is generated from the system username
used a similar XOR-based algorithm as part of its encryption mechanisms during communication with the C2.
then proceeds to gather basic system information, including username, computer name, and OS version, which it then encrypts using AES-256-CBC and the generated,
then sends the AES-encrypted system data.
This data is then encrypted using AES and returned to the C2.
the decrypted config contains two pipe-delimited IP addresses
and decrypts them using XOR and the key
The malware then proceeds to decrypt its configuration block,
The config is decrypted using XOR and a 16-byte key
A second config block, which is decrypted separately
The decrypted data consists of a 4 byte size
The malware then decrypts the received payload using AES and the shared key.
which decrypts to the following 5 bytes
decrypting it using AES-256-CBC and a hardcoded key.
The decrypted data consists of 4 bytes containing the payload size,
The Microsoft WinCrypt library is used for AES encryption and decryption by both
is decrypted using XOR and a 16-byte key
executes the decrypted shellcode
loads the resources using the API calls LdrFindResource_U and LdrAccessResource
and execute the file using CreateProcessA.
utilising similar API calls,
the malware enumerates the running processes on the system and compiles a list of process names and IDs.
enumerate running processes and send a list of process names and IDs back to the C2
Enumerates running processes
the loader allocates memory within the current process and then loads the PE payload into it using the full PE loading procedure.
It copies the headers, maps the individual PE sections,  processes any relocations,  loads the PE’s imports, and then executes the PE from its internally specified entry point.
passes the PE payload to it, which the shellcode then loads and executes.
Enumerate files on desktop
Enumerates files under Steam application directory
looping through entries under registry key
waits for data collection tasks to complete,
creating a hash of the collected data, to which it then appends its current process id.
uploads data to the C2 via a HTTP POST request
http/https data transfer
Self-delete after sending data
It then attempts to connect to the C2 via TCP port 443
ranswomare for Windows can self-propagate in the local area network using the legitimate PsExec utility (contained in its body), which creates a temporary system service.
Legitimate accounts obtained by the attackers can be used to ensure persistence in the compromised infrastructure.
may use stolen legitimate accounts specified in the configuration data.
uses the command shell to run appropriate commands
an additional BAT file contained in the body of the ransomware.
The attackers may use wmic to obtain information and run various commands,
They may also use the wmiexec module from Impacket to execute commands and move across the network.
uses wmic to obtain the
ransomware uses Native API.
the function CreateProcessWithLogonW.
affiliates may exploit group policies, which results in a scheduled task being created (on each host) that launches the ransomware.
disabling security tools
To prevent being detected, the attackers end processes and services related to security and antivirus software.
To bypass UAC, BlackCat ransomware may escalate privileges using the ICMLuaUtil COM interface, as well as use the Masquerade PEB method.
Bypass User Account Control;The attackers may bypass UAC using the ICMLuaUtil COM interface, as well as use the Masquerade PEB method.
decrypts configuration data as well as decrypts and unpacks the legitimate PsExec utility
unpacks the legitimate PsExec utility
ransomware uses obfuscation.
use a SoftPerfect Network Scanner executable renamed to svchost.exe.
uses PsExec to modify the system registry parameter MaxMpxCt
To obtain authentication data, the attackers may dump the LSASS process using legitimate tools (procdump, comsvcs.dll).
To obtain authentication data from the registry and files, the attackers may use NirSoft utilities.
The attackers enumerate drives, directories, and files
to search for sensitive information for exfiltration purposes.
The attackers collect information from the local system for exfiltration purposes.
The attackers may use RDP to move across the network.
uses wmic to obtain the UUID of the compromised host.
enumerates all running processes
;Moving across the victim’s network and deploying ransomware involves copying related tools to the host.
can self-propagate in the network by using the legitimate PsExec utility
to search for ones relating to security
enumerates system services to search for ones relating to security
Before exfiltration, the attackers may put collected data in 7Zip archives.
Remote access tools used by the attackers may use application layer protocols (HTTP, HTTPS,
When the attackers use Cobalt Strike, the collected information may be sent via Cobalt Strike server communication channels.
To remotely access the compromised infrastructure, the attackers may use the legitimate tools TeamViewer and ScreenConnect.
To remotely access the compromised infrastructure, the attackers may use Cobalt Strike, TeamViewer and ScreenConnect
which perform asymmetric/symmetric encryption of the C&C server communication channel.
the attackers copy tools necessary for deployment to the compromised host.
the malware executes a command to delete itself from the system
delete key files
attackers have been seen using several methods to distribute the wiper through the domain, like: domain Group Policy Object (GPO)
installs the payload as a service
sets a hardcoded list of system directories
system directories are targeted
enumerates their partitions.
an obfuscated .NET program.
WMI
to identify where the Operative System is stored in the disk
Application-level protocol
sends the output of ipconfig in a POST request
the opening of a URL file extracted from the archive.
output of ipconfig was sent to one of two addresses
Application-level protocol
a GET request is sent to the C2 server.
application-level messages from the server to the client is sent as the body of an HTTP response
are sent using separate POST requests.
sends an HTTPS request
same IP address was used as C2 server
domains give attackers the ability to mask malicious traffic as legitimate activity within the company
HttpConnector and HttpBindConnector are HTTP client with support for proxy and HTTP server.
HTTP and HTTPS are supported
HTTP with long polling
connect by sending a GET request to a URL from the configuration and provide a special cookie value
sends GET requests with pull operations.
POST request with push operation
Application-level protocol
use HTTP/HTTPS for C2 connections
An encrypted resume
archive
archive contains a bait PDF document
XOR encrypted with a 16-byte key
obfuscated with VMProtect
additional XOR encryption with the key
AES-128-CBC for encryption.
hashed with MD5
use AES-128 in CFB mode as the encryption algorithm
encrypted with the algorithm
a RAR archive
distributed in a RAR archive
ROR-13 hash
re-encrypted and saved in the same location
encrypted header
encrypted Base64 string containing the session GUID
compressed with GZip prior to encryption
are obfuscated with VMProtect
obfuscated
obfuscated code
is encrypted in the file
is re-encrypted
has been obfuscated with the same rel_jmp and fake-jb techniques
SFX archive
SFX archive
RAR and SFX-RAR files
plus the folder
malicious archive,
located in the data sections
shellcode is located in a PE file overlay.
(encrypted) shellcode
consists of two .exe files.
contains three identical executable files
contains just one file:
which is also embedded inside the CHM file
three sections are extracted
malicious shortcuts
Web lnks with two shortcuts:
copies the payload to the folder C:\Users\Public\Downloads
PDF documents with a CV and IELTS certificate
the folder C:\Users\Public
copied to the folder %appdata%\Microsoft\AddIns\
into the folder c:\programdata
folder c:\programdata
trying to open either of the shortcuts
If the user opens it directly
tries to make users run malicious .lnk, .chm, and .exe files
running a command that extracts a Base64-encoded CAB archive from the body of the LNK file,
archive is unpacked to a temporary folder.
an extracted JS script
extract shellcode
decrypts the string
used for decryption:
is unpacked
unpacks
encrypted portion of the data is decrypted
is decrypted
decryption and decompression
decryption
decodes it into shellcode with Base64
decrypt
uses a custom PL format with encryption
adding itself to the startup folder
writes the file svchost.bat, which transfers control to winness.exe, to the startup folder
persists by means of a registry run key or a startup folder
adding a scheduler task,
creates a task with schtasks for persistence
that all three intermediate C2 servers
possible proxy servers (any indicated in the configuration plus system proxies) and C2 servers
domains give attackers the ability to mask malicious traffic as legitimate activity within the company
proxy server
proxy
– proxy server address and credentials
proxy server
collects and sends system information
OS uptime
Operating system version and whether it is 32-bit or 64-bit
Computer name\nName of running module\nPID
Shellcode version and whether it is 32-bit or 64-bit
Whether the OS is 32-bit or 64-bit
Computer name
collect information about the computer name and OS version and whether it is 32-bit or 64-bit
Network adapter IP addresses\nMAC address of one of the adapters
List of IP addresses
MAC addresses of network adapters
Collects the configuration of active connector instances other than the RPCConnector and RPCBindConnector classes.
collect information about the IP and MAC addresses of the infected machine
Username
Username and workgroup
collect information about the name of the current user
Transport-level protocol
Standard TCP connection
two TCP connections.
Duplication of socket with TLS connection
establishes a TCP connection
messages are exchanged in the original TCP connection (without TLS encryption).
KCP protocol
uses KCP on top of a TCP connection
three ways to connect to the C2 server
Transport protocol 3, port 8443\nTransport protocol 2, port 80\nTransport protocol 1, port 8080
TcpConnector and TcpBindConnector are classes responsible for connecting over TCP as client and server
Transport protocols\nTCP
RPC (Pipe)
Network-level protocol
KCP protocol
KCP protocol
support for multiple transport protocols for connecting to C2 servers
use TCP and UDP for C2 connections
AES-128 is the encryption algorithm used.
encrypted with AES-256-CBC;
is encrypted in the standard way
encrypted in the backdoor's standard way,
data is encrypted in the standard way
uses AES for encrypting traffic in its backdoors
injectors
run it in an active process
running an arbitrary command in a CHM file via an ActiveX object
runs in a new process
is injected in a similar way
injected into
Crosswalk and Metasploit injectors
inject shellcode into the process
SeDebugPrivilege
finds the API functions it needs
Microsoft CryptoAPI
Cryptography API:
via a ZwCreateSection call
via ZwMapViewOfSection calls
execute a method from the .NET assembly
HttpWebRequest and HttpListener from .NET Framework are used for client and server implementations
RPCConnector and RPCBindConnector
TcpBindConnector and HttpBindConnector
TcpConnector/TcpBindConnector
CreateThread
uses various WinAPI functions to run malicious shellcode in the current process or to inject it into another process
finds the PID of the target process
Current processes are checked
Name of running module\nPID
injects shellcode into it
injects shellcode into the processes explorer.exe, winlogon.exe, wmplayer.exe, svchost.exe, and spoolsv.exe
archive was distributed
unpacks an HTML
is unpacked from the CHM file.
SFX archive
unpacks three files
contents are unpacked
SFX archiveWhen unpacked
use VMProtect or custom packers for its malware
can send system information
is the library Funny.dll
dynamically loads the library
that contains the library mapistub.dll,
dynamically loaded from a Base64 constant defined in the main assembly.
conditional jumps that never run are included
obfuscated with junk instructions and inverted conditional jumps (combinations of jle/jg and the like).
the file is deleted
wiping traces of malware from the system
saved in the registry
passes control to a.bat.
cleanup script
uses cmd.exe and .bat files to run commands
sends phishing messages with malicious attachments
persists on infected machines by creating new services
uses legitimate utilities to load DLLs
establish C2 connections via a peer-to-peer network of infected hosts
support C2 connections via an external HTTP/SOCKS proxy
using the API RegisterServiceHandlerA then SetServiceStatus, and finally CreateEventA.
abusing API calls in the Operating System.
The malware also decrypts
the decryption routine
Decryption routine
the AES 256 decryption key of the payload
strings decoded when running
to decrypt the payload from the .dat file using the AES-256-CTR decryption algorithm and starts to execute.
injects the payload in memory.
The malware was injected into a SVCHOST process where a driver location pointed to the config file
injects it into a process.
a process injection in one of the svchost processes
injected themselves into Windows Media Player
injected code in a process
the adversary had removed the payload file from the system.
Where in the beginning of the campaign the adversary was sloppy, during the last months of activity they became more careful and started to remove evidence
Besides the use of Mimikatz to dump credentials,
acquired through the use of Mimikatz, or creating LSASS dumps,
using Mimikatz and dumping lsass,
Using Mimikatz and dumping of lsass,
makes use of the technique “DLL Sideloading”
When the executable is run, the DLL next to it is loaded.
The dll is run using the command “rundll32.exe
The model uses the persistence technique utilizing svchost.exe with service.dll to install a rogue service.
The DLL embeds several obfuscated strings
was to start a program as a service
The DLL is used to create a malicious service
. The name of the created service, “SysmainUpdate”, is usurping the name of the legitimate service “SysMain” which is related to the legitimate DLL sysmain.dll and also to the Superfetch service.
Adversary installed custom backdoor as a service
Adversary launched backdoor and some tools as a Windows Service
the command line dump of the memory:\ncmd /c
When running the file from the command line,
In some cases, batch (.bat) scripts were created
content in a batch script:
the exfiltration of data on the system, such as OS, Processor (architecture),
Username
WMI activity [T1546.003] was also observed to execute commands on the systems.
WMI was used for running commands on remote systems
From a persistence point of view, scheduled tasks
Adversary ran scheduled tasks for persistence of certain malware samples
and the use of valid accounts
they were looking to get valid accounts.
the adversary gained credentials in the network
the files were exfiltrated over the backdoor
the data was stored in a location in the Internet Information Services (IIS) web server and exfiltrated over HTTP using GET requests towards the exact file paths
malware exfiltrated data towards a C2
When the data was gathered on a local system using the backdoor
and the rar files were deleted
exfiltrated over HTTP using GET requests
HTTP traffic to C2
The packet data was customized and sent through a POST request with several headers towards the C2.
The malware started to open up both UDP and TCP ports to connect with a C2 server
the customized packet size using a XOR value.
Adversary exploited a web-facing server with application
the actor established initial access by compromising the victim’s web server
Tools were transferred to a compromised web-facing server
Adversary browsed several locations to search for the data they were after.
used Rotten/Bad Potato to elevate user rights by abusing API calls in the Operating System.
including adding of registry keys
and lateral movement/execution of files
the attackers would launch a lateral movement phase, using default Windows credentials
run a network recognition process to find the IP address of each of the ATMs
using a variety of encryption schemes and symmetric keys.
to install AnyDesk and provide remote access for the “technician” to install the malware.
All captured information from the transaction is saved to an encrypted file placed in a directory previously set by the malware configuration
Those files will later be sent to the malware C2 server
Captured data stored in the uploader C2
sending all cab files generated from the stolen transactions to the server
StartSendScreen, StopSendScreen
StartSendScreen\nStart screen capture\nStopSendScreen\nStop screen capture
Download a file from the remote server
StartDownload, StopDownload.
Shell\nExecute a specified command via CMD
the files are sent through an HTTP POST request.
Add the process to a startup registry key
malicious OneNote documents to entice users to click on an embedded file to download and execute
a fake message to lure users to execute the HTA  file 
Upon clicking the Open button, it drops the HTA file
it prompts the user with a fake message to double-click on open to view the attachment.
The message above the ‘Open’ button instructs the user to “double click” in order to receive the attachment.
The malicious document is delivered in either zip files or ISO images to the target through phishing emails.
the malware author used phishing emails to deliver malicious OneNote document either as attachment
Windows batch script
executes a batch file
the batch file
the malicious batch file
Upon execution of the batch file
launched by cmd.exe
batch file
Embedded Executable Objects In OneNote  
an embedded file gets executed by the user
The FileData member of the FileDataStoreObject is the key member that holds the embedded data in the OneNote document.
Embedded data in Data object
OneNote file contains an embedded HTA  attachment
The OneNote file with the embedded HTA file
contains the “whoami” command
make use of  the curl utility to download Qakbot and then execute it.
The HTA file uses curl utility to download
Curl is used to download the malicious DLL file
The script will then execute the downloaded file
downloads the payload from the Internet and executes on the target system.
Powershell will be invoked and it fetch the Qakbot payload from Internet
use powershell to download the payload
executed by rundll32.exe.
The script will then execute the downloaded file with Rundll32.exe
execute it with rundll32.exe
Obfuscated HTA script
The HTA file contains obfuscated script
The obfuscated registry is then read by MSHTA and the obfuscated code is
with obfuscated content
Deobfuscated HTA content
code is de-obfuscated
Base64 Decoded instructions in dropper
The base64 decoded batch file
then deletes the registry key
creates a registry key in HKEY_CURRENT_USER\SOFTWARE\
A closer look at the document reveals the graphical elements are all images placed in a layered style by the malicious actor.
enumerate files and folders
It then performs SQL queries to retrieve files, file size, folders
Many of the hosts used to support these second-stage operations hosted RDP services
can run commands that will download files
web shell with filenames that masquerade as human.aspx, which is a legitimate component of the MOVEit Transfer software.
several POST requests
large volumes of files have been stolen from victims' MOVEit transfer systems.
The threat actors also moved laterally to the domain controller, compromised credentials
implanted Ngrok reverse proxies
The actors used Ngrok to proxy RDP connections and to perform command and control.
the threat actors exploited Log4Shell [T1190] for initial access [TA0001] to the organization’s unpatched VMware Horizon server
The actors exploited Log4Shell for initial access to the organization’s VMware Horizon server.
added an exclusion rule to Windows Defender
added an exclusion rule to Windows Defender.
The actors added an exclusion rule to Windows Defender.
The tool allowlisted the entire c:\drive, enabling the actors to bypass virus scans for tools
The actors manually disabled Windows Defender via the GUI.
The exclusion rule allowlisted the entire c:\drive, enabling threat actors to download tools to the c:\drive without virus scans.
manually disabled Windows Defender via the Graphical User Interface (GUI)
The Scheduled Task was named RuntimeBrokerService.exe
created a Scheduled Task
The actors’ exploit payload created Scheduled Task
the actors used RDP
RDP sessions
the actors leveraged RDP to propagate to several hosts within the network.
The actors used RDP to move laterally to multiple hosts on the network.
RDP connections
and the built-in Windows user account DefaultAccount [T1078.001] to move laterally
The actors used built-in Windows user account DefaultAccount.
Mimikatz – a credential theft tool.
The threat actors then executed Mimikatz on VDI-KMS to harvest credentials
the threat actor was observed attempting to dump the Local Security Authority Subsystem Service (LSASS) process
trying to dump LSASS process.
The actors used Mimikatz to harvest credentials.
Ngrok – a reverse proxy tool for proxying an internal service out onto an Ngrok domain
The actors were able to proxy [T1090] RDP sessions, which were only observable on the local network
The actors downloaded the following tools
to download next stage and execute it
The exploit payload then downloaded mdeploy.text
The actors downloaded malware and multiple tools to the network
as outgoing HTTPS port 443 connections
The actors removed malicious file mde.ps1 from the dis.
removed mde.ps1 from the disk
$BASE64 encoded payload
recording files to be uploaded when their download is requested by the C2 server.
and uploads it back to the server.
uploads it to the C2 server.
sends it to the C2 server.
sends it to the C2 server.
Upload a recording file with a specified name to the C2 server.
data to be exfiltrated to the C2 server
sends data to the C2 server
Sends the shellcode execution results to the C2 server
decrypts the next loader stage
decrypts it
Decrypts
decryption procedure
Decrypts
shellcode decrypts
After decrypting
decrypts the Orchestrator
decodes the directory path
decrypts the hidden page
decrypting them on the fly.
decrypts it with XOR
Decrypts the Trojan with a XOR-based cipher
The decryption key
injects the Trojan loader into exe.
can be injected to processes
The malware injects the ProcessWorm into all processes running on the system
injects itself into processes
injects the ProcessWorm if needed.
injects the ProcessWorm into processes
is injected into all running processes.
injecting code
The injected Trojan loader
collects specific system information
Returns information about the machine’s BIOS.
Returns information about the operating system
computer name
Overall available space\nSpace available to current user (may be less than overall available space due to quotas)\nDisk capacity
Returns information about the computer system
checks if it is running on a 64-bit system
Returns OSVERSIONINFOEXW and SYSTEM_INFO structures
the current process name
Returns the list of running processes
Returns ProcessDebugPort value returned by NtQueryInformationProcess for current process.
Returns ProcessDebugObjectHandle value returned by NtQueryInformationProcess for current process
Returns process names of the current process tree (i.e. the current process, the parent process, the grandparent process, etc.)
obtains the list of processes
extract specific information about running processes
regularly obtains the list of running processes.
examines all the processes on the system
looks for specific processes
acquires handles for all running processes on the system, which results in either winlogon.exe or explorer.exe obtaining numerous process handles.
When it detects a starting first (or a stopping last) instance of a process from the list
running processes
a part of code from the .text section (roughly 8 KB) is overwritten with heavily obfuscated code
obfuscated code
obfuscated trampoline in the .text section.
This trampoline is protected with an obfuscator
obfuscated with FinSpy Mutator
This module is an obfuscated shellcode.
obfuscated DLL
obfuscated with FinSpy VM.
It is encrypted with a 256-byte RC4 key.
conceals memory areas that contain the Trojan components’ code and data.
encrypts the Orchestrator’s pages with a cipher based on XOR and ROL operations and assigns the PAGE_NOACCESS attribute to them
protected with an obfuscator
An obfuscator similar to OLLVM is used to protect FinSpy
It is obfuscated with a protector resembling the open source OLLVM obfuscator.
The encrypted VFS file.
The setup configuration file, which is encrypted with RC4
an obfuscator resembling OLLVM or both these protectors
a call to the CreateWindowExW
the NtTerminateProcess and ExitProcess functions
CreateFileW API.
API function
various WinAPI functions.
low-level API functions (such as NtEnumerateValueKey or NtQuerySystemInformation)
NtTestAlert function
call the NtTestAlert function
NtTestAlert function
CreateProcessInternalW API function
 NtQueueAPCThread function
KiUserExceptionDispatcher function
WinAPI file manipulation functions.
calling API functions from this library
hooks the kernel’s PsCreateSystemThread function
launches a slightly modified Metasploit Reverse HTTPS stager
connects to a configured C2 server using HTTPS for communication.
Makes an initial POST request to the C2 server
to the C2 server via a POST request.
All communications between the server are encrypted with RC4
encrypted with RC4
A snippet of the RC4 key generation function
Returns the list of network adapter types, IP and MAC addresses assigned to them.
Returns names of shortcuts in the Desktop directory.
Returns the path to the ‘Program Files’ folder.
Returns the short form of the user’s profile folder
Returns the user’s profile folder
Returns the list of object names in the \GLOBAL?? directory.
Retrieve the list of files
gets the list of recent files
search, delete files.
file listings
Create file listing recordings
Returns the path to the user’s temporary folder.
Returns the current domain SID
Returns the current user’s name
Returns the current user’s SID.
WMI query
Creates a scheduled task that runs at system startup
The Task Scheduler launches it at system startup
scheduled task properties
a DLL obfuscated with VMProtect.
unpacking the Orchestrator
unpacks it with aPLib.
Orchestrator is unpacked
The Orchestrator (as well as plugins) are packed with aPLib and encrypted with AES.
unpacks with aPLib
encrypted with XOR and compressed with aPLib.
unpacks it with aPLib
takes a screenshot
screenshots
screen
take screenshots during, online conversations.
Capture the screen area around mouse click locations
Take screenshots with a specified frame rate, and livestream or record them.
screenshots
Commands are used to download and install plugins
Commands are used to download and run the Trojan Installer.
Upload, download
downloading and executing specific utilities
downloads Security Shellcodes from the C2 server
may save recording files in the working directory
stored in the working directory
the malware’s working directory
Once the working directory is prepared,
keylogs
keystrokes
record keystrokes
Delete a recording with a given filename from the system.
Uninstall the backdoor.
wipes all the files and registry keys created by the backdoor
delete files.
creating an APC (Asynchronous Procedure Call) with the procedure address pointing to the start of the shellcode.
APC injections
The asynchronous procedure places a hook on the NtTestAlert function and then exits
will be loaded with the help of the APC injection loader.
the hooked process creation function clears a possible hook of the  NtQueueAPCThread function and then uses it to create an APC procedure in the new process.
junk code created by the ProcessWorm loader
entries point to buffers of randomly generated junk code
method names contain junk.
The executable is prepended with 0x4000 random bytes and encrypted with RC4
documents sent to the printer.
Steal files which are printed by the victim
recently opened documents
Uninstall a plugin from the machine
Sets up persistence by creating an entry in the HKCU\Software\Microsoft\Windows\CurrentVersion\Run registry key.
adds it to the HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run key
Bash script
launched on every startup by rundll32.exe
creates a thread in the kernel that injects the next stage into winlogon.exe.
A thread with trampoline shellcode is created inside exe.
The victim downloads a Trojanized application and executes it.
we identified numerous legitimate applications backdoored
TeamViewer
Cleans  API functions potentially hooked by security solutions
attackers also exploited vulnerabilities such as PrintNightmare to escalate privileges
Software vulnerabilities, such as PrintNightmare (CVE-2021-1675) and (CVE-2021-34527), may be exploited in an attempt to elevate privileges.
has operated sites on the Tor network using the following .onion
this key is typically obfuscated with AES 256 encryption.
encrypted PowerShell.
Upon execution, the ransomware binary deletes itself
Creating the HKCU\Software\Zeppelin registry key
by modifying the Registry.
valid credentials have been used by Vice Society to gain initial access.
Internet-facing applications and systems vulnerabilities can be exploited, such as PrintNightmare (CVE-2021-1675) and (CVE-2021-34527), to gain initial access.
Batch files are used
features multiple flags that could be set as command line arguments
Persistence is maintained after boot/reboot via malicious autostart registry keys.
utilizes legitimate programs to side-load the group’s own DLL to execute their payload.
Malicious commands are executed via WMI as a means of “living off the land” and avoiding detection.
execute commands via scheduled tasks/jobs.
Files dropped in the victim’s environment by Vice Society may have been altered to appear legitimate.
attempts to disable Windows Defender
Attempts to disable or modify endpoint security, such as Microsoft Defender, on compromised devices.
utilizes comsvcs.dll to dump credentials from Local Security Authority Subsystem Service.
RDP is used by the group for lateral movement.
Lateral tool transfers have been used to move tools and files from one compromised system to another, including SMB and RDP.
to exfiltrate data to external C2 servers.
to exfiltrate data directly to C2 servers.
Tools such as SystemBC and proprietary backdoors are known to be used
Legitimate processes have been corrupted by Vice Society via code injection, as a means to evade defenses.
malware is designed to steal sensitive information from victims' systems,
attackers used an innocent-looking email to lure victims into opening an attachment.
we found the original email that included a ZIP file attached, which contained an ISO file.
sample uses obfuscation
This file is an obfuscated .NET file
only uses one code obfuscation technique: API hashing.
Payload\nObfuscation
each data byte in the HTTP based C2 communication,
submitted to the C2 server through HTTP protocol using the POST method.
the HTTP C2 Communication section.
HTTP C2 Communication
to the C2 through the HTTP protocol.
can be found in the two bytes of the HTTP payload
shows a HTTP POST request and its corresponding message body.
the Content-Key, which is a custom HTTP header whose value corresponds to a hash generated out of the HTTP header.
HTTP POST request (type 27 / data exfiltration).
then uploads this information to an attacker-controlled machine via HTTP POST.
exfiltrates information to the C2 through the HTTP protocol.
HTTP POST request (type 27 / data exfiltration).
an ISO file opener that mounts and opens the file with a simple double-click.
To the victim, the opening process simply looks like a regular directory.
obfuscated .NET file using process hollowing, which is a code injection technique in which an attacker removes legitimate code from an executable and replaces it with malicious code.
process hollowing was used to inject a malicious PE file into the legitimate process called aspnet_compiler.exe.
use this technique to retrieve export functions from loaded libraries
the corresponding APIs in the appropriate library.
via the MoveFileExW or CopyFileW Windows API.
Then, it creates and sets a new value for the registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run.
In order to establish persistence on the targeted host, the malware starts by saving a copy of itself in a new folder in the %APPDATA% directory
searches for and exfiltrates the following information:\nOS architecture\nBuilt-in admin\nDomain host name\nHostname\nLocal admin\nOperating system\nScreen resolution
Username information
Exfiltrate keylogger data
Keylogger database
can use additional payload types
Exfiltrate screenshots
Potential hidden files
It collects sensitive data from web browsers,
These functions are made to steal credentials from different types of applications and services on the Windows operating system:\nBrowsers: Safari, Internet Explorer, Firefox and Chromium-based browsers
adopting publicly disclosed proof-of-concept (POC) code shortly after it is released to exploit vulnerabilities in internet-facing applications.
their initial exploitation of vulnerable internet-facing applications,
continues to use older vulnerabilities, especially Log4Shell, to compromise unpatched devices
After gaining initial access to an organization by exploiting a vulnerability with a public POC,
as several adversaries are exploiting CVE-2022-47966 for initial access.\nApache Log4j2 (aka Log4Shell)
enable RDP connections.
can use the Active Directory database to access credentials for users’ accounts.
credentials are accessed and the target organization has not reset corresponding passwords, the actors can log in with stolen credentials and masquerade as legitimate users,
The actors could also gain access to other systems where individuals may have reused their passwords.
to persist in target environments and deploy additional tools.
backdoor with the ability to download and run additional tools
create scheduled tasks for persistence.
Scheduled Task Creation or
Remote Task Creation/Update using Schtasks Process
the group crafts bespoke phishing emails, often purporting to contain information on security policies that affect countries in the Middle East, to deliver weaponized documents to individuals of interest.
can read files,
gather information on an infected host, and send details back to the attackers.
Commands executed by WMI on new hosts
script to deobfuscate the control flow of shellcode
Malware immediately decrypts the third layer
it decrypts the c2 URL
Use NtQueryInformationProcess API
It decrypts an encrypted payload,
Payload decryption function.
the payload decryption key
deobfuscated code of GuLoader’s shellcode.
using stack to decrypt strings
script to restore deobfuscate control flow.
control flow obfuscation
encrypted shellcode’s file
encrypted payload from c2.
obfuscated arithmetic value calculations
an encrypted payload
shellcode control flow obfuscation
control flow obfuscation.
Unpacking of GuLoader’s shellcodes.
packed using NSIS installer.
UNPACKING GULOADER’S SHELLCODE
It then calls CallWindowProcW API.
Uses EnumWindows API
Uses EnumDeviceDrivers and GetDeviceDriverBaseNameA APIs.
Uses MsiEnumProductsA and MsiGetProductInfoA APIs.
Uses OpenSCManagerA and EnumServicesStatusA APIs.
Uses NtSetInformationThread API
DbgBreakPoint and DbgUiRemoteBreakin API
it starts payload execution using the ZwCreateThreadEx API.
call RtlAddVectoredExceptionHandler API
This shellcode has complex obfuscation, consisting of junk code
dynamic API resolution
use process hollowing to inject decrypted payload into child process and resolves its Import Address Table.
DLL sideloading,
program first sideloads u2ec.dll, which then loads the payload file usb.ini
malware rzlog4cpp.dll is sideloaded
which is used for the first sideloading.
including the use of DLL sideloading
Once the malicious DLL is sideloaded, it will drop the legitimate EXE file and the malicious DLL file, which are embedded in the resource section of the DLL file.
First-stage legitimate executable for DLL sideloading
Second-stage legitimate executable for DLL sideloading
files have XOR-encrypted content to prevent detection
contains another payload that is XOR-encrypted
applies obfuscation techniques
 reads the encrypted configuration filecan
an encrypted configuration.
the logging strings are encrypted with a single byte in XOR operations as
and obfuscation mechanisms.
an increasing number of obfuscations are being adopted to thwart static analysis.
containing one-byte XOR encrypted sections
will decrypt this file with a single byte in XOR operations, find the PE header, and drop the payload to the specified path.
after decrypting the frData member in
The decryption function
It will then decrypt the encrypted payload with the predefined RC4 key
After decryption, it then checks if the first byte of the decrypted payload
The decrypted payload
After this is decrypted,
The malware will continue to read and decrypt goopdate
C&C traffic of the PUBLOAD HTTP variant
it communicates to its C&C servers over the MQTT protocol, which is commonly used in internet-of-things (IoT) devices
malware that communicates over the MQTT protocol.
Command codes in the PUBLOAD HTTP variant
HTTP variant
HTTP variant
The data in the HTTP body is the same as the past variant,
HTTP variant
supports data upload
the group used certutil.exe to download the legitimate WinRAR binary as rar1.exe from the server
PowerShell downloading malware
The certutil.exe program downloads the WinRAR binary
the threat actors used PowerShell to download multiple malware and archives from the server
command execution.
its shell open command.
create a reverse shell.
It will then create a reverse shell via ncat.exe to the server
backdoor that is capable of executing commands
including adding more command-line arguments
also supports command-line arguments,
we discovered several tools used for UAC bypass in Windows 10.
HackTool.Win32.ABPASS is a tool used to bypass UAC in Windows 10.
HackTool.Win32.CCPASS is another tool that is also used for Windows 10 UAC bypass
This service has the highest privileges that can be abused for Windows 10 UAC bypass.
UAC bypass will be executed via the AppInfo RPC service.
UAC Bypass via the CMSTPLUA COM interface
UAC Bypass via the AppInfo RPC service
UAC bypass will be executed
UAC bypass is executed via token manipulation.
UAC bypass is executed
net user <username>
and the following data is written into registry:
Registry keys changed
It creates a new Shell in the registry.
it installs itself to %programdata% and then sets the registry run key for persistence.
It invokes the undocumented API UserAssocSet to update the file association.
strings and the APIs used by
It installs itself by creating an InstallSvc service
creating aservice called InstallSvc
Creates a service
which is injected to conduct backdoor behaviors.
and inject it into winver.exe for the next-stage payload
It will read the next stage payloads, free.plg and main.plg, and inject them into dllhost.exe.
It is also able to communicate through different network protocols such as UDP (User Datagram Protocol) and TCP (Transmission Control Protocol).
Delete file
Delete file
Keystrokes and windows monitoring
Monitor keystrokes and windows
Keylogging
will check if the running processes
will check if the process avp.exe exists.
It sets up a run key for via the command C:\ProgramData\GoogleUpdate\googleupdate.exe work for persistence.
It sets up a run key for the command C:\programdata\netsky\netsky.exe online for persistence.
Sets Run Key with “work/online”
It installs itself by creating aservice called InstallSvc which will trigger “C:\programdata\netsky\netsky.exe online”.
malware first generates a key blob randomly, with the key being encrypted in a custom algorithm.
Regardless of whether the file content is compressed or not, it will be encrypted in XOR operations with a specific string
is another example of custom malware used for packing files;
Victims will receive and interact with a decoy document containing a Google Drive link and a corresponding password instead of an archive download link embedded in the email.
Victims will receive and interact with a decoy document containing a Google Drive link and a corresponding password instead of an archive download link embedded in the email.
that had the remote desktop service enabled.
and the creation of a schedule task.
conceal its true code through either encryption or compression
make the malicious payload smaller and avoid detection based on static malware analysis techniques
UPX is an open-source packing algorithm
MPRESS is a free packer.
Andromeda is a custom packer
compress (and if it has the functionality of a crypter also encrypts) the original executable, which is saved in one of the sections of the final packed file.
entry point of the original file is relocated, and so is the Import Address Table (IAT).
change the final payload’s section names,
have very few imports as they don’t rely on external libraries
allocate memory, change permissions, read the encrypted/packed chunk of code, decrypt it, load it to the allocated memory space and execute it
use system calls
VirtualAlloc used for allocating memory in the current process
VirtualProtect changes the permissions of the given virtual address.
RtlDecompressBuffer decompresses the provided buffer.
CreateProcessInternalW creates a new process.
can create a new threat with the malicious unpacked payload.
initial code usually called a stub, decrypts or decompresses the real code
stub is a small part of code that implements the decompression (and decryption) of the originally packed file
the payload of the malware can be part of the loader’s file
strongly indicates that it contains another component that is dropped/loaded.
it can be downloaded from a remote location (by the loader, also known as a Downloader).
use system calls
VirtualAlloc used for allocating memory in the current process
VirtualProtect changes the permissions of the given virtual address
RtlDecompressBuffer decompresses the provided buffer.
CreateProcessInternalW creates a new process
not see them in the imported function list, and they not even be part of the strings in the sample.
try to hide these system calls
function and the corresponding library are dynamically loaded at runtime – also known as explicit linking
this executable then downloads and executes additional payloads
This executable binary insecurely downloads and executes additional payloads from the Internet.
Downloading and running further executables
It downloads and runs an executable payload
This is a Windows Native Binary executable embedded inside of UEFI firmware binary
This Windows executable is embedded into UEFI firmware
the embedded Windows executable
an embedded executable
This executable uses the Windows Native API
It then sets registry entries
to run this executable as a Windows Service.
when using the HTTPS-enabled options
implants made their native Windows executables look like legitimate update tools.
the Windows payload was named “IntelUpdater.exe”
Capturing screenshots
Real-time screen monitoring
a legitimate tool which is frequently used by bad actors for malicious purposes in ways similar to TeamViewer
NetSupport Manager, used maliciously or otherwise, provides full and complete control over the target device.
As NetSupport Manager is a legitimate tool that has a long history of development, it is highly attractive to attackers as it can be relied on to work ‘out of the box’.
has been observed in multiple ISO files masquerading as legitimate software,
The RAT installation is disguised to look similar to a Google Chrome installation.
RAT installer disguised as Google Chrome setup
threat actors are able to masquerade the dropper or installer
The sample is obfuscated via the Babadeda crypter.
a base64 encoded string is used to specify various parameters
Base64 encoded RAT execution command
Persistence for the RAT is achieved via registry entry, and a shortcut to the installed RAT executable is written to the Startup folder.
Persistence via Scheduled Task
In addition, the sample generates a scheduled task with multiple triggers.
Network adapter details are pulled via GetAdaptersAddresses
Additional data is gleaned via WMI queries
SELECT * FROM Win32_ComputerSystem
all running processes are enumerated and logged via EnumProcesses (32-bit processes).
has the ability to drop and execute additional components.
These files are all self-deleted after launch
threat actors using this tool are very quick to update their lures and find ways to entice their victims into installing the malicious remote control software.
decoded command
Downloads the miner and watcher.
then a malware downloader is uploaded to the device
Reconfigures Windows Defender to exclude the user profile path and the entire system drive from scanning.
its “intelligent” way of brute forcing: it checks the prompt and, based on the prompt, it selects the appropriate credentials.
This method speeds up the brute forcing process
“intelligent brute forcing”
then determines the processor architecture
Is able to steal/gather information on CPU type, screen resolution
The downloading of the actual malware is done via a variety of possible commands (for example, wget, curl, tftp and ftpget).
via the shell “echo” commands.
keystroke
download a malicious file
executes a malicious script
JavaScript is the module that has to be manually executed by the victim,
zip archive
comes with an embedded PE payload
PE is stored as a Base64 encoded string
stored as a list of registry keys, yet we also observed a variant in which similar content was written into a TXT file.
obfuscated Powershell script that runs another Base64 obfuscated layer that finally decodes the .NET payload.
embedded inside as a base64 encoded buffer
In its resources we can find another PE
been obfuscated in order to hide its real intentions
Base64 encoded string, and in the other as a hexadecimal string
PE file was encoded as an obfuscated hexadecimal string.
Base64 encoded script
Base64
obfuscated by XOR
three layers where one decodes content for the next
decodes the next element:
deobfuscates and runs another block of code
deobfuscate it.
decodes it
deobfuscate the file
decoding
decoding
Decoded content
Decoded content
deobfuscates
was decoded
decoding the base64-encoded content,
decompressed
reading/writing registry keys
written to the registry, as a list of keys.
JavaScript fetched from the C2 server
downloaded code chunk
GET request with C2 server
Process Hollowing – one of the classic methods of PE injection
PE injection, manual loading into the parent process
fetches IcedID from a remote resource
Malicious OneNote attachment
The “Forked” version of the malware loader first appeared in February 2023, distributed directly through thousands of personalized invoice-themed phishing emails.
These messages used Microsoft OneNote attachments (.one) to execute a malicious HTA file
string-decryption code
sending basic host info to the C2
took place over an unencrypted HTTP channel, the network traffic was plainly visible.
When the user double clicks or opens the lnk file,
lures the user to open a document.lnk file which will execute the malicious DLL loader
The execution phase started with that password protected zip, which after extracting would show the user an ISO file that after the user double clicks
starts a hidden file in the directory
then proceeded to inject into various other processes on the host (explorer.exe, rundll32.exe).
From these injected processes,
the different processes they injected into
a process where Cobalt Strike was injected into
The process injection technique was used multiple times to inject into different processes
Almost every post-exploitation job was launched from an injected process.
a process where the threat actors injected:
where they were previously injected into
Threat actors performed the first lateral movement from the beachhead to the server using RDP with an Administrator account
previously injected into
Process injections in svchost process via CreateRemoteThread, Default named pipes, etc
processes which threat actors injected into:
After injecting into various processes on the host,
various injections across hosts
injected into multiple processes on different hosts.
the threat actors began discovery tasks using Windows utilities
These batch scripts’ purposes
then two batch scripts were dropped and run.
using the following command line:\n\n\nC:\Windows\System32\cmd.exe /c
C:\Windows\system32\cmd.exe /C powershell.exe -nop -w hidden -c
launching the getsystem command in the wrong console (shell console rather than the beacon console).
C:\Windows\system32\cmd.exe /C getsystem
cmd.exe /C
C :\Windows\system32\cmd.exe /C shell
Threat actors used two scripts named s.bat (for servers) and w.bat
bat script:
bat script:
using Windows utilities like ping and tasklist.
tasklist
tasklist was also used in order to enumerate processes on multiple hosts remotely
process list
the threat actor started their first lateral movement using RDP
they accessed the server via RDP
Threat actors used explorer.exe, where they were previously injected into, to initiate a proxied RDP connection to a server:
the threat actor started their first lateral movement using RDP to pivot to a server using the local Administrator account.
the first lateral movement from the beachhead to the server using RDP with an Administrator account:
and again on a server with Administrator privileges.
using the Administrator account each time
to execute Procdump, which was used to dump lsass.
they used yet another technique to dump LSASS on the beachhead host, this time using a built in Windows tool comsvcs.dll.
dumping their LSASS process
LSASS Dump
Threat actors dumped the LSASS process from the beachhead using the comsvcs.dll MiniDump technique
C:\programdata\procdump64.exe -accepteula -ma lsass.exe C:\ProgramData\lsass.dmp
Threat actors also dropped procdump.exe and procdump64.exe on multiple workstations remotely, dumped LSASS,
Next, the threat actor transferred Sysinternals tool Procdump over SMB, to the ProgramData folders on multiple hosts in the environment.
Using the Cobalt Strike beacon, the threat actors transferred AnyDesk (1).exe file from the beachhead to a server:
The threat actors also transferred ProcDump from the beachhead to multiple workstations:
This first lateral movement was performed in order to drop and install AnyDesk.
threat actors remotely dropped AnyDesk binary on a server from the beachhead:
used PowerShell to download and execute
which downloaded obfuscated PowerShell and executed it in memory:
just C2 communications; until around 3 hours later, Bumblebee dropped a Cobalt Strike beacon
dropping and the execution of several payloads using multiple techniques
threat actors used CS as the main Command and Control tool, dropped several payloads,
the threat actors used a service account to execute a Cobalt Strike beacon remotely on a Domain Controller.
C:\Windows\System32\cmd.exe /c start rundll32 namr.dll,IternalJob
Sysmon File Created event showing wab.exe created by rundll32.exe
cmd.exe /C rundll32.exe
C:\Windows\System32\rundll32.exe
Because rundll32.exe executed PowerShell, we can see that rundll32.exe created
were initiated from the rundll32.exe process
The random (PsExec) service runs a rundll32.exe process without any arguments.
The metadata included TA machine’s hostname,
systeminfo
wmic product get name,version
“Display information about current Windows version
MAC address
ipconfig /all
showing wab.exe executed by WMI
wmic /node
wmic
obfuscated PowerShell
Once deobfuscated,
its installation as a service was used in order to persist and create a backdoor to the network.
the win32 function CreateServiceA was used by the malware in order to create a remote service over RPC on the server.
a remote service was created with random alphanumeric characters, service name and service file name
Below is an example of the service edc603a that was created
A new service was created
Threat actors obtained and abused credentials of privilege domain accounts
A service account, with Domain Administration permissions, was used to create a remote service on a Domain Controller to move laterally.
the service account logged into one of the Domain Controllers from the beachhead.
We observed the threat actors deleting their tools (Procdump, Network scanning scripts, etc.) from hosts.
ProcDump deletion from the ProgramData folder of all targeted workstations after dumping their LSASS process:
Threat actors also dropped procdump.exe and procdump64.exe on multiple workstations remotely, dumped LSASS, and deleted them from the ProgramData folder:
whoami
C :\Windows\system32\cmd.exe /C shell whoami /all
the win32 function CreateServiceA was used by the malware
The account used to perform this lateral movement
Threat actors executed this tool on patient 0 with low-level privileges multiple times
The threat actor then deployed Anydesk, which was the only observed persistence mechanism used during the intrusion.
they accessed the server via Anydesk.
AnyDesk and its installation as a service was used
AnyDesk logs, %ProgramData%\AnyDesk\ad_svc.trace and %AppData%\AnyDesk\ad.trace, show that it was used during Day 1 and Day 7 of this intrusion
The threat actors managed to get access to the beachhead host after the successful execution of a lnk file within an ISO, which are usually distributed through email campaigns.
Threat actors also created a remote thread in svchost.exe
Right after its execution, the wab.exe process created two remote threads in order to inject code into explorer.exe and rundll32.exe:
the service account password was weak and cracked offline by threat actors.
Named pipes were created in order to establish communication between CS processes
Named piped are commonly used by Cobalt Strike perform various techniques.
used CMD-based scripts
CMD-based scripts
CMD-based scripts
gets executed via the “SHELLEXECUTE”.
The first .CMD file set seen to use AutoIt in its execution
Each email has an HTML attachment.
The email text employs scare tactics, such as evidence of a traffic violation, prompting the user to open the HTML attachment
prompting the user to open the HTML attachment
contains some junk code and data in HEX format.
The data blob in HEX decodes
slightly obfuscated URL address
two base64 encoded data blobs and code instructions for its execution.
base64 data block execution
The first base64 data blob
All data is then sent back to the attacker's C2
the attacker's C2 via the HTTP POST method.
The C2 is constructed with the victim's enumerated data
extract sensitive information,
operating system version
OS architecture (x86 or x64)
keyboard layout
Opening the attached “multa_de_transito_502323.html” file triggers the embedded JavaScript
download a “.VBS” file
It proceeds by downloading the “sqlite3.dll” file
to steal Outlook data such as server, user, and password from POP3, SMPT, and IMAP registry keys
exploiting vulnerable web-facing devices
exfiltrate proprietary or confidential information,
decrypting a shellcode
starts by decrypting its initial configuration data
It starts its code by decrypting its initial configuration
the code of the decryption algorithm used by RedLine Stealer to decrypt its initial configuration data
Once the initial configuration data has been decrypted
to decrypt the password stored
Once the master key is decrypted,
to decrypt it using AES GCM algorithm
The decrypted password
Try to disable Windows Defender service “WinDefend”
Try to disable Tamper Protection settings of Windows Defender
Try to Disable AntiSpyware, Real Time Protection and notification of Windows Defender.
Disable Windows update services such as (“wuauserv”, “WaaSMedicSvc”, “UsoSvc”)
Disable Automatic Update and change Windows configurations related to Windows Update 
which is often encoded or encrypted to prevent detection
combination of Base64 and XOR functions.
The master key is encoded with Base64 and encrypted
to grab the encoded and encrypted master key
it will parse the AES IV (Initialization vector) and the encrypted password
to steal information from the compromised or targeted host
has the ability to collect or extract various types of system information from a targeted or compromised computer
func_GetHostSerialNumber()
host serial number
Retrieves  system default language, timezone and OS version
Get processor information of the compromised host by executing "SELECT * FROM Win32_Processor"
func_GetProcessor()
func_GetLanguageTimeZoneOsVersion()
func_GetGraphicCards
Get AdapterRAM and Graphic Card Name and type by executing  "root\\CIMV2", "SELECT * FROM Win32_VideoController"
func_GetTotalRAM()
Get the total RAM size of compromised host by executing "SELECT * FROM Win32_OperatingSystem" and look for "TotalVisibleMemorySize"
Retrieve the user domain name, username
Get the user name of the compromised host
func_GetUserName()
Parse firewall and Anti Virus Product install in the compromised host by running\n"SELECT * FROM ROOT\\SecurityCenter2"\n"SELECT * FROM ROOT\\SecurityCenter"\n"SELECT * FROM AntivirusProduct"\n"SELECT * FROM FirewallProduct"\n"SELECT * FROM AntiSpyWareProduct"
func_GetFirewalls()
func_ListProcesses()
Retrieve process list and process information by running 'SELECT * FROM Win32_Process'
Screen Capture
func_ScanScreen() is the one responsible for this screen capture capability
has a functionality to capture a screenshot of the targeted or compromised host as part of its data collection and exfiltration
uses .NET Graphics class CopyFromScreen Function() to transfer a bit block of color data from the screen to the Graphic drawing surface that will be saved in memory stream for data exfiltration.
Parse all installed application in the compromised host by querying 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall' registry
Parse browser application and browser version installed in the compromised host by querying "SOFTWARE\WOW6432Node\Clients\StartMenuInternet" or "SOFTWARE\Clients\StartMenuInternet" registry
uses .NET Graphics class CopyFromScreen Function()
using Windows CryptProtectData() API.
cracking browser sensitive information like passwords
The decrypted password will be sent to its C2 Server as part of its data exfiltration.
it enumerates several known Crypto Wallet directories and looks for files related to crypto currencies by looking for files having “wallet” substring on its file name.
used a compiled remote desktop malware,
then executed RDPEnable on the infected machine.
There were also instances of the malware actors using PsEXEC to enable the remote desktop protocol (RDP) of a target system
It enumerates files and directories
File enumeration
using FindFirstFileW, FindNextFileW, and FindClose APIs
For each directory it traverses
using FindFirstFileW, FindNextFileW, and FindClose APIs
installing remote access software.
actors used tools such as PCHunter, PowerTool, GMER, and Process Hacker to disable any security-related services running in the system.
by listing accessible local IPs
It checks for the number of processors in the infected system
Checking the number of processors
This is a multi-stage attack that involves sideloading DLLs,
involves sideloading DLLs along
icon files with encrypted data appended to the end of the files.
These encrypted strings,
once decrypted, contained the C2 domains for additional malicious artifacts.
attempt to obtain system information
the malware attempts to retrieve additional malicious artifacts
Inject and execute DLLs
Manipulate processes (list
Manipulate files and directories (list
Manipulate files and directories (list, download, upload, view, delete
download, upload
Take screenshots
Execute commands via Command Prompt
executed using ShellExecute with the following command line:
This type of threats is usually delivered as email attachments.
Encoded binary payload
Encrypted and compressed payload
Start of encrypted and compressed loader configuration and payload
an encoded payload split across several nodes, further complicating its extraction.
That node contains the encoded payload.
the encoded payload
To hide the strings it uses during its execution, it primarily uses a simple encoding by subtracting 35 from each character of the original string and encoding the result with Base64
Similar to decoding strings, the binary payload is extracted by decoding the data using Base64 and adding 35.
the resulting bytes are further decoded with xor 82.
The decoded payload
Once the payload is decoded
After decrypting and decompressing the payload
Decrypted and decompressed payload
Decodes sensitive memory regions in the current process with the same XOR key
it locates a packed and compressed payload
Injection type: Current process (1) or in the new process
Process to inject into
 Process to inject into
this loader prepends a stub containing 79 bytes of junk instructions before the actual payload shellcode.
The bytes at 25 hardcoded offsets within this stub are replaced with random bytes to hinder shellcode detection.
To launch the shellcode, the loader calls ZwCreateThreadEx to create a new suspended injection thread hidden from debuggers using the THREAD_CREATE_FLAGS_CREATE_SUSPENDED (0x01) and THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER (0x4) thread creation flags.
by redirecting calls to the Windows Sleep API to its own function
communicates with the C2 server specified in the configuration via HTTP or HTTPS POST requests
shared with the C2 server on the initial check-in request (Figure 11) for encrypting subsequent data communicated between the agent and C2 server with AES-256-CTR.
the execution of the downloaded DLL via the tool rundll32.exe.
performs the download of a file
PowerShell script that downloads and executes a dropper
downloads a payload
malware dynamically calls the API NtAllocateVirtualMemory
AES Cryptographic Provider from WinCrypt APIs
the API Web RESTful that provides access to Microsoft Cloud service resources.
using the Microsoft Graph API
uses the Microsoft Graph API
decrypted using the RSA
The malware proceeds to de-obfuscate strings using a XOR loop
de-obfuscated strings:
decrypted through an AES-256-CBCdecryption algorithm
decrypted
the decrypted content
The code in the injected PE
injects in itself a new PE (Portable Executable) file,
passes the execution to the region of memory in which the copied PE is allocated
the imported code dynamically calls VirtualAlloc to allocate a new region of memory in which a new PE file is copied.
the full HTTP request to make the first connection to the C&C
enumerating the child files in the check OneDrive subdirectory.
The execution triggers the setting of the following registry key
triggered when the user starts the presentation mode and moves the mouse
triggered when the user starts the presentation mode and moves the mouse
A new file, again with a JPEG extension
Contents of the .img file, including the hidden files
hiding the rest of its files from the user.
to run the subsequent BAT scripts
the attacker’s BAT file to run
The BAT script
a BAT file (4.2) to be run on logon as another UI shell
executes another BAT script
Some variants used a known UAC bypass method abusing the legitimate fodhelper.exe
UAC bypass implementation
If it fails, it sets in the registry
Register a new service
a new service that will run its VBS script (4.1) using sc.exe.
the malicious executable to unpack itself.
which is unpacked only when run with a unique password, allow evading traditional signature-based detection.
decrypting and running the ransomware
The user is then prompted to open the single visible shortcut (2) file.
contains obfuscated VBA scripts or a binary with a JPG extension
to trick users into opening the malicious attachments in
If a target opens the malicious attachment,
using three possible types of messages to try to get a target to open the email and malicious attachment.
The attachment, if opened,
spear phishing emails pretending to be from financial vendors or partners to trick users into opening the malicious attachments in the emails.
a malicious attachment sent via phishing emails
the malicious attachment,
the email and malicious attachment.
sends emails pretending to be related to a shipment notice for the target which contain a malicious attachment.
Both send information to command and control (C2) servers
keylogging every tap
obtain logs of the infected machine’s keystrokes
exfiltrate data from messaging applications such as WhatsApp and Viber
The malware can deliver payloads from the command and control (C2) server
This vulnerability allows for a threat actor to obtain system privileges
take screenshots
This version of CEIDPageLock has VMProtect, which makes analysis and unpacking difficult
then proceeded to dump credentials from LSASS.
the threat actors again used Get-System to elevate and then dumped LSASS.
Cobalt Strike beacons accessing LSASS on multiple occasions, on almost every compromised host.
threat actor injected into a dllhost.exe process
which is then injected into svchost and dllhost.
Process injection was observed during the intrusion
direct Cobalt Strike processes and the injected processes
injecting into multiple other processes, such as explorer.exe and svchost.exe, to execute further payloads.
dumped from an injection into the SearchIndexer process
This was achieved by transferring a Cobalt Strike DLL over SMB
the SMB lateral transfer of one of the Atera Agent MSI installers (1.msi) used to gain access laterally on a host and provide persistence for later access.
SMB to transfer DLL's into the ProgramData folder of hosts for purposes of lateral movement.
and executing via a remote service on another workstation.
using a batch file named find.bat.
Windows discovery commands
using a batch script
batch script
basic discovery tasks on the host using built in Windows utilities.
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
via the find.bat batch script.
which was then fed to a batch script
The batch file contained one line,
began enumerating the network using native Windows binaries
via the interactive shell
wrote a registry run key for persistence
used a registry run key to maintain persistence.
systeminfo
systeminfo
C:\Windows\system32\cmd.exe /C systeminfo
ipconfig
ipconfig /all
sending new emails with attached xls and zip files.
The document came in via email in the form of a zip file which included an xls file.
The emails were sent through various compromised email accounts, propagating additional malicious xls files
Using the remote admin tools
the threat actor deployed several Atera/Splashtop remote access tools across the environment as an alternative means of access to the environment
Threat actors used Atera and Splashtop remote access tools on two compromised hosts during the intrusion.
after a user opened an Excel document and enabled macros.
To deobfuscate the document the tool xlmdeobfuscator was used with the following output.
After deobfuscation
used process hollowing to launch under the context of the Dllhost.exe process
the following URLs are hard coded, and obfuscated
to download the second stage.
malware pulled down and executed a Cobalt Strike payload on
ran another round of discovery activity with native windows utilities
cmd.exe /C
“C:\Windows\System32\cmd.exe” CommandLine: “C:\Windows\system32\cmd.exe /c
cmd.exe /C
C:\Windows\system32\cmd.exe /C gpupdate 
C:\Windows\system32\cmd.exe /C gpupdate 
C:\Windows\system32\cmd.exe /C gpupdate 
C:\Windows\system32\cmd.exe /C gpupdate 
whoami.exe
cmd.exe /C whoami
The threat actors continued by moving laterally to the domain controllers on the network using SMB to transfer and execute a Cobalt Strike Beacon
the threat actors used PsExec, to copy and execute a Cobalt Strike Beacon DLL on most of the systems in the network.
They utilized RDP,
the threat actor was seen establishing RDP connections
Cobalt Strike was used to enable RDP,
remotedesktop mode = enable cmd
RDP connections were established from the beachhead host to systems throughout the environment
details of the RDP session
the initial vector used by the threat actor was a zip file, which included a malicious JavaScript file, delivered through a phishing campaign.
This RDP activity was being proxied through the IcedID process running on that host, to a remote proxy over port 8080.
in an effort to evade any detection and prevention mechanisms, they disabled Windows Defender
To evade detection, the threat actors disabled Windows Defender
they disabled Windows Defender via a group policy modification.
by adding the below to an already linked GPO.
They then force updated the GPO on all clients using Cobalt Strike.
Cobalt Strike Beacon was dropped and executed on the system
was executed via rundll32.exe
including the computer name and the OS version of the compromised system were sent
cmd.exe /C reg add
HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\DisableAntiSpyware \nDeleteValue 
HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Monitoring\DisableRealtimeMonitoring \nDeleteValue 
HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Monitoring\DisableBehaviorMonitoring \nDeleteValue 
HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Monitoring\DisableIntrusionPreventionSystem \nDeleteValue 
HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection \nDeleteKey 
The threat actor used a redirector (38.135.122[.]194:8080) to proxy the RDP traffic being passed
This proxied traffic
LSASS was accessed by an unusual process “runonce.exe” on multiple hosts, including a domain controller.
systems injected the Conti DLL into memory
web application vulnerabilities
exploiting vulnerabilities in Apache and Apache Spark (CVE-2021-42013 and CVE-2022-33891
GrandstreamCVE-2020-25223WebAdmin of Sophos SG UTMCVE-2021-42013ApacheCVE-2022-31137Roxy-WICVE-2022-33891Apache SparkZSL-
CVE-2018-12613, a phpMyAdmin vulnerability that could allow threat actors to view or execute files
propagating through brute force attacks on vulnerable devices with insecure configurations that use default or weak credentials
default or weak credentials
using a combination of eight common usernames and 130 passwords
malicious payload
downloads
downloads the Zerobot binary
download and execute binaries of various architectures until it succeeds
download this RAT,
identify the architecture
copies itself to the Startup folder
methodDescriptionUDP_LEGITSends UDP packets without data
TCP_HANDSHAKEFloods with TCP handshakes.TCP_SOCKETContinuously sends random payloads on an open TCP socket.
TLS_SOCKETContinuously sends random payloads on an open TLS socket.
methodDescriptionUDP_RAWSends UDP packets where the payload is customizable.ICMP_FLOODSupposed to be an ICMP flood, but the packet is built incorrectly.TCP_CUSTOMSends TCP packets where the payload and flags are fully customizable.TCP_SYNSends SYN packets.TCP_ACKSends ACK packets.TCP_SYNACKSends SYN-ACK packets.TCP_XMASChristmas tree attack (all TCP flags are set).
HTTP_HANDLESends HTTP GET requests using a Golang standard library.HTTP_RAWFormats and sends HTTP GET requests.HTTP_BYPASSSends HTTP GET requests with spoofed headers.HTTP_NULLHTTP headers are each one random byte (
Zerobot HTTP requests
open-source remote administration tool (RAT) with various features such as managing processes, file operations, screenshotting, and running commands.
running commands
screenshotting,
This attachment (unless zipped) is the MyDoom executable.
executables attached to its phishing e-mails have an extension hidden by default by most Windows deployments (.cmd, .scr, .com, etc.).
the file is a 32-bit Windows executable packed using the UPX (Ultimate Packer for Executables) packer (https://en.wikipedia.org/wiki/UPX) to compress and make it more difficult to analyze.
The packer decompresses and executes
Upon execution, an attempt to alter the Windows firewall settings is made.
makes a copy of itself, places it in the “Temp” folder (C:\Users\<user>\AppData\Local\Temp), and changes the name to a known Windows application/process.
The activity thereafter included dumps of LSASS
process enumerations.
then launched by cmd.exe
the executable ‘3ujwy2rz7v.exe’ was downloaded
that uses command and control servers to collect information on compromised systems
A user had to click on this in order to execute the malware.
the malware immediately begins to look for EDR and antivirus software.
Phishing emails spoof legitimate senders to deliver RokRAT via LNK files
Email attachments mimic legitimate documents
several Zip Archives files hosting multiple lure documents likely sent via phishing campaigns
targets for phishing emails containing this type of decoy document.
campaigns typically begin with a phishing email with a ZIP file attachment, containing a LNK file disguised as a Word document
containing obfuscated PowerShell scripts
the obfuscation technique for the dropped files being hex-encoding vs. string concatenation
contain an encoded PowerShell,
PowerShell scripts in charge of downloading a second stage RokRAT shellcode
file download/upload
to start the download process
downloads the payload
keylogging
Optical Disc Image files (ISO) containing LNK files that had slightly modified PowerShell scripts, and Hangul Word Processor decoy documents
The ISO files that X-Force observed contained a LNK file
a JPEG decoy file are dropped
the JPEG decoy file
a batch file
a batch file
drop batch files
then the payload is executed using Windows API functions (VirtualProtect).
the payload that is decoded using the first byte as a key,
packed into a Windows executable file
stealing sensitive data from the victim’s networks.
the adversary identifies data of interest from the network of the victim
This can be anything from file and directory-listings, configuration files, manuals, email stores in the guise of OST- and PST-files, file shares with intellectual property (IP), and data scraped from memory.
the adversary collected the data from various sources within the victim’s network.
Credential theft and password spraying
password spraying attack against the victim’s remote services,
With this list of administrator-accounts, the adversary performs another password spraying attack until a valid admin account is compromised
The adversary started a password spraying attack against those domain admin accounts,
The user account was possibly compromised on the Linux server by using credential stuffing or password spraying:
Logfiles on the Linux-system show traces which can be attributed to a credential stuffing or password spraying attack.
Password spraying
or password spraying.
This adversary starts with obtaining usernames
The built-in Windows quser-command to show logged on users is also heavily used by them.
To identify if privileged users are active on remote servers, the adversary makes use of PsLogList from Microsoft Sysinternals
to identify if privileged users are active on the systems
These credentials are used in a credential stuffing
The user account was possibly compromised on the Linux server by using credential stuffing
Logfiles on the Linux-system show traces which can be attributed to a credential stuffing or password spraying attack.
credential stuffing
more specifically by credential stuffing
After obtaining a valid account, they use this account to access the victim’s VPN, Citrix or another remote service that allows access to the network of the victim.
With this valid admin account, a Cobalt Strike beacon is loaded into memory of patient zero.
the adversary used the valid account to directly login
The threat used valid accounts against remote services:
the adversary accessed the company portal with the valid account.
cloud drive, or other cloud resources accessible by the compromised account.
the adversary now armed with the valid account, was able to access a document stored in SharePoint Online, part of Microsoft Office 365.
starts using the Cobalt Strike beacon for remote access and command and control.
If the obtained valid account is already member of the domain admins group, the first lateral move in the network is usually to a domain controller
After this the adversary dumps the domain admin credentials from the memory of this machine, continues lateral moving through the network,
and finds the trust relationships and jump hosts, attempting to move into the other domains and security zones.
successfully got a valid domain admin account this way.
In other cases, the adversary moved laterally to another system with a domain admin logged in.
This can be anything from file and directory-listings,
the adversary copying results of the discovery phase, like file- and directory lists from local systems,
If the data is small enough, it is exfiltrated through the command and control channel of the Cobalt Strike beacons.
The adversary uses the command and control channel to exfiltrate small amounts of data.
adversary executes Cobalt Strike’s built-in Mimikatz to dump its password hashes.
We observed the use of Mimikatz on this system and saw the hashes of the logged in domain admin account going
the actor executes Cobalt Strike’s built-in Mimikatz to dump its credentials or password hash
, staged on another system of the victim, and from there copied to a OneDrive-account controlled by the adversary.
Files and folders of interest are collected as well and staged for exfiltration.
We’ve seen the adversary staging data on a remote system or on the local system.
This activity group always uses a renamed version of rar.exe.
The adversary copied those tools over SMB from compromised system to compromised system wherever they needed these tools.
The DLL’s used were side-loaded in memory on compromised systems.
File deletion
Use scheduled tasks
The adversary heavily relies on scheduled tasks for executing a batch-file (.bat) to perform their tasks.
An example of the creation of such a scheduled task by the adversary:\nschtasks /create /ru "SYSTEM" /tn "update" /tr "cmd /c c:\windows\temp\update.bat" /sc once /f /st 06:59:00
batch files for automation.
The batch-files appear to be used to load the Cobalt Strike beacon, but also to perform discovery commands on the compromised system.
executing a batch-file (.bat) to perform their tasks.
They switched to C2 encapsulated in HTTPS in Q3 2019.
the adversary achieving credentials access by brute force
The adversary installs a hackers best friend during the intrusion: Cobalt Strike.
the adversary also searches for VPN and firewall configs,
This lures users to double-click the graphic to view the content,
Malicious documents that implement this technique require users to double-click a document element.
capturing screenshots
and enumerating files and drives
establish persistence by creating a registry key under \SOFTWARE\Microsoft\Windows\CurrentVersion\Run only if the victim’s machine name differs.
include exfiltrating system information
implement different obfuscation techniques of varying intensities, for example, simple function name malformation and dynamic string resolution.
the obfuscation techniques used
obfuscated using Crypto Obfuscator,
malicious dynamic link library (DLL) file that’s eventually side-loaded to the application.
to a side-loading vulnerability that
We’ve seen the payload delivered in diverse ways including DLL side-loading,
abuse legitimate applications vulnerable to DLL side-loading attack.
DLL Side-Loading
A benign, legitimate executable abused to side-load the malicious DLL
The malicious side loaded DLL
WDSyncService.exe executable abused to side-load a malicious DLL 
Side loaded malicious DLL 
abused to side-load the malicious DLL.
executable abused to side-load malicious DLL 
DLL Side-Loading
DLL Side-Loading
that is abused to side-load a malicious DLL
executable that dropped a legitimate WD Discovery app to side-load the malicious WDLocal.dll
side-loads malicious WDLocal.dll The side-loaded DLL
DLL side-loading is a highly effective technique for tricking Windows systems into loading malicious code.
Adversaries use side-loading attacks for execution
Once the executable starts running, it side-loads the malicious DLL
to lure victims into downloading a malicious file
designed to steal sensitive information, including login data, cookies, and Facebook ad and business account information.
The scripts are encoded using different techniques,
(base64 encoded with string replacements)
uses are compressed and encrypted
Base64 encoded string with several string replacements.
self-written extensions that obfuscate the PHP scripts.
And malicious payloads are also sometimes encrypted/packed or obfuscated
obfuscated with SmartAssembly
base64 encoded with some string modifications
it downloads the file from its command and control (C2) server,
they’re downloaded from the C2
executes, it drops a PHP application with additional files
Download and run
Downloads a file from the given URL and executes it with the given arguments.
the given task the downloaded file
the new stealer is downloaded and executed
  Upload file function 
then decodes and executes it.
In the main thread the SFX/ZIP file is executed/decompressed,
DLL that decodes and drops three files
It starts with de-obfuscating the next stage (string replacements + base64 decoding)
Once decoded, this executable, written in Rust and compiled with Cargo, gets the current date and time, and decrypts Chromium-based browsers’ encryption key 
It does this by decoding the rss.txt into an executable
the executable decodes and drops the next stage
it creates a scheduled task that runs the Rust executable by passing it as an argument to rhc.exe.
registers a new scheduled task to trigger every day and repeat every hour with option “d” as an argument.
Creates a scheduled task to be executed with d as an argument 
Responsible for installing persistence via scheduled tasks
The attacker must know the time to set it in the scheduled task.
createTS—creates scheduled task. createLG—creates scheduled task at logon 
it creates a scheduled task that executes the updated routine, which triggers at log-on and every 30 minutes.
registers two scheduled tasks:
embeds legitimate DLLs using the SmartAssembly feature 
Once the execution completes, the file is deleted to leave no evidence on the machine.
the file is deleted to remove evidence from the machine.
passes this command line as an argument
Gets a command to run, executes it
 Gets command from C2 and executes it 
Executable that accepts an executable as an argument and executes it with hidden console
“wmic os get LocalDateTime /value”.
to steal the victim’s Facebook information and send it back to the C2.
Extract victim’s sensitive Facebook data using the graph API and send the results to a C2 server 
The malware can extract this information and send it to its command and control (C2) server
API functions.
API calls
the API calls
calls point to a suspicious API
creation functions like NtCreateUserProcess, NtCreateProcessEx, CreateProcessInternalW, CreateProcessA or CreateProcessW.
an exported function from one of the Windows libraries
suspicious APIs often used in code injection techniques like CreateRemoteThread or NtSetContextThread.
frequently called API function
critical APIs
Microsoft Outlook Messaging API (MAPI) module
process creation library functions
calls the NtProtectVirtualMemory function where the NewAccessProtection argument is PAGE_EXECUTE_READWRITE and the BaseAddress argument is an address to a library function
uses a variation of AtomBombing that queues an APC to call memset to clean an RW region in ntdll.dll.
dispatch an asynchronous procedure call (APC) to the APC queue of a target process thread using NtQueueApcThread
the injector process dispatches another APC using NtQueueApcThread to force the remote process to execute NtSetContextThread.
it queues an APC into the patched GlobalGetAtomA to get the payload running.
APC routine argument in the case of NtQueueApcThread,
AtomBombing is the write-primitive, which allows writing to the remote process using atom tables and APC.
AtomBombing Injection Technique
AtomBombing is a technique that allows malware to inject code while avoiding calling suspicious APIs
Malware using the AtomBombing technique first writes the payload into the global atom table, which can be accessed by all processes.
uses a slightly modified AtomBombing technique that injects one of its stages into a Windows process
the malware can read HTTP-POST headers
injects the main bot into svchost.exe.
Injected Processes
Process Injection via Hooking
use this technique to inject themselves into other processes
they inject their main bot into a Windows process, and then inject their other modules into different processes according to the module’s purpose
an injection into a web browser process.
injected thread
they suspend the remote process threads
The injected process
goes through processes one by one
used to steal victims’ sensitive data.
injects its main bot into a hollowed instance of svchost.exe
implemented process hollowing by first using VirtualProtectEx on the process entrypoint, and then writing the hook stub using WriteProcessMemory.
Process hollowing is a process injection technique that creates a new legitimate process in a suspended mode, unmaps its main image and replaces it with malicious code.
The malicious code is written into the newly created process and the suspended thread context instruction pointer is changed using NtGetContextThread/NtSetContextThread.
for process hollowing from a WoW64 process into a 64-bit svchost.exe
Evasive Process Hollowing By Entrypoint Patching
Evasive Process
Evasive Process Hollowing by Entrypoint Patching
Decompresses a local buffer
Common injection methods used by banking Trojans involve writing a mapped PE into a remote process using WriteProcessMemory
obscure the call by wiping artifacts from the buffer, such as wiping the PE header.
malware disguised as Hancom Office document files.
“Who and What Threatens the World (Column).exe” and is designed to deceive users by using an icon that is similar to that of Hancom Office.
creating a folder named onedrivenew in the AppData directory and self-copying itself with the filename onedrivenew.exe to appear as a normal file.
malware creating and executing a normal Hancom Office file with the same filename as the malware within the same directory where the malware was executed.
connect to a certain URL every 60 minutes using the normal Windows file mshta.exe.
URL registered in the task scheduler appears to be a normal homepage
Decompressing the compressed file
Decompressing
injected and executed within the normal Windows process called mstsc.exe.
of mstsc.exe being executed after being injected with malware
deleted using the cmd command.
registers its file with the name onedrivenew under the Run key
registers its file with the name onedrivenew under the Run key in order to make it run after the system is rebooted.
schtasks.exe command to register the file to the task scheduler with
URL registered in the task scheduler
connect to a certain URL every 60 minutes using the normal Windows file mshta.exe.
using an obfuscated Meterpreter stager
One of the techniques to conceal the traffic from DNS-based filtering is Domain Fronting.
Domain fronting uses legitimate or high-reputation domains to remain undetected by defenders.
domains for domain fronting may indicate an interest in the geopolitics of this area of the world.
the domain fronting functionality before launching the attack.
The actor in this campaign has used domain fronting, which is a technique which can use high reputation domains to conceal the Cobalt Strike command and control traffic.
Domain fronting can be achieved with a redirect between the malicious server and the target.
actors may misuse various content delivery networks (CDNs) to set up redirects of serving content to the content served by attacker-controlled C2 hosts.
The beacons are of particular interest due to the domain fronting technique using a government host as the initial DNS lure.
The DNS request for the initial host resolves to a Cloudflare-owned IP address that allows the attacker to employ domain fronting and send the traffic to the actual C2 host
Domain fronting is a technique used by attackers to circumvent protection based on DNS filtering.
modify the subsequent HTTPs requests header to instruct the CDN to direct the traffic to an attacker-controlled host.
The threat actor in this case uses domain fronting with the Cloudflare Content Delivery Network
.]net via HTTP Get and POST metadata specified in the beacon's configuration.
relies on other parts of the HTTP request, including the Host header and the actual C2
suspicious section .kxrt with the packed and encoded malicious code.
decryption routine is executed that decrypts the remaining malicious code in the .kxrt section and writes it to the virtual memory.
Decoder routine to decrypt the beacon DLL.
The decrypted malicious code
Once decoded, the loader's execution jumps to the beginning of the DLL
now responsible for decoding the configuration.
by calling WinHTTPGetProxyForUrlEx and WinHTTPCreateProxyResolver
calls the VirtualProtect function
modifies the victim's system power and lid open/close policies in the registry.
can also manage the system power policies registry keys to set the minimum and maximum sleep times and the lid open and close action policy.
routed through European TOR VPN exit nodes.
VPN access using Single Factor authentication.
Minidump of LSASS process memory
The minidump function of comsvcs.dll can be used to dump lsass.exe.
leveraging comsvcs.dll with proxy execution by rundll32.exe.
do rundll32.exe C:\windows\System32\comsvcs.dll,
Conducting discovery indirectly via schedule tasks named “Windows Update”
performing remote directory listings.
to discover interesting to them directories
Leveraging a dual-use tool, PCHunter64, to acquire detailed process and system information.
Threat actors can use windows binaries and commands
RDP connection established
Remote Desktop Protocol (RDP), and the threat actor was able to move freely across the network
the threat actor was able to RDP unencumbered across the organization’s infrastructure.
The threat actor executed two actions to bypass Windows Defender
the threat actor leveraged one of the most popular dual-use agents, AnyDesk, to provide persistent remote access into the affected organization on multiple systems.
several files were staged for possible, but unconfirmed exfiltration
spear phishing emails that contain a .csv or .xlt file attachment
The email is directed to “Non-Resident Alien” tax payers to have them fill out a PDF file (that is attached to the email)
a cyber-attack in the form of credential stuffing,
Enduring Credential Stuffing
using login credentials from what the company suspects are past data breaches from other companies
replace the “ServiceManager.exe” file from the driver folder with a malicious file to trick the driver into running the tainted file
log keystrokes
a vulnerability in unencrypted Wi-Fi routers that makes them susceptible to a TCP exploit.
A threat actor could take advantage of this vulnerability by creating a specific file that contains data that is stored in the JET database format, and having the targeted user open it, which would then allow for remote code execution at the level of the current process
This vulnerability, registered as “CVE-2018-14327,” allows a low-privileged user account to escalate privileges on any Windows machine that had connected to the EE Mini modem via USB.
decrypts that specific payload code
A threat actor could establish an administrator session
a payload download code that grabs malware to download and install the backdoor.
then sign on as a legitimate user
decrypting database passwords from Windows registry values
decrypting them from Windows registry values
decrypt the more sensitive data in the user’s database.
decrypt these database passwords,
decryption
decryption
decrypts the password
decrypted dba user password.
decrypts this payload
decrypting the appropriate loader
decryption
decrypts the payload
decrypting them
gather database passwords
steal database passwords and configuration information
steal credentials by decrypting them from registry values.
Exfiltrated credentials
decrypt these database passwords
decrypts the password for the dba username
decrypted dba user password.
successfully obtain the database passwords
steal credentials by decrypting them from registry values
the encryption key for sensitive data
encrypted
encryption
encryption
XORed with the value
encrypted using its own XOR key
encrypted payload
write module to the encrypted storage
unpacks and loads the next stage of the malware, namely the main module
unpacking the main module and
handles communication between the modules and attacker’s C&C server.
0x10000013data for C&C server (execution logs, stolen data, …)
upload data to C&C
exfiltrates data over its C&C channel.
acquire a list of the running processes and their loaded modules
collect information about currently running processes, including: name, process identifier (PID), parent process PID, number of threads, token owner, token domain, process creation time, and command line
collect information about loaded modules for each of the running processes
0x10000025get handle of the process with specified PID
enumerates running processes
get information about processes running on a system
stored in DataS5 (for dba) and DataS6 (for micros) registry values within one of the following registry keys
Windows registry Run key
GetComputerName API
GetTickCount Windows API
PeekNamedPipe Windows API function
information about specific registry keys
queries the Registry for ORACLE MICROS RES 3700 POS version, database passwords and other configuration data
is injected into one of the processes specified by the C&C
module is injected into one of the processes specified by the C&C
is injected only into processes running under WOW64.
its injection into one of the following processes
0x10000012inject and execute received module in specified process
injected first,
inject a networking module
inject processes that are expected to communicate over the network
0x0AInject and execute received module in specified process
0x0BInject and execute received module in specified process
inject and execute received module in specified process
scanning selected IP addresses
scan specific IP addresses
IP addresses intended for scanning and the special “ping” IP address
scanning IPs specified in the command data to collect additional information about the environment
scan of the selected IP addresses
downloaded from the C&C along with the ModScan module
parsing payload received in the C&C responses
download additional payloads and C&C commands
TCP ports 50123
and 2638
by sending a specially crafted TCP packet
sends a hardcoded TDS 4.2 & 5.0 Login Packet (Figure 6) to the specified IP address on port 2638
transmitted using the lightweight networking module,
Version of the Oracle
information about the database server and the TDS versions used
sending an HTTP Post message
module uses HTTP and port 80.
avoid system processes that might attract attention if caught communicating over the network
HTTP POST or GET methods
uses HTTP for command and control
stored between data xml tags (<data>%version%</data>) of the response from the service
encrypted payload, containing the main functionality of the dropper, is stored in the dropper’s resources as bitmaps named from A to L.
being the payloads stored in the resources
encrypted within the main module’s code.
with username set to the built-in dba and a hardcoded password, which is potentially the default password in some RES 3700 POS versions.
hash of the dropped loader to change with each execution,
creating a Windows service
create a new service for persistence.
Decompiled code responsible for loading the payload from the binary’s resources,
Communication with the C&C is encrypted using AES in CBC mode
XORed with the first 4 bytes of the AES key used to encrypt the message.
encrypts communication with C&C using AES in CBC mode
using Windows Command Shell to execute the initial dropper.
use Registry Run key for persistence
inject it’s modules into various processes.
gathers username and computer name from victim machines and reports them to the C&C in initial message.
The attack revolves around a DLL sideloading
DLL sideloading scenario, the malicious loader (ffmpeg.dll) would replace the clean dependency;
DLL sideloading
DLL sideloading
encoded malware
encrypted payload
malicious encoded .ico payload
generate the HTTP request
these appear to be maliciously patched versions of the legitimate ffmpeg.dll
GetSystemTimeAsFileTime Api call
which initiates the payload download
malware tries to login and get access to the victim server via brute force.
tries to get access to the server via brute force
malware samples are packed with UPX Packer.
Upon unpacking a sample
the malware uses a set of credentials that is hard coded into the malware binary,
Hard-coded credentials for brute forcing.
from the decrypted configuration
The malware then de-XORs other strings, with the hard-coded key
Most of the strings are de-XOR’d in a function
simply de-XOR the entire binary
Also the de-XOR’d strings,
Once the malware has de-XOR’d all its strings, it invokes a method named go.
we find an XOR loop that decrypts this configuration.
as a hard-coded XOR key
we find an XOR loop
This produces strings including a commandline usage:
can be set via the command-line as well.
This parses command-line options
the data will be published on our TOR darknet sites.
--remove       self remove this file after work
this snippet of code invokes ptrace with PT_DENY_ATTACH (0x1f) which will kill the process if a debugger is currently attached,
the embedded .NET injector and PE payload(s).
embedded payloads of one of the IronPython scripts.
the main task of loading malware is done by an embedded process injector.
IronNetInjector is made of an IronPython script that contains a .NET injector and one or more payloads.
Contain an encrypted .NET injector and one or more encrypted PE payloads.
Embedded .NET injector and payload(s) are encoded with Base64 and encrypted with Rijndael.
script with embedded .NET injector and ComRAT payload
the embedded payloads in the IronPython scripts,
embedded malware:
the embedded files in the scripts
These scripts contain an embedded PE loader to execute an embedded malware payload.
the embedded .NET injector
which in turn injects the payload(s) into its own or a remote process.
contains the ability to inject .NET assemblies into unmanaged processes.
the payload is either loaded into its own process or a remote one.
remote process the payload gets injected to.
the second option is used with the PID of explorer.exe to load the ComRAT payload reflectively into the process.
the injector is its ability to load an assembly into an unmanaged process.
to load an assembly into an unmanaged process.
The method InjectAssembly is used to inject a .NET assembly into a native process
Function and variable names are obfuscated
Strings are encrypted
scripts are obfuscated to prevent easy detection.
Decoded IronPython script
the Rijndael decryption key is passed.
get decoded and decrypted
The decryption key is passed as an argument
full-blown PE injection tools able to load a native x86/64 payload reflectively into a remote process.
PowerShell Empire’s ReflectivePEInjection script
The method Invoke is used to inject a native PE into a remote process and InvokeVoid to call any exported function of the injected payload.
As a command line argument
Windows task XML file
The task is used to start an IronPython script
The task’s description is PythonUpdateSrvc and it runs either on Windows startup when a user logs in or when one of two system events get created:
the Windows task XML
The task file is then used to create a task which in turn starts a script when triggered.
a Windows task XML to start
the submitter collected the files from different places
This is accomplished with a native bootstrapper DLL, which gets injected into the remote process and prepares it so a .NET assembly can be injected afterwards.
DLL gets injected
The output is then parsed to the targeted process ID with the help of tasklist filters.
Contains the imported unmanaged function declarations and win32 structures/constants.
being able to use the .NET framework APIs directly from Python.
can use .NET framework APIs
use of the .NET framework APIs
when .NET framework APIs are used in the code
use of WMI to both store and persist the backdoor
Windows Management Instrumentation (WMI).
to use WMI for storage and\npersistence.
WMI provides many administrative capabilities\non local and remote systems, including querying system information,\nstarting and stopping processes, and setting conditional triggers.
WMI\ncan be accessed using a variety of tools, including the Windows WMI\nCommand-line (wmic.exe), or through APIs accessible to programming and\nscripting languages such as PowerShell.
WMI permanent event subscriptions can be used to trigger actions\nwhen specified conditions are met.
Subscriptions consist of three core WMI classes: a Filter, a\nConsumer, and a FilterToConsumerBinding.
WMI Consumers specify an\naction to be performed, including executing a command, running a\nscript, adding an entry to a log, or sending an email
Creating a WMI permanent event subscription
WMI Filters\ndefine conditions that will trigger a Consumer, including system\nstartup, the execution of a program,
then created a WMI event subscription in order to execute the\nbackdoor
use WMI to persist a backdoor and also store\nthe PowerShell backdoor code.
created a new\nWMI class and added a text property to it in order to store a string\nvalue.
The WMI component of the POSHSPY backdoor leverages a Filter to\nexecute the PowerShell component of the backdoor on a regular basis.
WMI Component
“BfeOnServiceStartTypeChange” WMI\nQuery Language (WQL) filter condition\nThe BfeOnServiceStartTypeChange Filter was\nbound to the CommandLineEventConsumer WindowsParentalControlsMigration.
legitimate WMI persistence
attacker use of WMI
WMI persistence.
decrypted, and executed the backdoor code
Decoded CommandLineTemplate PowerShell code
wrote the encrypted and base64-encoded PowerShell\nbackdoor code
base64-encoded PowerShell command.
executing PowerShell code as an EncodedCommand
to download and execute additional\nPowerShell code and Windows binaries
Downloading and executing PowerShell code
Encrypting communications using AES and RSA public key cryptography
Writing executables to a randomly-selected directory under Program Files, and naming the EXE to match the\nchosen directory name
Appending a file signature header to all encrypted data,
appended file\nheaders used to bypass content inspection made this backdoor difficult\nto identify
Word document lure requesting the user to run the VBA macro.
When opened, the user sees a social engineering image telling them that they must click the “Enable editing” button to see the document’s contents.
Packed DLL analysis
packing being used to obfuscate the malware.
there is indeed some sort of unpacking happening.
Although the unpacking procedure happens in multiple steps
As soon as the unpacked executable is running
An Examination of its Unpacking Routine
its unpacking routine
Once the “.tmp” file is found, it is moved and renamed to the Office templates folder
loaded using rundll32.exe.
As a second argument, the macro passes the entry function “DllUnregisterServer” to rundll32.exe so that the execution starts correctly.
runs rundll32.exe to load the malware.
executes it using rundll32.exe
Looking at the decrypted data
the decryption process starts
data that will be decrypted
The algorithm to decrypt the data is simple.
the second decryption stage occurs
the decrypted memory structure
Before the decryption starts
contains the decryption algorithm for the second stage
The output of this decryption
The decryption algorithm
the executable code used to decrypt the encrypted data
After successfully decrypting the C2 URLs
all the decrypted C2 URLs
the malware calls a decryption function
Although the decoding algorithm of the C2 response looks quite complex, it is actually Base64 decoding, followed by an XOR operation using the key 0x7A.
decryption function.
can be decrypted to an active malware download server
The API function located at the beginning of the memory section are resolved using GetProcAddress
Windows API functions
Windows API functions
After resolving the functions
The names of Windows API functions are stored in the first 150 bytes
several Windows API functions are resolved using GetProcAddress
memory structure contains executable code.
Data view of the section containing the encrypted malware.
The area after this contains encrypted data.
Structure of the encrypted section.
encrypted URLs contained in the malware itself.
the encrypted data
This technique is called self-injection or PE overwrite
This function obtains the username,
the computer name and the domain of infected system.
the computer architecture
generated based on the computer architecture.
The subsequent functions collect additional information such as the machine’s public IP address
To determine the command and control (C2) servers waiting for the data to be sent to, the malware calls a decryption function that uses the RC4 algorithm
After successfully decrypting the C2 URLs, the data is sent there using a HTTP POST request adding the constructed query string as data
making a HTTP GET request
the malware initiates a download, which delivers an executable
Its main purpose is to download and execute a second stage malware payload
Thread Execution Hijacking
Thread Execution Hijacking
The final execution method Hancitor supports is Thread Execution Hijacking.
The only difference is that the malware replaces the thread context with the downloaded executable and resumes it afterwards.
Process Hollowing
Process Hollowing
If the Process Hollowing method is used, a new svchost.exe process is created in a suspended state.
The malware then allocates new memory in the newly-created process, writes the executable to it and executes it in a new thread.
Process Injection method
the malware was distributed as email Word document attachments
then recursively searches through all local temp folders.
Query string containing system information before being sent to the C2.
The backdoor\nuses domain fronting to obfuscate its true C2 server
The fronted\ndomain is configured by an earlier stage of execution and the actual\ndomain is hard-coded in the backdoor.
PowerShell initiated the\nfirst connection to the fronted domain
communicates with its C2 server using HTTPS
its C2 server consists of\nJSON data exchanged via HTTP POST requests.
HTTP POST request that contains\nthe command output.
C2\nserver via a subsequent HTTP POST request
its C2 server via a\nsubsequent HTTP POST request.
its C2 server every five\nseconds via HTTP POST requests.
backdoor that supports commands, including screen capture
Upload a screen capture
keystroke capture
The backdoor writes captured\nkeystrokes to memory
continuously captures keystrokes
the keylogging utility
This attacker utilized an additional keylogging utility
The keylogging utility was configured\nto capture and record keystrokes to C:\ProgramData\psh\System32Log.txt.
Keylogger Deployment
keylogger
The backdoor may also download and execute\nadditional PowerShell commands from its command and control (C2) server.
Downloaded VBScript and PowerShell
a PowerShell script block was executed\nto download
PowerShell to connect to third-party file sharing\nsites to download the UltraVNC application
PowerShell to connect to third-party file sharing\nsites to download an NGROK utility
use UltraVNC to download two LNK\nfiles
used UltraVNC to download an in-memory dropper
using UltraVNC to download and store\na file
deployed additional tools
The Data field may contain RC4-encrypted, Base64-encoded command
The backdoor uses an RC4 key\nconfigured by an earlier stage of execution to encrypt and decrypt the\nData field
observed the RC4 key\nUwOdHsFXjdCOIrjTCfnblwEZ used for RC4 encryption and\ndecryption.
RC4-decrypts command data returned in\nthe Data field.
The dropper configures\nthe backdoor with a C2 server address, RC4 encryption key,
Base64-decodes
decryption.
decrypt the\nData field.
decrypts and executes in memory
embedded key to decrypt the source code
the deobfuscated SMOKEDHAM dropper.
Upload a screen capture to its C2\nserver
The backdoor writes captured\nkeystrokes to memory and uploads them to its C2 server
reg.exe add\nHKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
created a persistence mechanism for NGROK by adding\nVirtualHost.vbs to the WindNT value under the current users Run\nregistry key.
created a persistence mechanism for UltraVNC by adding the\napplication to the ConhostNT value under the current users Run\nregistry key.
reg.exe add\nHKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
store\na file named update.lnk in the %APPDATA%\Microsoft\Windows\Start\nMenu\Programs\Startup\ directory
the command line argument\nprovided
passed as an argument on the\ncommand line.
executed using the Command-Line Compiler.
launched with a command\nline
using Command Prompt.
backdoor source code is embedded as an encrypted\nstring.
whoami.exe
systeminfo.exe
reg.exe ADD\n'HKLM\SOFTWARE\Microsoft\Windows\nNT\CurrentVersion\Winlogon\SpecialAccounts\UserList
modifying\nTerminal Server registry key values
modifying the Local Security Authority (LSA)\nregistry key value
reg.exe ADD\n'HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server' /v\nfDenyTSConnections /t REG_DWORD /d 0 /f
reg.exe ADD\n'HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server' /v\nfSingleSessionPerUser /t REG_DWORD /d 0 /f
reg.exe ADD\nHKLM\SYSTEM\CurrentControlSet\Control\Lsa /v\nLimitBlankPasswordUse /t REG_DWORD /d 1 /f
modified the WDigest registry key value\nHKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\UseLogonCredential\nto enable credential caching.
to enable multiple Remote Desktop\nconnection sessions
the attacker was observed moving laterally to\ndifferent systems in the environment using Remote Desktop Protocol\n(RDP) connections.
attacker dump the LSASS process using Task\nManager to a file named lsass.DMP, and later, zip the dump into two\nfiles named lsass.zip and lsass2.zip located in the\nC:\ProgramData\psh\ directory.
LSASS Dumping
conducted credential harvesting\nvia dumping LSASS memory.
activity from Tor
hop points to enable their cyber operations while remaining anonymous.
“The Onion Router” (Tor) is often used by cyber threat actors for anonymity and C2.
resulted in confirmed compromises of internet-facing Federal Government agency systems.
resulted in confirmed compromises of internet-facing Federal Government agency systems.
the actors leveraging CVE-2019-19781 to compromise Citrix Application Delivery Controllers.
attack of a Remote Desktop Protocol on a public-facing server.
cyber threat actors using external proxy tools
These proxy tools may be commercially available infrastructure as a service (IaaS) or software as a service (SaaS) in the form of a web browser promising anonymity on the internet.
proxy tools depending on their intended use.
activity from a network proxy tool
Cyber threat actors also continue to identify large repositories of credentials that are available on the internet to enable brute-force attacks.
brute-force passwords.
threat actors using Mimikatz in conjunction with coin miner protocols and software.
The actors used Mimikatz to dump credentials from the OS using a variety of capabilities resident within the tool.
the actors using Mimikatz during their operations.
a brute-force attack of a Remote Desktop Protocol on a public-facing server.
such as a keystroke logger
file injection capability
actors to execute directory traversal attacks
or delete files
allows cyber threat actors to execute arbitrary system commands,
concealed programs and documents at innocuous-seeming locations on victim networks and in victim networks’ “recycle bins.”
The lures are designed to socially engineer the recipient to download and open an attached RAR file that contains either a Microsoft Compiled HTML Help (CHM) or Excel payload.
phishing emails that were used as lures to deliver the files
download further malware payloads
to download a next stage EXE payload using cURL
downloading of the next stage.
One scheduled task (shown below) runs every 15 minutes
"C:\Windows\System32\schtasks.exe" /create /sc MINUTE /mo 15 /TN
creates two different scheduled tasks.
Scheduled task
The second scheduled task created attempts to execute the payload downloaded by the other task: \n"C:\Windows\System32\schtasks.exe" /create /sc MINUTE /mo 20 /TN
create a scheduled task
"C:\Windows\System32\schtasks.exe" /create /sc minute /mo 15 /tn
used to create scheduled tasks for persistence
schtasks /create /tn WinSecurity /sc minute /mo 15
These payloads are compressed inside RAR files, this helps avoid static analysis techniques
The more common payloads contained within the RAR files are Microsoft Compiled HTML Help (CHM) files
The computer name
the computer name is sent to the C2
the username is also sent to the C2.
The computer name and the username is also sent to the C2.
the computer name is sent to the C2
plugins such as a keylogger,
remote access tool
file stealer
an encoded PowerShell command stage, obfuscating the activity further than just simple string concatenation.
Encoded PowerShell command
The decoded command
threat actors obtain initial access to networks is through the use of compromised valid credential pairs
often will search for directories on the network
remote desktop protocol (RDP) and secure shell (SSH) accesses
Threat actors will look for networks that have internet-facing servers running RDP and then exploit vulnerabilities in those servers
Exposed RDP servers are also abused by threat actors to gain initial access into a targets network.
use brute force password attacks
The server contained HTTP header data (SimpleHTTP/0.6 Python/3.8.10), indicating the use of a Python library called SIMPLEHTTPSERVER
The threat actor also engaged in brute-forcing against the victim's internal web services
brute forcing tool called FSCAN.
brute-force attacks on systems
brute forcing attempts on some of the internal FTP servers inside victim network
The database used a weak password and was susceptible to brute-force attacks.
threat actor used the Windows command-line arguments
received a command-line argument from attacker
Used to search for the string "DBPath" in all files within the current directory and its subdirectories
List of recently opened files and folders on the computer.
The threat actor uses stolen passwords from valid accounts
to escalate privileges using valid accounts
the reverse SOCKS proxy activity on the infected device using the open-source tool FRP.
After establishing the reverse SOCKS proxy connection,
The threat actor utilized open-source reverse proxy tools to expose local devices located behind a NAT or firewall, to the Internet.
Execution of FRP reverse SOCKS proxy on infected host.
Installation of malicious Windows service.
it will install a fake Windows service called “windowsupdate”
Malicious service installation is accomplished via the below command line argument:\nsc create WindowsUpdate binPath= C:\Windows\Temp\svchost.exe start= auto obj= LocalSystem DisplayName= windowsupdate
Maintain Presence via Windows Service Installation
To establish persistent remote access on the victim device, the threat actor abused Windows services to install modified version of Cobalt Strike payload
installed a second stage persistence backdoor on infected device by abusing Windows Services.
This service executes a malicious binary (Cobalt Strike Cat payload) under “C:\Windows\Temp\svchost.exe” every time the victim device is started.
Windows services ran with the highest privilege, NT AUTHORITY\SYSTEM and execute the malware automatically during system startup, allowing for remote access to the victim device with persistence.
the threat actor used private proxy addresses from a Chinese underground proxy IP solution called 'Tigercloud Club' to conceal their real IP address.
Reverse proxy tool
Reverse proxy tool
Threat actor uploaded the fast reverse proxy (FRP) binary
One of the main initial access vector is exploitation of publicly exposed web services.
Initial Compromise Through Exploiting Publicly Facing Applications
the threat actor primarily focuses on four different known remote code execution (RCE) vulnerabilities during their operations:•    CVE-2023-21839      Oracle WebLogic Server RCE [13]•    CVE-2021-3129      Laravel debug mode RCE [14]•    CVE-2020-2551      Oracle WebLogic RCE [15]•    CVE-2021-44228     Apache Log4j [16]
the victim IP address was publicly serving a web service that contained a phpMyAdmin database.
The threat actor primarily focused on exploiting four different remote code execution (RCE) vulnerabilities to target web services
Decrypting and exporting browser data
the decryption key for the ZIP folder and access the tool
distributed inside an encrypted ZIP folder.
executed the "tasklist /SVC" command to list all running processes on the victim device.
deleted the LaZagne binary after execution to avoid detection from the user's side.
The actor leveraged ONE-FOX - a collection of pentest tools - to copy binaries from actor´s system to the victim.
Recording keystrokes in real time with offline logging available
Downloading files remotely
the dropper then downloads a custom XMRig miner
a script to download, configure and execute
to download the XMRig payload.
pulls the XMRig payload
generating a script to decode the legitimate Mach-O file.
is decoded and unarchived
This value is decoded
The Logic Pro X dropper binary is deleted with the /tmp/ bundle
In order to unpack the legitimate binary,
binary unpacks a customized Mach-O
previously written Base64 file
Files are dropped/downloaded as Base64-encoded archives.
The script first deletes itself from the disk.
removes any files
deleted every time
The script then removes any files
script removes the i2pd Mach-O file from the disk.
Even though the scripts produce many on-disk artifacts, the dropper and scripts are quick to remove them
Files are deleted after use.
to proxy the miner’s network communications.
mining proxy.
The usage of a proxy allows authors to control all of their mining implants and their target pools via a centralized console
the mining proxy
command line arguments
is executed as a command line argument
The padded i2pd Mach-O file
pads the resulting Mach-O with a random number of \x00 bytes
binaries are padded with a random number of zero bytes to change its hash and expand its size.
is padded with a random number of \x00 bytes.
the user will continue to execute the dropper
The dropper is executed by the user.
As long as the dropper successfully launches its legitimate application
The dropper bundle in the applications folder appears legitimate,
The authors cleverly utilized these legitimate dependencies via symbolic links when dynamically creating the legitimate bundle in the temp folder.
The dropper is installed into a legitimate file path, posing as the legitimate application.
utilize legitimate file paths to mask their execution.
In order to appear as a working copy of Logic Pro X, the dropper contains a legitimate copy of the lure application
The mirrored bundle contains the legitimate application instead of the dropper binary.
to mirror all directories found in /Applications/Logic Pro X.app/Contents and /Applications/Logic Pro X.app/Contents/MacOS to their respective /tmp/ locations
The malicious dropper contains a legitimate version of the software and executes it to give the illusion of a properly behaving application.
a check using pgrep for Activity Monitor processes
This proxy server is located on the I2P network at the destination of the pool tunnel
config via the XMRig miner’s native API.
By modifying the below registry value EnableLUA to “0”
The ConsentPromptBehaviorAdmin key has been set to “0”, indicating that the behavior of the consent prompt for actions requiring administrator privileges has been modified
the ransomware modifies specific registry values
malware aims to deactivate User Account Control (UAC) on the target system
UAC BYPASS
to disable User Access Control (UAC), a security feature in Windows
By deactivating UAC, the ransomware gets elevated privileges without requiring user permission or administrator credentials
After bypassing UAC
the ransomware uses the FindFirstVolumeW() and FindNextVolumeW() API functions
using the FindFirstFileW() and FindNextFileW() API functions.
the malware leverages various functions from the CryptoAPI, including CryptAcquireContextW(), CryptImportKey(), CryptSetKeyParam(), and CryptEncrypt().
using the MoveFileExW() API function,
to search and identify accessible volumes on the targeted system.
the malware proceeds to identify files and directories for encryption by iterating through them
This function scans a specified path by finding all files within the given directory and its subdirectories.
then iterates over each volume to search for specific files related to virtual machines.
This function scans VM volumes on an ESXi server.
scanning files in a specified or generic path
then iterates over each volume to find files
command uses the Windows Management Instrumentation Command-line (WMIC)
This function is responsible for deleting all files and directories in the user’s trash folder.
by passing the file path to be encrypted as an argument.
It removes log files and temporary files from the root directory.
It also deletes the ransomware, script file, and ransom note (index.html), ensuring that no evidence remains on the compromised system.
It uses the esxcli command to list all VM processes
configuring autorun entries,
through legitimate remote access software such as AnyDesk
invoked the wave 2 ransomware immediately from the command line
both use CreateFile and WriteFile APIs
using DeviceControl API methods
use of the same DeviceControl API methods
DeviceControl API methods
DeviceControl API methods
ransomware attempts to decrypt
RC4 key for decryption
the RC4 decryption method uses CryptoAPI (CryptDecrypt) instead of the usual substitution box method
execute embedded scripts
Embedding of EldoS RawDisk driver inside the wiper malware
the threat actor embedded the signed raw disk driver in the wiper executable
the raw disk driver was embedded inside the malware
the download and launch of a suspicious batch file.
the actor introduced a downloader to fetch and spawn the next stage payload
the malicious document connects to the remote server and downloads the payload
install additional malware
They then returned 18 hours later to install further malware
when the malicious Word document opens it fetches the next payload from the remote server:
it fetched an additional script payload
a different method of fetching and executing the next stage payload
a file downloaded from the internet,
fetch the next stage payload.
If the fetched data by cURL command
Fetch the payload with cURL command
fetching the next stage payload
fetching a remote payload
fetches a payload from the embedded URL and loads it.
launch of a suspicious batch file.
Windows Batch script
the operator executed several Windows commands
cmd.exe /c
cmd /c
cmd /c
batch file
The batch file name
the scriptlet of the batch file
cmd.exe" /c
cmd.exe" /c
Windows Batch file
This script is for executing the PowerShell script via a Windows scheduled task
Windows displays a warning message when the user tries to open a file downloaded from the internet.
strategy to persuade the victim to execute the malicious shortcut file
executed when the victim double-clicked on the shortcut file
the executable ieinstal.exe was used to bypass UAC.
one victim in the UAE was attacked using a malicious Word document
to gather basic system information.
rundll32.exe
spawns it with the rundll32.exe command with the payload URL
Embedded files of ISO image
an encrypted Dump.bin file
downloader contains an encrypted configuration at the end of the file.
the supplied encrypted decoy document.
an encrypted decoy document
The PDF and executable files have numerous spaces before the file extension to hide it and allay suspicions.
decodes 0x3E8 bytes with that key
The decrypted data
loads the decrypted DLL file
The malware decrypts the configuration data with the RC4 algorithm using an embedded 64-byte key.
the malware decrypts the payload with a delivered 64-byte RC4 key.
the decrypted payload
checks for the names of the following antivirus vendors: Sophos, Kaspersky, Avast, Avira, Bitdefender, TrendMicro, and Windows Defender
If TrendMicro, BitDefender, or Windows Defender products are installed
If Windows Defender or Bitdefender Antivirus is installed on the victim’s computer
depending on the antivirus installed.
the malware can disable the functionalities of EDR/AV products.
injects the fetched payload into the explorer.exe process
The Blockchain.pdf file is a malicious HTML application file
This evasion technique overwrites the .text section of the pre-loaded ntdll library with the freshly loaded one so that the hooked API addresses are recovered with the original API address
The campaigns used a variety of email attachments such as Microsoft OneNote attachments and somewhat rare to see .URL attachments,
This campaign began with thread hijacked emails which contained HTML attachments.
The HTML attachments used HTML Smuggling to drop a password protected, zipped Windows Script File (WSF).
to download and execute an intermediate script which then downloaded and executed the Standard IcedID Loader using a non-standard export “init”.
used to download and execute an IcedID loader.
opened it would initiate the download of a batch (.bat) file.
The batch file would download and execute
When opened, the OneNote document instructed the recipient to "open" the document by double-clicking the button displayed in the OneNote document.
file was concealed beneath the "open" text which, if clicked, executed the HTA file.
containing the encrypted bot and DLL loader.
download of a batch (.bat) file.
The batch file would download and execute
that contained various bat files,
execute an IcedID loader with rundll32
loader with rundll32
Config decryption within IcedID Lite Loader.
Decryption of the URI within
The domain is decrypted from the configuration and the URI path is decrypted within the function
Decryption is the same across both
This pattern of decrypting strings
the Forked Loader decrypts and copies strings into global variables where they will be later used to resolve required functions.
Decryption of the config buffer in the Forked Loader.
With the config decrypted
The response gets decrypted with the IcedID decryption routine,
Contains code to decrypt strings and domains
String decryption of the DLL names
With the DLL strings decrypted, the malware then decrypts the loader configuration by taking the first 64 bytes and XORing it against the next 64 bytes.
The first four bytes of the decrypted buffer will contain the project identifier
This function decrypts strings
decrypts the DLL strings to be used later to resolve handles to the DLLs needed
The strings are decrypted in the same algorithm where the data is split into DWORDs and XOR’d against a random key.
String decryption for the DLL names needed for execution.
Decryption of “Lite Loader”" domains.
a function is called that decrypts strings that
there are two domains that are decrypted:
With the domain names decrypted, the DLL Loader decrypts 10 strings that should be URIs to be appended to the domains.
Decryption of “Lite Loader” filenames.
After the strings are decrypted
Base64 decoding this value
following base64 decoded header
showing the decrypted botpack structure.
that makes the HTTP request.
sends an HTTP request that will contain the encrypted bot response.
contain the host information
The Base-64 encoded segment
may also deliver a weaponized Office document that executes the ReconShark reconnaissance malware.
to distribute password-protected weaponized Office documents
Office documents weaponized
hardware information.
to use this tool for remote management of its infrastructure.
webshells, mostly obfuscated,
the hacker also changes the content of the file RedirSuiteServiceProxy.aspx to webshell content.
RedirSuiteServiceProxy.aspx is a legitimate file name available in the Exchange server.
the attacker downloads files,
drops suspicious files on the attacked servers
collecting information on the system,
“cmd” /c
"cmd" /c
the standard Windows command line tool cmd.exe.
Delete file or folder
the hacker also injects malicious DLLs into the memory,
the DLL was injected into the memory of the svchost.exe process
executes these files through WMIC.
, the above files no longer exist on the compromised system, possibly due to the hacker’s evidence deletion.
Decrypt the request received using AES algorithm
After decoding,
creates a listener that listens for connections to port 443 at the path https://*:
This method is responsible for collecting system information
Information such as operating system architecture, framework version, operating system version, etc.
listing directory and file information in the format\n D|-|<Date created> |<Date modified> |<folder or file name>
reading files
Sending and receiving data with C2 using the RC4 encryption algorithm where the key will be generated at runtime.
delivered via phishing email as an attachment
The archives often include a JavaScript (.js) file
likely exploited known vulnerabilities in unpatched applications for initial access
gains access to the targets through remote exploitation of an unpatched internet-facing device.
to perform initial intrusion leveraging exposed vulnerable applications, for example, continuing to exploit Log4j 2 vulnerabilities in unpatched systems in
Installing legitimate remote access tools, such as RPort, Ligolo and eHorus
common native Windows tools and commands such as netstat
Windows Management Instrumentation (WMI) to launch commands on devices
Remote scheduled tasks to launch their customized PowerShell backdoor
to register a scheduled task used to launch the ransomware payload.
The threat actors consistently perform extensive lateral movement actions using the acquired credentials within a targeted environment.
GPO was leveraged again to register a scheduled task used to launch the ransomware payload.
first interfered with security tools using Group Policy Objects (GPO).
the threat actors leveraged highly privileged credentials and access to domain controllers
The threat actors used the compromised administrator account
the threat actors had to first compromise two privileged accounts and leverage them to manipulate the Azure Active Directory (Azure AD) Connect agent.
the threat actors first used a compromised, highly privileged account to access the device where the Azure Active Directory (Azure AD) Connect agent is installed.
The first account was the compromised Azure AD Connector account,
the threat actors were observed using compromised credentials to access the Azure AD Connect device.
authentication from a known attacker IP address into the Azure AD Connector cloud account.
the threat actors executed multiple actions in the cloud using two privileged accounts.
The Azure AD Connector account and the compromised administrator account were then used to perform
a successful sign-in to the Microsoft Azure environment was observed.
The threat actors then used these credentials to pivot from the on-premises environment to the Azure AD environment.
the threat actors leveraged RDP for access into the account.
the threat actors accessed it through RDP, which is an open session that evades MFA blocking their activities.
Those files will still get executed, if the user clicks on run
Full path to file and hidden files
As LSASS dumps are nowadays recognized by the dump file itself
LSASS dump in c:\tmp detected and deleted
LSASS dump in the WebDAV detected
done via the GetAsyncKeyState API,
this is done via the popen API
uses Windows API functions to execute files
This is done via the GetAsyncKeyState API, with keystrokes being logged
keylogging are enabled by default,
logs keystrokes for windows with titles containing substrings specified in its configuration
Window titles to keylog
can log keystrokes.
Screenshots are also taken at a configurable interval; the default is once every 30 seconds.
Screenshots and keylogging are enabled by default,
can capture screenshots
the shellcode is stored in files instead of the registry, and the stored shellcode is loaded and executed on Dolphin’s startup
The backdoor periodically checks and creates its own persistence by making sure that Step 1 of the loader is run every time the system is started, via a registry Run value, in the same way as in the installer:\nHKCU\Software\Microsoft\Windows\CurrentVersion\Run\<random_run_name>\”%appdata%\Python27({32|64})\pythonw.exe” “<loader_step_1>” “<loader_encrypted_step_2>”
uses Run keys for persistence of its loader
can execute shell commands
creates directory listings
The command to get specific files
It creates directory listings
to get files from drives
it searches the drives of compromised systems for interesting files
can obtain file and directory listings.
The following file extensions of interest, specific to media, documents, emails, and certificates,
can collect files from local drives.
Username
obtains the victim’s username.
Computer name
RAM size and usage
OS version
obtains various system information including OS version, computer name and RAM size.
List of installed security products
obtains a list of installed security software.
Local and external IP address
obtains the device’s local and external IP address.
XOR-decrypts an embedded PE file
XOR-decrypts further shellcode carried within itself,
XOR-decrypts its contents,
a decrypted configuration
injects it into the created process
in a specified separate process that is created and injected.
and inject processes.
it creates a one-time scheduled task.
uses a temporary scheduled task to start after installation.
After execution, the output of commands is uploaded.
exfiltrates data to Google Drive storage
it searches the drives of compromised systems for interesting files and exfiltrates them to Google Drive.
exfiltrates data to Google Drive.
The shellcode is stored in the registry,
sending an HTTP POST request
uses HTTPS to communicate with Google Drive.
staging the data in encrypted ZIP archives before upload.
stages collected data in a directory before exfiltration
The content is encrypted using AES CBC with random 16-byte keys and IVs,
Most strings in this version are base64 encoded.
The base64-encoded strings were plaintext again in this version.
has encrypted components.
another shellcode, XOR-decrypts an embedded PE file – the Dolphin backdoor – and loads and executes it using a custom PE loader.
which is vulnerable to a DLL side-loading vulnerability, and loads a file
sideloading different DLL names, and multiple binary files names being loaded by those DLLs.
the executables and sideloaded files
Side-loaded DLL name
a threat actor abusing a sideloading vulnerability
Name of the malicious side-loaded DLL
Name of the executable vulnerable to side loading
seemingly legitimate executables and their respective sideloaded files
encoded shellcode
Creates a memory section with the DES-encrypted malware configuration
to obfuscate their malware.
used VMProtect to obfuscate one of them.
that decompresses and loads the first stage in memory.
shellcode decompressing and loading
there was only one stage being decrypted in memory
the malware decrypts the saved passwords
and then decrypts them
and then decrypts the content
calls Stage 1 again via process hollowing with four parameters
It then runs Stage 2 via process hollowing.
creates a registry key
a service that launches the moved executable rc.exe with one parameter.
Screenshot grab
Drive information retrieval
browses a directory
Process manager (browses and terminates processes)
Current process ID
deletes,
uploads, downloads a file
Command execution
by calling the GetNetworkParams API function
Collected machine information includes the following:\nRandomly generated GUID\nHostname
Processor architecture
Operating system version
Username
Local IP address and port used to send the network packet
The configuration is encrypted with a hardcoded DES key and is a few bytes long
the malware retrieves information on the infected machine and sends it to the C&C encrypted with DES.
information is sent to the C&C, encrypted with a hardcoded key and DES CBC algorithm:
the malware retrieves information on the infected machine and sends it to the C&C
Then, the malware retrieves information on the compromised computer and sends it to the C&C.
used as a lure to entice the victim into opening the malicious file.
to extract the URL, login, and password fields from the file
Name of the hardcoded directory where files are copied
The malware also established persistence on the host with the creation of a registry run key.
persistence was achieved by creating a ‘Run’ key
These files were transferred to the domain controller over SMB.
dumped lsass memory on the domain controller.
We observed a process created by Cobalt Strike accessing lsass.exe
is a known indicator of such tools as Mimikatz
most likely using credentials gathered by the previous LSASS access.
then proceeded to access lsass memory on the host to extract credentials.
the threat actor became active by initiating a proxied RDP connection via the Cobalt Strike beacon to the domain controller.
after completing RDP connections to various hosts on the network
which were started via their interactive RDP session
RDP was also used by the threat actor
The threat actor was able to RDP to a backup server
running processes were reviewed
the threat actors checked running processes on the accessed hosts via taskmanager
checking on running tasks,
the new drive contained a LNK file 6570872.lnk and hidden folder “me”.
The contents of hidden folder “me”, included several files and folders that were used for the execution
the folder included a legitimate copy of rundll32.exe
rundll32.exe binary downloaded approximately 0.4 MB of data.
using a renamed copy of rundll32.
Batch script to run
file would execute a batch script
"C:\Windows\syswow64\cmd.exe" /C
An instance of cmd.exe was launched through explorer.exe which ran the following command
cmd.exe session
The threat actor also used a batch script to collect a list of all computer objects on the domain using C:\Windows\system32\cmd.exe /C adcomp.bat which contained the PowerShell command:
Once the user had mounted the ISO and the LNK file was executed by the user, the complex execution flow started.
The names of the registry values changed
The last registry key was used to store additional PowerShell code.
This script called a combination of QueueUserAPC, GetCurrentThreadId, OpenThread, and VirtualAlloc
the threat actor injected into various processes
reg.exe query
started a BITS job to download a Cobalt Strike beacon
whoami
whoami  /groups
ipconfig /all
threat actor first ran some initial discovery on the host using built-in Windows utilities like ipconfig
systeminfo
systeminfo
WMI was used to pivot to a domain controller on the network.
The actor leveraged Impacket’s wmiexec.py to execute commands with a semi-interactive shell
interacts with remote endpoints via WMI
a number of WMI requests via DCERPC from one endpoint to a target endpoint based on the ports.
the ‘Powershell.exe’ process initiated the WMI requests.
One of the observed commands invoked via WMI was ‘firefox.exe’.
The commands executed included directory traversal,
Tool Used to Steal Sensitive Information
proxying the traffic
initiating a proxied
Several HTTP Post events were observed to the identified domains
HTTP stream containing the content
The POST event included a MIME part indicating file upload
The file that was uploaded 775E.bin was deleted by the injected ‘Explorer.exe’ process from the target endpoint
The threat actor was able to RDP to a backup server using the admin credentials they acquired.
This script called a combination of QueueUserAPC, GetCurrentThreadId, OpenThread, and VirtualAlloc to perform process injection of shellcode
shellcode stored in Base64.
The mounted file contains a hidden folder
a 200+MB padded file
padding the contents with benign data
It included a standalone file padded with over 200MB of blank spaces, likely to impede analysis of the decompressed ISO file.
executes a CMD file
The CMD file contains commands
which use certutil (renamed here as slaughterhouse.exe) to decode
The decoded DLL
thus requires two rounds of decoding using certutil.
chaining together a series of scripts to decode
The victim double clicks the ISO to mount it
Victims can be lured into clicking executable content including binaries, scripts or shortcut files masquerading as benign filetypes such as PDFs or folders.
DLL is then executed using rundll32
and injects Qakbot into wermgr.exe.
This file is base64 twice,
or unpack the final payload
modifies registry keys to maintain persistence,
Modifies the Windows registry
modifies the Windows Registry to allow remote desktop connections
establishes persistence through the creation of two keys in CurrentVersion\Run.
Creates registry key for persistence only
Creates two registry keys for persistence
Keys found in CurrentVersion\Run contain references to programs that will execute when a user logs in.
operators install and execute remote access tools such as Splashtop on targeted systems.
remote monitoring and management (RMM) software
operators use Splashtop to transfer malicious tools from computer to computer in the victim’s environment.
It copies other malicious batch and EXE files from a compromised internal Server Message Block (SMB) server to the newly created temp folder
operators utilize RDP to move laterally in the victim’s environment.
Modifies the Windows registry to allow remote desktop connections.
operators open up an Remote Desktop Protocol (RDP) port
operators use Mimikatz to dump passwords.
operators use Mimikatz to dump passwords from LSASS.
Mimikatz, which is a tool used for extracting sensitive information such as passwords and authentication credentials from a Windows operating system.
Mimikatz being leveraged maliciously by threat actors in the following ways:\nCredential Loading\nMimikatz loads credentials from various sources such as Windows memory, Local Security Authority Subsystem Service (LSASS) process
Mimikatz allows the user to manipulate the dumped credentials,
is a small, UPX-packed password protected binary
This version of Mimikatz has been compressed using UPX
While UPX is often legitimately used to reduce file size, we have observed threat actors utilizing UPX and other packing programs to evade static detection of the underlying payload.
operators use UPX to pack DC2.exe and DC4.exe to avoid static signature detection.
the batch file makes the following changes to the system
executes an embedded batch file.
is a batch script
is a batch script that creates a new user
creates a batch script that,
creates a batch script
Disables the User Account Control (UAC)
Attempting to use sc stop and taskkill to stop over 100 services related to various areas ranging from remote desktop tools to Windows Defender
The HTML code in this file contains embedded JavaScript functionality,
cleanup script used to remove evidence of the attack on a system
cleanup scripts from other threat actors are usually smaller and more specific to the tools used by that actor.
adds an additional layer of obfuscation to the code
password-protected executables to obfuscate malware
operators used Splashtop – a remote access and management (RMM) tool – to transfer the following malware into the target’s environment.
operators use Splashtop to move laterally and transfer malware between compromised hosts in the victim’s environment.
utilize Splashtop to transfer netscan.exe, netscan.lic, netscan.xml, newuser.bat, start.bat and turnoff.bat.
operators delete files such as mim.exe, mim32.exe, zam.exe and zam.bat to cover their tracks
hid the installer for Advanced Port Scanner within Inno Setup installer to evade static signature detection.
employing a combination of outdated Microsoft Office document vulnerabilities
exploit vulnerabilities in Microsoft Word’s Equation Editor
leverages a specific set of vulnerabilities, including CVE-2018-0802, CVE-2018-0798, and CVE-2017-11882, within the Equation Editor of Microsoft Office
employs a forged document linked to G7 to target various governments within the G20 forum.
spam email comprising an attached MS Office document
employ the remote template injection method to retrieve the next stage of the malware from the TA’s Command-and-Control (C&C) server.
download of a new payload from the attacker’s remote server
download a backdoor module.
downloads and executes a malicious backdoor
enables the TAs to create customized documents containing embedded objects that exploit vulnerabilities in Microsoft Word’s Equation Editor
drops an embedded payload, which is a DLL file
includes both an encrypted payload and shellcode
encrypts the collected information using RC4 encryption with the key “xkYgv127” and encodes it using base64.
proceeds to decrypt
scheduled task entry,
executes the export function “StartA” from the DLL
using rundll32.exe
utilizing the “rundll32.exe” command
loader is executed through rundll32.exe
hostname, operating system name, OS version, username,
Gather computer-specific information such as computer name, username, gateway address, network adapter details, Windows version, and user type
Internet information,
Retrieve TCP/UDP tables
the presence of any installed anti-virus software on the machine.
encrypted data is then exfiltrated using the below C&C URL
encrypted data is then exfiltrated using the below C&C URL
C&C server responds with the next stage executable
loader establishes a connection with a C&C server in the final stage of the attack.
Capture screenshots of victims’ system
Obtain information about processes and services running on the machine
Retrieve information about registry keys
using the remote process execution tool PSExec to execute batch files
Copy down batch scriptsExecute batch scripts
defaultChanges the Windows Shell from Explorer to their malicious script
exe└──cmd.exe: C:\Windows\system32\cmd.exe /c ""rdp.bat"
executes the shell (file2.bat),
tries to start its defined shell which has been swapped to a batch script (file2.bat) by the malicious actor.
Command line flags may be used to change this behavior and invoke one or more of the modules.
that would cause registry changes
reg.exe: reg  add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v "fDenyTSConnections" /t REG_DWORD /d 0 /
Sets various registry values
to enable Remote Desktop sessions (RDP) using reg.exe.
the malicious actor retrieved system administration tools and malicious payloads by using the Background Intelligent Transfer Service
Storing the ransomware within a 7zip encrypted archive
encrypted archive containing the ransomware,
a decompression utility to extract the ransomware
drop the defenses of the victim, inhibit monitoring, disable networking
stops specific defensive services (Windows Defender, etc)
Will also skip enumeration and stopping of antivirus software.-
to authenticate to the site behind the onion link on the TOR network
 ShellExecuteA is also used to launch
API call attempts to processes:
 The local module utilizes the LookupPrivilegeValueW and AdjustTokenPrivileges that Windows API calls on its own process via GetCurrentProcess and OpenProcessToken to obtain SeDebugPrivilege privileges.
using Active Directory group policies allows the malicious actor to hit all systems in the environment for as long as that group policy is active in the victim’s environment.
Potential Process Hollowing
more sophisticated encryption
this technique for encryption-decryption is easily more discernable during analysis because both the encrypted data and the mapping are in the same file
for its execution technique of hiding malicious code inside log files.
The bytes of the encrypted section is a specific index on the byte map
Though this is a very rigid method of hiding its codes,
uses byte remapping to ensure that the shellcode cannot be easily decrypted without the correct byte map
usually the encrypted payload
shows that their offsets within the encrypted region remain the same since they result in a similar shellcode even if they are composed of different bytes per binary.
The malware checks if there are monitoring tools, specifically Process Monitor, running in the current machine with the following strings:\nprocmon\nprocmon64\nprocmon64a
checks for a few installed and active antivirus products, namely:\nWindows Defender\nESET
the malware proceeds to decrypt the PowerShell code
Furthermore, since the data to be decrypted is in another file, the routine becomes even more difficult to investigate, as analysts would need the correct pair for decryption.
Afterward, the shellcode will then decrypt and load the main ViperSoftX DLL embedded within the carrier.
Moreover, all the strings, binaries, and other relevant data within the ViperSoftX DLL also gets decrypted the same way.
The actual bytes of the decrypted shellcode
to crawl through different paths in the system
scans for these cryptocurrency wallets in local directories:\nArmory\nAtomic Wallet\nBinance\nBitcoin\nBlockstream Green\nCoinomi\nDelta\nElectrum\nExodus\nGuarda\nJaxx Liberty\nLedger Live\nTrezor Bridge
the use of DLL sideloading for its arrival and execution technique.
found in the sideloaded DLL.
the sideloaded DLL),
DLL sideloading
While other cybercriminals use sideloading to load another non-binary component
We have also found that each sideloader DLL has its own pair of executable and byte map,
It still downloads a PowerShell code
or Windows Scripting
File-packed Magniber ransomware
To obtain the credentials, the team took a snapshot of lsass.exe
with a tool called nanodump, exported the output, and processed the output offline with Mimikatz.
The team obtained the cached credentials from a SharePoint server account by taking a snapshot of lsass.exe with a tool called nanodump, exporting the output and processing the output offline with Mimikatz.
They then used forged credentials to move to multiple hosts across different sites in the environment and eventually gained root access to all workstations connected to the organization’s mobile device management (MDM) server.
The team used this root access to move laterally to SBS-connected workstations.
team attempted to determine valid accounts based on group name and purpose
The team attempted to leverage these credentials
From that host, the team moved laterally to a misconfigured server, from which they compromised the domain controller (DC).
with a button, which, when clicked, downloaded a “malicious” ISO file
After the download, another button appeared, which, when clicked, executed the file.
Users downloaded and executed the team’s initial access payloads after clicking buttons to trigger download and execution.
they used compromised workstation and domain admin accounts
Use a previously compromised workstation admin account
Use a previously compromised domain admin account
the team leveraged compromised workstation and domain admin accounts to execute a payload
the team compromised a domain admin account and used it to laterally to multiple workstations and the DC.
they used compromised workstation and domain admin accounts to upload a payload via SMB on several target Workstations and the DC.
Use a previously compromised workstation admin account to upload and execute a payload via SMB
Use a previously compromised domain admin account to upload and execute a payload via SMB
The team’s C2 redirectors used HTTPS reverse proxies to redirect C2 traffic.
The team used HTTPS
the HTTPS beacon
post-exploit tool that leverages HTTP protocols for C2 traffic.
used HTTPS reverse proxies to redirect C2 traffic
Establish a session that originates from a target Workstation system directly to an external host over a clear text protocol, such as HTTP.
Establish a session that originates from a target Domain Controller system directly to an external host over a clear text protocol, such as HTTP.
used HTTPS reverse proxies to redirect C2 traffic.
the team uploaded and executed well-known malicious files
to download and execute a payload
Upload and execute a well-known (e.g., with a signature) malicious file to a target DC system
used redirectors to redirect C2 traffic between the target organization’s network and the team’s C2 servers.
used HTTPS reverse proxies to redirect C2 traffic between target network and the team’s Cobalt Strike servers.
The team used these platforms to create flexible and dynamic redirect servers to send traffic to the team’s Cobalt Strike servers
The redirectors used HTTPS reverse proxies to redirect C2 traffic between the target organization’s network and the Cobalt Strike team servers
The team used domain fronting to disguise outbound traffic in order to diversify the domains with which the persistent beacons were communicating.
The team used domain fronting [T1090.004] to disguise outbound traffic in order to diversify the domains with which the persistent beacons were communicating
This technique, which also leverages CDNs, allows the beacon to appear to connect to third-party domains, such as nytimes.com, when it is actually connecting to the team’s redirect server
This technique leverages CDNs associated with high-reputation domains so that the malicious traffic appears to be directed towards a reputation domain but is actually redirected to the red team-controlled Cobalt Strike servers.
which prompted DC authentication to the SharePoint server using the server’s NTLM hash. The team then deployed Rubeus to capture the incoming DC TGT
The team performed an NTLM-relay attack to obtain the DC’s TGT, followed by a golden ticket attack on a SharePoint server with Unconstrained Delegation to gain the ability to impersonate any Site 1 AD account.
The team ran the DFSCoerce python script, which prompted DC authentication to a server using the server’s NTLM hash. The team then deployed Rubeus to capture the incoming DC TGT.
The team ran the DFSCoerce python script, which prompted DC authentication to a server using the server’s NTLM hash
In some instances, they used Windows Management Instrumentation (WMI) Event Subscriptions
The team used WMI Event Subscriptions to move laterally between sites.
command-line tool
which stored credentials in a database file.
searched files on the server, and found plaintext credentials
the plaintext credentials in PowerShell scripts
the team found a .txt file containing plaintext credentials for the user
The team found plaintext credentials to an API user account stored in PowerShell scripts on an MDM server.
Using the pattern discovered in these credentials, the team was able to crack the user’s workstation account password
The team cracked a user’s workstation account password after learning the user’s patterns from plaintext credentials.
Detect and Identify source IP
Detect and Identify source IP
Detect and identify source IP
Detect and identify source IP
Detect and identify source IP
Windows Service Creation
Windows Service Creation
Windows Service Creation
execute a payload via SMB and Windows Service Creation, respectively, on several target Workstations.
execute a payload via SMB and Windows Service Creation, respectively, on a target DC.
execute a payload via Windows Service Creation on target workstations and the DC.
The team used the organization’s MDM system to gain root access to machines across the organization’s network without being detected.
The krbtgt account is a domain default account
Use of non-secure default configurations
The organization used default configurations for hosts with Windows Server 2012 R2.
The default configuration allows unprivileged users to query group membership of local administrator groups
The red team used and identified several standard user accounts with administrative access from a Windows Server 2012 R2 SharePoint server.
The team discovered several standard user accounts that have local administrator access to critical servers.
This misconfiguration allowed the team to use the low-level access of a phished user to move laterally to an Unconstrained Delegation host and compromise the entire domain.
If a user with administrative access is compromised, an actor can access servers without needing to elevate privileges
Some workstations allowed unprivileged accounts to have local administrator access
keylogged a user during a mandatory password change
spear phishing attachments.
spear phishing attachments for Initial Access
As attackers can quickly change spear phishing attachments
suspicious email attachments or other phishing techniques.
modification of Registry Keys/Startup folder for persistence
Using valid accounts
valid accounts
and protocols, such as for Remote Desktop Protocol
used to download files…
The second stage payload, which was later determined to likely be the penetration testing framework "Brute Ratel," was then downloaded via a connection
“RClone” was downloaded on the file servers
which allowed the threat actor to move freely between domains.
Two ".bat" files were sent throughout the organization.
before running the ".cmd" file contained within the ISO.
this CMD file calls the "db" file. In both samples,
".bat" files
USING ".BAT" FILES
The two ".bat" files that were sent
"cc.bat" is a simple script
"w.bat" as viewed through the bash command "cat":
these are the same commands as observed in the ".bat" files:
Both were designed to turn off antivirus and anti-malware software.
".bat" files designed to disable Cisco AMP / Microsoft Defender
the command "net stop Cisco AMP".
showing the “uninstall” commands for Windows Defender:
DISABLING ANTIVIRUS/MALWARE SOFTWARE USING ".BAT" FILES
were both designed to turn off Antivirus and Antimalware software.
designed to stop Cisco AMP.
Stopping Cisco AMP /  Disabling Microsoft Defender
From the two phishing emails, both attachments contain similar malware.
The phishing attachment was submitted to the target in a response to an ongoing conversation
When downloaded, the initial attachment is a local HTML file.
were able to be decrypted by leveraging the decryption script
adds itself to a scheduled task.
The emulated C2 Server is now running an HTTPS server
shows that this connection was likely HTTPS
the communication is consistent with HTTP/S traffic.
on TCP port 2222.
most of the connection attempts to the C2 IP’s are conducted over TCP port 443.
Due to TCP port 2222’s common use as an alternate port for SSH communication, the Malware Analyst recorded a manual SSH connection to the emulated C2 host
some data exfiltration or interaction with the downloaded second stage from the C2.
show the transfer of files using SMB.
Files commonly observed transferred via SMB include
Showing the Transfer of Cobalt Strike Beacons using RDPClip:
allows for lateral movement leveraging RPC to create SMB traffic.
indicating the use of Remote Desktop Protocol.[
Showing the Transfer of Cobalt Strike Beacons using RDPClip:
the use of RDP by the Threat Actor
The second encoded Base64 string was not only base64 but also Gziped for size and obfuscation.
has some simple but clever obfuscation in place.
This shows the decoded and uncompressed data.
payload decoder from Github
used to decode the body
Task manager was then use to reveal the service running on PID 3488,
requests using RC4 encryption
was abused by the attacker to steal client data.
the malware copied itself to "$CURRENTUSER\AppData\Roaming\Microsoft\Isoaahffo\djkuuhd.dll," as confirmed by the file's hashes shown below, and sets itself to auto run.
the process imbedded itself into wermgr.exe, the Windows Error Reporting Manager (Process ID 6660).
This uses a mixture of disguising the ASCII as UTF-16 via manipulating the start of the file, as well as obfuscating the data using a simple cypher.
running the malware sets itself up as the service
after reaching the local DC, the attacker was able to gain a better lay of the land and observe the presence of the other two domains.
a technique leveraging the Windows Management Instrumentation (WMI) service to execute malicious code.
indicating that the user deleted the collected data.
group utilizes sideloading
DLL for sideloading
The group uses DLL sideloading
detect and remove Alibaba Cloud Security from compromised instances
relied on their victims to execute the malicious MSI installers
uses cmd.exe to download files from Alibaba Cloud Object Storage Service.
executes OSSUTIL (included in the installer package as ssu.exe) to download files
use API calls such as VirtualAlloc to load and execute malicious components into memory
invokes the Windows API function DisableThreadLibraryCalls
create scheduled tasks to achieve persistence
Create scheduled tasks to execute the loader and updater components
scheduled tasks created for the updater,
four scheduled tasks are created:
creates a registry Run key to achieve persistence
use various encryption algorithms to hide payloads and strings.
execute an encrypted payload located in the embedded DLL
contains an XOR-encrypted payload, divided into three files
encrypted with a different, single byte XOR key
use dynamic API resolution to avoid detection.
calling an export function of the DLL
reconstructs the imports table of the DLL and calls the DllEntryPoint,
the DLL will find the address of an export function called SVP7, which contains the entry point of the malware,
used DLL side-loading to execute their malicious payloads
side-loading a malicious DLL, libpng13.dll
by side-loading dr.dll, used by a legitimate, signed binary
, side-loaded by the same legitimate executable
contains shellcode and an embedded DLL file that loads FatalRAT
contains an embedded DLL
execute an encrypted payload located in the embedded DLL
has keylogger functionalities
Capture keystrokes
encrypts data with a custom encryption algorithm before it is sent to the C&C server.
uses TCP for C&C communications.
exfiltrates data over the same channel used for C&C
Drop a file named ossutilconfig in the %USERPROFILE% directory
Drop and execute the legitimate installer in C:\Program Files\Common Files (see CommonFiles64Folder).
by side-loading dr.dll, used by a legitimate, signed binary
The original libpng13.dll is also included in the installer package (renamed to what appears to be a random name) because the malicious DLL forwards its exported functions to the original DLL.
download files from an attacker-controlled bucket in Alibaba Cloud
download and execute further shellcode
obfuscated the loader with many calls to a function that just prints some hardcoded values
decrypt,
decrypts the payload is the same as the function used in FatalRAT to decrypt its configuration
decrypt its configuration strings
the decompiled code used to decrypt strings
Decompiled code of a function used by a FatalRAT
using a variety of software packers
one Zip contained a benign file named screenshot1242.jpeg and another contained a file named privatecopy.pdf.
When someone tries to double-click these decoy files, Windows (or the application mapped to the relevant filetype) throws an error because the file isn’t the type of file it appears to be
The target would then, naturally, double click the other file in the Zip archive
command pulls down a Visual Basic script, drops it into the C:\Windows\Tasks folder, and executes it.
90 other encrypted
 A heavily obfuscated VBS
The initial infector is a Visual Basic script, heavily obfuscated
A block of base64-encoded, encrypted data comprises almost 150KB of that script,
segments of base64 data
along with code that decodes and decrypts the block of base64.
When decoded, the content of the Ir8 variable (a segment of which is shown below) turns out to be just another encoded PowerShell script, which the VBS decodes and then executes.
The PowerShell script decoded from the Ir8 variable uses Reflection.
performs a BXOR to decode the bytes
for the Ir8 script to decode.
These work in tandem to insert data into the Windows Registry
The concatenated segments of base64 data from O7 get inserted into the Registry,
to load the final payload into memory from a Registry value without
It created a Run key in the Registry
And that Run key references a different Registry key
On one machine, we found that the malware injected itself, using process hollowing, into ielowutil.exe
obfuscated with legitimate resources
encrypted stack strings
Embedded Resource
shellcode from the .data section
shellcode that was stored in the .data section is now stored in the .rsc section
advapi32.CryptHashData
will create a key using advapi32.CryptDeriveKey
advapi32.CryptEncrypt
kernel32.LoadLibraryA, kernel32.GetProcAddress, kernel32.VirtualAlloc, kernel32.VirtualProtect and ntdll.ZwFlushInstructionCache
kernel32.VirtualALloc
kernel32.VirtualProtect,
kernel32.GetLastError
kernel32.CreateMutexA
wininet.HttpSendRequestA,
shellcode injection
copy each PE section one at a time
creating another PE in memory,
injecting a PE executable
handle to the current process for the purpose of allocating memory with PAGE_EXECUTE_READWRITE permissions
decrypt the shellcode
decyrpt its C2 configuration
get a pointer to the encrypted shellcode and to decrypt it have been broken out into their own separate functions
will need to resolve these APIs dynamically to interact with the Windows operating system
resolving many different Windows APIs using kernel32.GetProcAddress
enumerating the Process Environment Block (PEB)
HTTP HEAD request
check if it is connected to the internet by making a request
will make a HTTP GET request
will make a POST request
NBTScan for network reconnaissance
System Network Connections Discovery
PsExec for lateral movement
obtained credentials for pivoting with Mimikatz
detect memory dumps of the lsass process
OS Credential Dumping: LSASS Memory
had been archived
encrypted copy
encrypting the base encryption key with RSA (with a hard-coded 1024-byte public key) and encoding it in Base64.
uploaded.
Exfiltration Over C2 Channel
to run bruteforcing offline.
scan hosts for so-called Eternal* SMB vulnerabilities with SMBTouch and then, where possible, run the EternalBlue exploit and infect the computer
Exploitation of Remote Services
SysUpdate and HyperBro backdoors were installed
push Polar ransomware to computers and run it,
Three files are sent to the victim's computer:
obtained the credentials of a domain administration at headquarters
account of the compromised domain admin
Valid Accounts: Domain Accounts
is a .NET DLL library (compiled on April 29, 2020) imported when GDFInstall.exe is run
XOR decrypted with key ABCSCDFRWFFSDJJHGYUOIj.
decoded with Base64
decrypts a third component
decrypted and decoded version
Deobfuscate/Decode Files or Information
payload and intermediate library are deleted before completion
deletes the intermediate DLL library and encrypted ransomware
del
del
yielding a PE file that is loaded and run in memory with .NET.
wmic
Windows Management Instrumentation
wmic
"cmd.exe
Command and Scripting Interpreter: Windows Command Shell
looks for
list of connected disks and starts recursive traversal of directories
sends an HTTP POST request with the name of the victim's computer to a server
T1071\nApplication Layer Protocol: Web Protocols
SCHTASKS /Create
schtasks /run
Scheduled Task/Job: Scheduled Task
Scheduled Task/Job: Scheduled Task
Exploit Public-Facing Application
Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder
Valid Accounts: Default Accounts
Exploitation for Privilege Escalation
System Information Discovery
Lateral Tool Transfer
Data from Local System
Encrypted Channel: Symmetric Cryptography
Unpacked file names
obfuscation of the GuLoader shellcode and payloads
to download additional malicious files
subsequently download Remcos on the target system
:taking full control of the infected machinerecording keystrokes in real time with
The second shellcode revealed after the unpacking algorithm finished processing
this executable is an archive that can be unpacked with the help of 7zip
Once we unpack the file, we can see several elements, as well as directories typical for NSIS:
It is unpacked
This packer has been around for many years
Then the functions are used to load and decrypt the payload.
The decryption function is custom
custom decryption algorithm is being applied on the buffer
The algorithm used for the buffer decryption differs across the samples.
This shellcode is used for decrypting
the key that will be used for the decryption is prepared.
After the PE is decrypted
we can see decryption of the next stage with the help of a custom algorithm
It contains a very similar function dedicated to decrypting and loading the final payload
Both of them are encrypted,
loading the final payload (PE file) from the third of the encrypted files.
The authors used several common techniques to obfuscate this process.
passing the path to the encrypted component as a parameter.
obfuscating malicious elements.
As before, they are resolved by their hashes.
Then, a function defined by its hash is retrieved (using the same hashing algorithm that was used to retrieve imports from normally loaded DLLs):
By extracting the syscalls, and executing them manually, the malware can use the API of the operating system, without a need of calling functions from the DLL.
functions has been resolved by their hashes.
The hashing function used for import resolving
By extracting the syscalls, and executing them manually, the malware can use the API of the operating system,
using low level APIs: NtCreateSection, NtMapViewOfSection
Functions are always the same – dedicated to reading the file from the disk: CreateFileW, GetTempPathW, lstrcatW, ReadFile, VirtualAlloc, GetTempPathW.
The function GetTempPathW is used
The low-level functions, directly related with performing the injection, are called via raw syscalls
PE injection
The payload is implanted into a newly created suspended process (a new instance of the current executable) using one of the most popular techniques of PE injection: Process Hollowing
a second, encrypted component, which carries the payload.
a check against blacklisted processes.
exploiting vulnerabilities in the remote desktop protocol (RDP).
distributing phishing emails containing malicious files
it attempts to establish a connection with the remote server to retrieve the subsequent component of the attack
a malicious template file is downloaded and executed
to trigger the retrieval of the final stage payload
This enables the document to fetch the .dotm file from the remote server required for further actions
Upon opening the malicious document
an obfuscated VBA macro
“cmd /c
the Windows Registry or NTFS Extended Attributes to hide their data,
hide a second stage payload in registry transaction files
perform a\nnumber of changes on the filesystem or registry,
to store and retrieve binary data with\nthe Windows API.
It provides\napplications with API functions—available
accessible through API functions.
opened with the CreateLogFile() API
using the clfsw32.dll API function
This function is\npatched using Microsoft Detours—a publicly available library used for\ninstrumenting Win32\nfunctions—so
resolves the function\naddress for the ServiceMain export function
via the API CreateFileTransactedA()
via the API\nNtCreateSection()
Malware Obfuscation
most of the strings used by\nPRIVATELOG and STASHLOG are obfuscated
each string is therefore\nencrypted with a unique byte stream.
relies on XOR’ing each byte with a hard-coded
the\ncontrol flow obfuscation.
In addition to containing obfuscated strings, the installer’s code\nis protected using various control flow obfuscation techniques that\nmake static analysis cumbersome
the installer\ngenerates and prints out encryption keys that the actor uses to\npre-encrypt the payload before it is written to disk
Following the payload header, the malware expects blocks of\nencrypted data with 8-byte headers.
Each block is then\nre-encrypted with the new key material as follows:\n The encryption key is the 16-byte GUID
The encryption algorithm\nis HC-128,
Sample string deobfuscation
some of the deobfuscated strings from the installer\nare used for logging error messages and
the installer opens and decrypts the\ncontents of the file passed as an argument
decrypted file contents
the decrypted data matches\nthe payload
the malware decrypts\neach block using HC-128
the payload which will be\ndecrypted.
its contents are decrypted\nusing the HC-128 encryption algorithm
The decryption key and IV are\ngenerated using the same unique host properties
only decrypts the first matching\nblock
the decrypted\npayload contents
file that\nshould be hidden in a CLFS file
it searches for .blf files in the\ndefault user’s profile directory
starts by enumerating *.blf files in the default user’s profile\ndirectory
malware\nalso checks that the operating system version
The injection\nprocess
For example,\nto open a registry key in a transaction, the functions\nRegCreateKeyTransacted(), RegOpenKeyTransacted(), and\nRegDeleteKeyTransacted() are available.
The GUID returned from the registry value
Mimikatz to steal credentials from host memory.
Mimikatz
Uses Mimikatz to harvest credentials.
decrypts them locally.
Once decrypted,
begins to decrypt and parse its embedded configuration
decrypting the rest of the blob once it has been decoded.
Once the REvil configuration has decrypted
Decrypted REvil configuration
decrypted Ransom Cartel configuration
they are written to the registry,
it is written to the registry key SOFTWARE\\Google_Authenticator\\b52dKMhj,
Once the data has been written to the registry
stored within the registry
Modifies the Registry to disable UAC remote restrictions by setting SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy to 1.
first checks to see if the registry already contains previously generated values; if so, it will read those values into memory.
the command line provided to the ransomware is parsed.
cmd.exe
Uses cmd.exe to execute commands.
to disable UAC remote restrictions by setting SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy to 1.
Adds registry run keys to achieve persistence.
to download and install payloads
to retrieve the malicious payload and download additional resources
Downloads and uploads files to and from the victim’s machine.
the tool downloads the files
Uses legitimate VPN, RDP, Citrix or VNC credentials to maintain access to an environment.
Deploys PDQ Inventory Scanner tool.
using a cracked version of a legitimate tool called PDQ Inventory, which is a legitimate system management solution that IT administrators use to scan their network and collect hardware, software and Windows configuration data
to enable offline password cracking.
Uses Rundll32 to load and execute malicious DLL.
the ransomware will proceed to spawn another instance of itself via rundll32.exe
Deletes some of its files used during operations as part of cleanup, including removing applications such as 7z.exe, tor.exe, ssh.exe
Uses encoded PowerShell commands.
utilizing string encryption
encrypted configuration
a base64-encoded ransom note,
The configuration is stored as a base64-encoded blob, whereby the first 16 bytes of the base64-encoded blob is the RC4 key
opts to obfuscate their ransomware much more heavily
Searches for specific files prior to encryption.
seeks out files with the following file extensions: .log, .vmdk, .vmem, .vswp and .vmsn.
Target specific file path
to search machines for certain files
Uses AnyDesk to remotely connect and transfer files.
used this as a remote access tool to establish an interactive command and control channel
Routes traffic over TOR and VPN servers to obfuscate their activities.
TOR sites redirecting to a new ransomware operation
API hashing
the username
computer name, domain name, locale and product name.
leads to a function that iterates over a call
executes the batch file,
a batch script used
batch files
A new batch file, localdisk.bat, was also executed
These discovery actions were completed several times again in other various batch files.
it was executed using a command line argument
a batch file.
the execution of the batch file
The batch file eyewear.bat then executed two commands
C:\Windows\system32\cmd.exe /c
C:\Windows\system32\cmd.exe /c
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe
enter this directly in the host OS command shell.
C:\Windows\system32\cmd.exe /C
:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
cmd.exe /C
invoked from the command line
Another batch file
leveraged by a batch file
C:\Windows\System32\cmd.exe /C
using the command line
the threat actors dropped several batch scripts on the server:
the batch file
cmd.exe /c
cmd.exe /c
cmd.exe /c
cmd.exe /c
a batch file
The threat actor installed Atera and Splashtop remote access software
They then repeated the install of the remote access software package.
the threat actor installed RSAT (Remote Server Administration Tools) on the beachhead host
AnyDesk was used to move laterally between a workstation and a backup server
three different Remote Access Software were used by the threat actor
the threat actor used three different tools in order to establish an interactive and persistent command and control channel.
the installation of the remote management tools
began their first lateral movement to a server in the environment by copying their Cobalt Strike DLL over to the host and executing it
the threat actors moved to install AnyDesk on several servers including a backup management host, likely as a further means of persistence or later command and control.
they connected to a domain controller and dropped three scripts; one to copy the ransomware executable to all hosts, one to reset every users password in the organization, and a final one to execute the staged ransomware payload using PsExec
executing it via a remote service.
proceeded to dump LSASS memory
ProcDump was used to dump LSASS memory.
several different Mimikatz implementations were executed on the domain controller, including a Mimikatz executable
There were several variants of Mimikatz in binary and PowerShell form
C:\Windows\system32\cmd.exe /C mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords"
C:\Windows\system32\cmd.exe /C mimikatz.exe privilege::debug sekurlsa::logonPasswords full samdump
Multiple injections into the LSASS process were observed on multiple hosts.
LSASS process to access credentials.
Process dump of the LSASS process
the lsass.exe beacon
c:\windows\temp\procdump64.exe -accepteula -ma lsass.exe
Several more beacons were also loaded on the host using DLLs and PowerShell.
the threat actor moved on to downloading a variety of beacon executables
to execute various dropped tools or beacons on the endpoint,
files that where downloaded from those sites:
file downloads relating to tooling/scripts.
The threat actors downloaded the lsass.exe beacon from their attacker hosted infrastructure
Lots of custom scripts dropped by threat actors
Other tools and scripts were dropped onto one endpoint
the threat actors often opened Internet Explorer to download their beacons
The threat actors dropped the first of their ransomware binaries on the fourth day of the intrusion
the threat actors had the clear text credentials for one of the domain administrator accounts and began moving lateral to other systems
They issued remote commands using WMIC to conduct discovery, as well as distribute and execute Cobalt Strike beacons.
additional beacons executed using remote WMIC commands,
executed using remote WMI commands
The use of WMIC was leveraged by a batch file
wmic /node
Threat actors used the lolbin wmic.exe in order to execute PowerShell Cobalt Strike beacons on multiple workstations and servers
WmiPrvSe.exe (WMI Provider Host) executed the PowerShell Cobalt Strike beacon on the remote computers.
the threat actors proceeded to RDP to the domain controller.
starting the RDP session
run from their interactive RDP session
used to proxy RDP connections and connect to another computer.
The use of RDP was extensively used throughout the intrusion, using a variety of processes
establishing RDP connections
During these RDP sessions,
This file was opened during their RDP session and contained the PowerShell commands used to launch a new beacon:
RDP traffic and minimize external RDP access
RDP traffic
They then opened an RDP connection back to the primary domain controller
the threat actors executed a PowerShell command to disable Windows Defender Antivirus on the host
Windows Defender tampering
powershell.exe Uninstall-WindowsFeature -Name Windows-Defender-GUI
reviewed Group Policy Objects for the domain.
the user clicked on the ISO file, which created a new virtual hard drive disk
when the victim clicked on the LNK file, it triggered the execution of the batch file
Clicking on the LNK file executes the batch file
a hidden directory
located in a hidden folder
the hidden view attribute in file explorer in reference to the ProgramData folder.
delivered a hidden directory
The ISO file was delivered as a ZIP archive via a malicious spam mail campaign.
DLL was executed using rundll32.exe :\nC:\Windows\system32\cmd.exe /c D:\max\eyewear.bat\n\t➝ rundll32
This process was invoked by RunDLL32.exe
malware running via Rundll32
file was executed by the injected Rundll32.exe process.
a single Rundll32.exe process
rundll32 locker_32.dll,run
loads it using rundll32
The decoded PowerShell function
Decoded from Base64:
A scheduled task was then created using this same DLL.
A scheduled task was created at that time to maintain persistence on this host
GetSystem creates a service
used to inject a new beacon or a specific program to another process on the victim’s computer.
The injection is also visible from memory dumps
Several hosts showed rundll32 processes exhibiting common process injection behavior
Code injection in LSASS
an injected Cobalt Strike beacon
the injected Rundll32.exe process.
The common processes observed were two injected processes
a beacon injected into a single Rundll32.exe process
to discover information relating to the user
host,
cmd.exe /C hostname
systeminfo
systeminfo
queried a number of target hosts to determine the host disk drive configuration
This can be useful to determine drives, including mounted network shares.
logicaldisk get caption,description,drivetype,providername,volumename
network configuration
ipconfig /all
ipconfig
C:\Windows\system32\cmd.exe /C dir /s *file/
threat actors used the dir command
C:\Windows\System32\cmd.exe /C dir
This was double base64 encoded.
PowerShell Base64 encoded string:\n\nThe -e is short for -EncodedCommand.
The base64 encoding starts with JAB that is a common pattern for UTF-16 starting with $
PowerShell encoded commands:
powershell -np -w hidden -encodedcommand
used to proxy
Proxying RDP traffic via a processes such as a Cobalt Strike beacon reduces the exposure of the threat actor’s own infrastructure, and blends RDP activity to those of internal hosts on the network.
the threat actors made attempts to proxy RDP traffic
the RDP traffic was being proxied through
attempted to masquerade dropped files as legitimate Microsoft Windows executables
Once the file was unpacked
the documents were exfiltrated over one of the encrypted C2 channels.
When the payload was executed, there were some telltale registry events observed
files were then deleted
packed versions uploaded to VT
pack the code’s dependencies into the .NET assembly so it can run self-contained.
compression using QuickLZ
with names invoking popular videogames such as Fortnite, Valorant, Roblox or Warzone2.
create a legitimate looking folder to drop an illicit version of the System Configuration Utility msconfig.exe
creates the folder “C:Windows System32”, with a space after Windows
packaged into an obfuscated PowerShell batch file
heavily obfuscated batch file is hidden and automatically executed when launched.
script extracts two separate binaries from the base64 encoded text
another obfuscated binary carrying an embedded resource
extraction of the resources leads to the final payloads
Option to embed additional malware to be executed
the rootkit’s DLL that is embedded as a resource
fileless and executed only in memory after going through several decryptions and decompression routines
AES decrypts, and GZIP decompresses it to produce two separate byte arrays
will be decompressed and decrypted
decompress and decrypt the final payload
Hooks several functions from ntdll.dll to hide its presence.
leveraging Windows Management Instrumentation (WMI) to identify the system’s manufacturer.
identify the system’s manufacturer
delivered to the victim, commonly through a phishing mail
receives a ZIP file containing a benign file in plain sight
automatically executed when launched.
bat file format
spawned with PowerShell via Task Scheduler
using PowerShell.
base64 encoded text later in the file
more obfuscation and encryption techniques that lead to the final payload.
stored as obfuscated data in the registry
prefix is used to hide files, directories, NamedPipes, scheduled tasks, processes, registry keys/values, and services.
writes it as encrypted data.
deletes it as soon as the utility is running
stored as obfuscated data in the registry
Creating a registry key to store the malware code
saves its configuration as a registry key.
spawned with PowerShell via Task Scheduler
Creating a scheduled task to execute the malware using PowerShell.
injected into the winlogon.exe process.
injected into other processes.
injects itself and additional malware(s) into all processes
be injected into the winlogon.exe process
carries out process injections
loads a fresh copy of ntdll.dll,
loading a fresh copy of “ntdll.dll” from disk to avoid process hollowing detection
executed via dllhost.exe using process hollowing techniques.
injects the rootkit when new processes are created
Injects the rootkit to a newly created process by another process and updates the callee via NamedPipe
executes an executable using process hollowing
Enumerates all running processes
executes a file using ShellExecute
utilizes the same Common Name in their TLS certificate.
secure communication through TLS encryption.
support for TCP network streams (both IPv4 and IPv6),
Controlling attached camera devices to take pictures of the compromised computer’s surroundings.
takes screenshots at regular intervals.
can periodically take screenshots and store them with information about the foreground process and time since the last user input
To limit the disk space used, images where fewer than 5% of the pixels differ from the most recently stored capture aren’t saved.
similar screen captures
uses a custom network protocol, which can function over HTTP
we can see one more HTTP request
HTTP POST request used for FlowCloud C&C communication
can send and receive data over HTTP.
communicates with a hardcoded IP address via HTTP.
can communicate over HTTP or via its “normal protocol”.
The HTTP protocol uses the message format detailed in the previous paragraph, but it adds a few extra steps to disguise its traffic as legitimate HTTP
The fields required for HTTP
used for HTTP client requests
used for HTTP server responses
HTTP by prepending the data with a hardcoded
or raw TCP, for C&C server communications.
can communicate over raw TCP sockets.
normal protocol uses raw TCP sockets and a custom message format
which can check running processes
which can check running processes against a hardcoded list
backdoors can list running processes.
functionalities that collect information about programs and processes,
Other commands can be used to retrieve a detailed list of available services and currently running processes.
It checks running processes
the running processes using  CreateToolhelp32Snapshot and  Process32Next
the PID of the process in which the orchestrator is running.
we found a custom AntivirusCheck class, which can check running processes against a hardcoded list of executable filenames from known security products, including ESET products
can check whether specific security software is installed on the machine it tries to compromise,
there is a custom AntivirusCheck class, which can check running processes against a hardcoded list of XOR-encrypted executable filenames from known security products: 360 Total Security, Avast, Avira, AVG, Bitdefender, ESET, Jiangmin Technology Antivirus, Kingsoft, McAfee, Micropoint, Norton, Rising Antivirus, and Trend Micro.
It checks running processes for executables of several known cybersecurity vendors.
contain a section defining specific security software to check for
include the ability to collect mouse movements, keyboard activity
records keystrokes.
backdoor’s components records mouse and keyboard activity to a database.
with the keylogger component of the driver (described in the next section) by reading data from the \\.\pipe\namedpipe_keymousespy_english named pipe.
it acts as both a keylogger
Read (IRP_MJ_READ) for the keyboard driver (kbdclass or KeyboardClass0)
handlers for keyboard and mouse events, the driver simply records IO events to lookaside lists before passing them to the legitimate handler.
Keylogging
by compromising a web-facing application such as Microsoft Exchange or SharePoint
exploited Microsoft SharePoint servers in 2019 to gain code execution, probably by leveraging CVE-2019-0604
The public-facing application compromise approach
has exploited web server vulnerabilities for initial access.
Initial access to targets is obtained by exploiting vulnerable internet-facing applications such as Microsoft Exchange,
These were either dropped directly via the webshell or downloaded from a remote server
The following files are downloaded and written to disk:
The communications module then downloads the main backdoor module,
This downloader simply downloads the loader
Encoded Royal Road payload
this encrypted file is
The identical encrypted file
deployed in a multistage process that uses various obfuscation and encryption techniques to hinder analysis
The values for these executables and configuration data can be found, encrypted, in the loader’s resource section.
most resources are written to disk encrypted,
In some cases, they are then re-encrypted but with a different key
same sequence of opcodes to obfuscate the program’s flow
control flow obfuscation snippet
files are distributed and stored in encrypted form.
Base64-encoded strings
new encrypted shellcode
This configuration file is encrypted using the just-described function and starts with the magic bytes 0xAF1324BC
and encrypted QuasarRAT payload
control flow obfuscation to hinder analysis
the document triggers the injection of a custom downloader – a PE executable – into an iexplore.exe process.
that decrypts hardcoded shellcode
Shellcode decryption loop
and only decrypted in memory when needed.
the loader decrypts and parses the embedded installation configuration
the rootkit module is decrypted
the self-decrypting DLL,
[sic] section of a decoded FlowCloud config
It first decrypts the embedded DLL using a byte-oriented XOR-and-ADD scheme
Once it has decrypted the embedded DLL
Self-decrypting DLL
The loaded shellcode is a self-decrypting DLL.
DLL decryption routine
and only decoded as needed.
a thread that decrypts and loads the fcClient module
The decrypted shellcode
decrypt the embedded module
into the shellcode that will decompress and load the Korplug payload.
It decrypts and loads
decrypted before being written
and injects it into iexplore.exe using WriteProcessMemory.
The next stage, injected into iexplore.exe
The injected code loads the same backdoor (rescure.dat) into the process’s memory and calls its startModule export to finish the installation.
the injection process
perform process injection to masquerade as harmless processes.
The module creates a new process using the same executable and performs process injection on it, redirecting the existing thread to the written code region.
The loader injects an orchestrator into memory in a svchost.exe process.
the orchestrator injects the network component into memory
the process into which the shellcode will be injected
and inject    shellcode,
Persistence for the downloaded payload is established via the Tendyron value under the Run key HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run.
the task or service attains persistence by being set to start automatically on boot
It then sets specific registry keys and files as guardrails to skip the setup on subsequent runs.
uses filenames that are either similar to those of legitimate Windows files (e.g., rebare.dll which could be mistaken for rebar.dll) or innocuous looking (e.g., AC146142) to avoid suspicion.
named after legitimate utilities are written into the %ProgramFiles%\MSBuild\Microsoft\Expression\Blend\msole\ subdirectory.
This process is further camouflaged by changing its associated executable filename to one of svchost.exe or dllhost.exe in the same kernel structure.
registry key where each embedded resource is to be written
by writing to specific registry keys.
Network shellcode registry keys
stored in the Windows registry.
shows the three registry keys used
creating the files and registry keys
2001Path to the registry key for the PrintProcessor service
The paths and registry keys to use
it can create a service
service is then created
can be configured to create a service for persistence.
it can create a service or scheduled task.
persistence is established by using the ITaskService COM interface to create the \Microsoft\Windows\CertificateServicesClient\NetTask scheduled task
This task will run the DLL hijacking target as SYSTEM at each boot.
uses COM interfaces to schedule tasks
creates a scheduled task for persistence.
service was configured to execute the next step of the installation process by running a legitimate application
service is then created to run that module and is immediately started
target for DLL side-loading
DLL side-loading
the malicious library is the same and serves to load and execute shellcode from a file that is stored under the same name as the DLL
the new process loads the decoy DLL and manually replaces its content in memory with the fcClientDll module (a process known as module stomping or DLL hollowing),
uses DLL Side-Loading to launch its second-stage dropper.
If a task with the same name already exists, it is deleted before the new one is created
After hijacking the aforementioned drivers, the rootkit erases the DLL names associated with them from internal structures used to display device drivers.
Covers its tracks by overwriting the code previously modified by the malicious library with a useless call to lstrlenW.
removing their entries from the ActiveProcessLinks list of the undocumented KPROCESS kernel structure.
The file is then deleted from the disk
deletes its rootkit’s executable after launching it.
then starts a suspended process to perform injection on it.
stores collected data in local SQLite databases prior to exfiltration.
Each manager stores collected data in its own SQLite database, while data that is collected on demand is returned directly to the C&C server
uses local caches to stage data
data can be collected locally by the corresponding class before it is staged for exfiltration.
can exfiltrate files from local file systems.
The corresponding files are collected
Monitoring file system events to collect new and modified files.
can search through connected file systems and obtain directory listings.
walks through all mapped file systems and collects files
collects file and directory metadata
uses malicious RTF and DOCX attachments to compromise victims.
sending spearphishing emails with malicious attachments such as RTF documents created via the Royal Road builder
makes extensive use of the Windows API to execute commands and launch processes.
performs the functions of LoadLibrary and calls the loaded module’s startModule export.
used for function imports (via GetProcAddress)
perform WMI queries
uses WMI for lateral movement and information gathering.
runs WMI queries every second to get all process creation and termination events.
lateral movement scripts such as WMIExec.
use locally configured proxies.
can use XOR, TEA, RC4 and a modified AES algorithm to encrypt traffic and files.
It is encrypted using the AES algorithm
The application and the accompanying relevant and malicious DLL were both embedded in the loader’s resources.
the embedded DLL
the embedded DLL
It also embeds a DLL version of the Pafish (aka Paranoid Fish) sandbox and analysis detection tool as one of its encrypted resources
This module is embedded in the library’s resource section and encrypted with an algorithm similar to RC4
the function used to encrypt and decrypt the embedded module
Another component collects information about mapped volumes, including mount point, name, drive type, and disk usage data.
This is sent to the server along with the computer’s name
This includes bidirectional file transfers between the C&C and the compromised machine.
This configuration corresponds to resource 1000 in the initial loader. It defines the address and port for both the exfiltration server (file_server) and the C&C server
a given command line.
is protected with DNGuard, a commercial .NET packer.
uses both regular and reflective DLL injection.
proxy/tunneling utilities (HTran, LCX, EarthWorm
read from a file on disk or a registry key.
components use registry keys to signal each other.
it collects usernames
usernames
directory listings
directory listings were harvested as a result.
hostnames
machine names
execution using scheduled tasks
downloaded and run by the plaintext PY files from external infrastructure.
it download and execute yet another Python script
Code responsible for downloading cron_script file
keylogging functionality.
malware hidden inside the Python compiled byte code
malicious code is embedded in code
unpacking
Obfuscation is one of the most popular methods to achieve this.
JavaScript obfuscation was used
use of various obfuscation techniques in malware
the most popular obfuscation techniques is execution of Base64-encoded malicious code
use of W4SP crew obfuscation tools such as Hyperion and Kramer
The inspected UEFI firmware was tampered with to embed a malicious code that we dub MoonBounce;
be embedded in the loader itself.
that stages execution of further payloads downloaded from the internet
attempts to fetch another stage of the payload to run in memory,
stage the execution of additional plugins in memory,
Download a file from the C2 server
reaching out to the server to obtain a further payload.
the execution of several functions in the EFI Boot Services Table, namely AllocatePool, CreateEventEx and ExitBootServices
using the WinExec API
injecting it into an svchost.exe process,
injecting it to the address space of another process.
The injected process
an encrypted blob
the encrypted ScrambleCross shellcode
an encrypted configuration file
facilitates the functionality of WMI in Windows
when the WMI service was initiated
upon initiation of the WMI service
Usage of WMI for remote command execution
wmic  /node:<
It works by decrypting a shellcode BLOB with AES-256
through the command line as
via a Windows batch script file
issuing the following command line
Write text to a given *.bat file and execute it
Run a shell command
examples of command lines
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
cmd /C
executing a launcher utility with the filename System.Mail.Service.dll (MD5: 5F9020983A61446A77AF1976247C443D) through the command line as a service.
reg  add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost"
reg  add "HKLM\SYSTEM\CurrentControlSet\Services\iscsiwmi\Parameters"
reg  add "HKLM\SYSTEM\CurrentControlSet\Services\iscsiwmi\Parameters" /
The second way to execute StealthMutant is through the creation of a scheduled task
schtasks /create /TN
schtasks /run
Both the IP and the server directory path are encrypted with AES-128 using a base64 encoded key stored in the backdoor’s image.
The commands retrieved from the server are also encrypted with AES-128
Get list of drives
Get content list from a specified directory
cmd /C "C: & cd \ & dir $temp\ /od"
Sending back the result of the command’s execution to the C2 server.
cmd /C "C: & cd \ & whoami"
cmd /C "C: & cd \ & tasklist"
cmd /C "C: & cd \ & systeminfo"
Copying of files across SMB shares
cmd /C "C: & cd \ & arp -a"
Removal of artefacts from the system
wmic  /node
wmic  /node
wmic  /node
wmic  /node
wmic  /node
wmic  /node
These were used to inject the payload into process memory.
Adds Run Registry Key for Persistence
The persistence technique is simply adding a run registry key for persistence
added to the startup folder
Screen capture
Screen Logger
Keylogging
Keylogger
Gathering system information
System Information
Encoded shellcode in Project File
contained encoded executables and shellcode,
LoadLibraryW, VirtualAlloc, CreateProccessW, and ZwUnmapViewOfSection.
LoadLibraryW loads the module, VirtualAlloc allocates the memory, CreateProcessW created a process, and ZwUnmapViewOfSection is used
using the callback function pointer in CallWindowProc
The payload from the project files was a remote access tool (RAT) called Remcos.
two large arrays of decimal bytes were decoded by the function
Decoding Function
decoding function
Remote Command Line
Registry Editor
stealing multiple types of data
the “UsingTask” element defines the task that will be compiled by MSBuild.
MSBuild has an inline task feature
Modify and query the Windows registry
query the Windows registry
Log keystrokes
Bypass UAC
Egress communications over HTTP, HTTPS
Take screenshots
Set up proxies
payloads are usually shellcode encrypted with a rolling XOR key.
Once the encoded payload has been located
the project file has an encoded and compressed payload
The use of shellcode, encoding, compression, obfuscated strings
since each payload will be encrypted with different keys and each configuration will uniquely change the hash value.
Encrypted payloads will also obfuscate useful strings from static analysis.
using multiple stages and encrypted/obfuscated payloads
the code can be injected into other legitimate running processes
The payload, usually shellcode, is injected into another process.
The shellcode is then executed in a new thread.
An endpoint with a system injected
process injection
and process injection
Inject malicious code into legitimate processes
is a memory-only DLL that runs as a service
that pulls the Cobalt Strike payload from a fake JPG file.
also leveraging steganography to locate the start of the encoded payload
It uses a different custom packer
the malware to unpack
, it extracts, decrypts, and decompresses the data to be executed as shellcode.
This payload is decrypted, decompressed, and then copied into memory
it is decrypted and executed
decode
domain fronting
or download additional stages.
drops and executes Cobalt Strike in the memory space of “rundll32.exe.”
This requires either social engineering tactics to get the target to execute the malware or another program/script to execute the file.
To optimize brute forcing efforts, the malware compares the server prompt upon connection to a hardcoded list of strings
These credentials used appear to be default credentials for IoT devices.
It attempts to specifically gain root access to these devices via a default password
Like the earlier SSH brute-forcing campaign
brute-forced devices
optimizing the brute forcing implementation
Code for the brute forcing implementation is significantly more structured
added to support the Telnet brute force.
Restart Telnet brute forcing
brute forcing
SSH brute forcing code with the more usual Telnet equivalent.
The Telnet brute forcing code is designed primarily for self-propagation
SSH brute-forcing campaign,
This allows it to download and deploy
are downloaded and executed in the victim's system
downloader to the compromised device that executes and downloads the primary payload.
then downloads its payload via software installed on the compromised device, such as ftpget, wget, curl, or tftp, before executing the payload.
It uses the cpuinfo Python module to retrieve information about the CPU.
This code checks if the disk size is greater than a specified threshold (50 GB as example).
uses the win32api.GetDiskFreeSpaceEx() function to retrieve the disk size in bytes
Reflective PE injection
Reflective PE injection is a technique used by malware or advanced attackers to inject a Portable Executable (PE) file directly into the memory of a running process without the need for writing the file to disk
reflective PE injection allows the malware to load and execute its code directly from memory
In reflective PE injection, the PE file is parsed and its sections are reconstructed in the target process’s memory.
-ReflectivePEInjection” that facilitates reflective PE injection using PowerShell.
This module allows the injection of a PE file into a remote or local process’s memory without writing it to disk
Once the PE file is injected and reconstructed in memory, the execution flow can be redirected to the injected code, enabling the malware to operate within the context of the compromised process.
PE reflective injection.
The PE file is downloaded on filesystem and than executed.
uses the DownloadFile method of the WebClient object to download the file from the specified URL and save it to the specified local file path.
the file to be downloaded.
script that downloads a file from a fixed location and executes it.
PowerShell one-liner that can be used to download and execute a remote .ps1 or .exe file:
using LNK files to download malware or other malicious files by leveraging legitimate native apps, such as PowerShell.
simple stager download of an .exe file and its execution.
This line uses the ShellExecute method of the Shell.Application object to execute the downloaded file.
The Shell.Application object provides methods for working with the Windows shell
decrypt
This decryption process utilizes the Fernet algorithm
The script will download and decrypt the string that represents the token
The fernet_decrypt function decrypts an encrypted string
It returns the decrypted message as a decoded string.
it use the harcoded password for decryption using the fernet_decrypt function, and returns the decrypted AUTH Token.
the file will be deleted
access to system APIs,
It uses the win32api.GetDiskFreeSpaceEx() function
Fernet is a symmetric encryption algorithm and token format used for secure communication and data protection
It utilizes symmetric key cryptography, where the same secret key is used for both encryption and decryption
this code comparing the local IP address with a predefined list of network addresses
obfuscation mechanisms during the compilation process.
the injected code
the local disk volumes to be encrypted are also configured in a similar manner.
In addition to file encryption and obfuscation,
(crawl whole tree), I:, H:, G:, F:, E:, and D:.
malware will attempt to gather specific, sensitive information from targeted systems.
the dropper is distributed in the form of a UPX-packed DLL
The malware then abuses the MSDTC service, manipulating the permissions and startup parameters.
its abuse of the legitimate MSDTC service,
malicious oci.dll into the service’s executable
its attempts to steal credentials and browser data.
This includes browser session and credential data.
Credential and Browser Data Theft
It checks that there are no running processes related to security-related software (e.g., Windbg, Autoruns, Wireshark)
It checks that there are no drivers loaded from security-related software (e.g., groundling32.sys)
It checks that the status of certain services belonging to security-related software meets certain conditions (e.g., windefend, sense, cavp)
Like the domain, the URI is composed using a set of hardcoded keywords and paths, which are chosen partly at random and partly based on the type of HTTP request that is being sent out.
DeleteFile
deleting files
ReadRegistryValue
GetRegistrySubKeyAndValueNames
enumerate files and registry keys
The content of the MachineGuid registry value from the key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography
DeleteRegistryValue
SetRegistryValue
manipulating of registry keys
GetProcessByDescription
enumerate processes
The command CollectSystemDescription retrieves the following information:\n\nLocal Computer Domain name\nAdministrator Account SID\nHostName
OS Version
The domain name of the device
Username
System Directory
To avoid detection, attackers renamed Windows administrative tools like adfind.exe which were then used for domain enumeration
schtasks /create /F /tn “\Microsoft\Windows\SoftwareProtectionPlatform\EventCacheManager” /tr “C:\Windows\SoftwareDistribution\EventCacheManager.exe” /sc ONSTART /ru system /
C:\Windows\system32\cmd.exe /C
C:\Windows\system32\cmd.exe /C
With Rundll32,
collect and upload information about the device
to report some basic information about the compromised system
the ability to log keystrokes
keystrokes
logs keystrokes
capture screenshots,
“The reconnaissance data is exfiltrated to the attacker-controlled server through an HTTP POST request
the attacker-controlled server through an HTTP POST request
send phishing emails with malicious HTML attachments
operating system information
collecting system information such as hostnames
OS version information
run the payloads by sideloading them to the legitimate executables
insights on anti-virus software present on the machine
downloading and executing two other PowerShell scripts from a different attacker-controlled server
IPv4 addresses
“The banking trojan targets the victim’s sensitive information
Once user credentials have been compromised, this tool takes “full control” of the account
“When a victim opens the HTML file attachment, an embedded URL is launched in the victim’s browser, redirecting to another malicious HTML file from an attacker-controlled AWS EC2 instance
Identify processes
Logged Processes
Identify processes related to backups, antivirus/anti-spyware,
actors have also gained initial access to victim networks by distributing phishing emails with malicious attachments
by exploiting the following vulnerabilities against Microsoft Exchange servers
removes virus definitions and disables all portions of Windows Defender and other common antivirus programs in the system registry
Microsoft Windows Defender AntiVirus Protection disabled
Microsoft Windows Defender AntiSpyware Protection disabled
Microsoft Exchange Server Privilege Escalation Vulnerability
remove all existing shadow copies via vssadmin on command line
This could cause the file to run when double-clicked instead of opening it with a PDF viewer.
and then downloads a second-stage backdoor from the OpenDrive cloud service.
The decryption routine shared between the BADCALL for Linux and targeted destructive malware for Windows from 2014
uses the same type of strong encryption – AES-GCM
creates a scheduled task on the system that provides persistence.
creates a scheduled task on the system that provides persistence.
creates a scheduled task on the system that provides persistence.
establishes persistence by creating an autostart service that allows it to run whenever the machine boots.
establishes persistence by creating an autostart service that allows it to run whenever the machine boots.
decodes the configuration data and modules.
injects into the svchost.exe process.
injects into the svchost.exe process
malicious actors spread primarily by spearphishing campaigns using tailored emails that contain malicious attachments
has used an email with an Excel sheet containing a malicious macro to deploy the malware.
compromised server that prompts the victim to click
In clicking the photo, the victim unknowingly downloads a malicious JavaScript file that
has attempted to get users to launch malicious documents to deliver its payload.
spread the malware laterally across a network by abusing the Server Message Block (SMB) Protocol.
modules spread the malware laterally across a network by abusing the SMB Protocol.
data exfiltration over a hardcoded C2 server
can send information about the compromised host to a hardcoded C2 server.
uses the Windows Application Programming Interface (API) call, CreateProcessW(), to manage execution flow.
by capturing the CredEnumerateA API.
by capturing the CredEnumerateA API.
leveraging Microsoft’s CryptoAPI
uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files.
leverages a custom packer to obfuscate its functionality.
can modify registry entries
can disable Windows Defender.
can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP.
it searches for the .vnc.lnk affix to steal VNC credentials.
can obtain passwords stored in files
by querying the Software\SimonTatham\Putty\Sessions registry key.
obtains the IP address, location, and other relevant network information from the victim’s machine.
can identify the user and groups the user belongs to on a compromised host.
gathers the OS version, machine name, CPU type, amount of RAM available from the victim’s machine
searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip.
collects local files and information from the victim’s local machine.
uses HTTPS to communicate with its C2 servers
samples have used HTTP over ports 447 and 8082 for C2.
downloads several additional files and saves them to the victim's machine.
uses a custom crypter leveraging Microsoft’s CryptoAPI to encrypt C2 traffic.
